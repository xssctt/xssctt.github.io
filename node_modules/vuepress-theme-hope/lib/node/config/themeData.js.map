{"version":3,"file":"themeData.js","sourceRoot":"","sources":["../../../src/node/config/themeData.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAWvD,MAAM,eAAe,GAAG;IACtB,MAAM;IACN,SAAS;IACT,OAAO;IACP,MAAM;IACN,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,kBAAkB;CACnB,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,GAAQ,EACR,YAA0B,EAC1B,EAAE,UAAU,EAAe,EAChB,EAAE;IACb,MAAM,SAAS,GAAc;QAC3B,OAAO,EAAE,EAAE;QACX,GAAG,MAAM,CAAC,WAAW;QACnB,kCAAkC;QAClC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAC5C,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAC9B,CACF;QACD,OAAO;QACL,sCAAsC;QACtC,UAAU,CAAC;YACT,GAAG;YACH,IAAI,EAAE,qBAAqB;YAC3B,OAAO,EAAE,MAAM,CAAC,WAAW,CACzB,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE;gBACxD,6CAA6C;gBAC7C,IAAI,CAAC,UAAU,EAAE;oBACf,aAAa;oBACb,OAAO,MAAM,CAAC,WAAW,CAAC;oBAE1B,aAAa;oBACb,OAAO,MAAM,CAAC,iBAAiB,CAAC;iBACjC;gBAED,OAAO,CAAC,MAAM,EAAqB,MAAM,CAAC,CAAC;YAC7C,CAAC,CAAC,CACH;YACD,uBAAuB;YACvB,MAAM,EAAE,MAAM,CAAC,WAAW,CACxB,MAAM,CAAC,OAAO,CAAqB;gBACjC,wBAAwB;gBACxB,gEAAgE;gBAChE,GAAG,EAAE,EAAE;gBACP,GAAG,CAAC,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC;aAChC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC;gBACrC,UAAU;gBACS;oBACjB,cAAc;oBACd,GAAG,MAAM,CAAC,WAAW,CACnB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CACjC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,SAAS,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAC/D,CACF;oBACD,iBAAiB;oBACjB,GAAG,YAAY;iBAChB;aACF,CAAC,CACH;SACF,CAAC;KACL,CAAC;IAEF,yBAAyB;IACzB,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAExD,IAAI,GAAG,CAAC,GAAG,CAAC,OAAO;QAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;IAE9D,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import { getLocales } from \"vuepress-shared/node\";\nimport { getEncryptConfig } from \"./encrypt.js\";\nimport { themeLocalesData } from \"../locales/index.js\";\n\nimport type { App } from \"@vuepress/core\";\nimport type { ThemeStatus } from \"./status.js\";\nimport {\n  ThemeData,\n  ThemeLocaleConfig,\n  ThemeLocaleOptions,\n  ThemeOptions,\n} from \"../../shared/index.js\";\n\nconst rootAllowConfig = [\n  \"blog\",\n  \"encrypt\",\n  \"print\",\n  \"pure\",\n  \"darkmode\",\n  \"themeColor\",\n  \"fullscreen\",\n  \"mobileBreakPoint\",\n];\n\n/**\n * Get client-side `themeData`\n */\nexport const getThemeData = (\n  app: App,\n  themeOptions: ThemeOptions,\n  { enableBlog }: ThemeStatus\n): ThemeData => {\n  const themeData: ThemeData = {\n    encrypt: {},\n    ...Object.fromEntries(\n      // only remain root allowed config\n      Object.entries(themeOptions).filter(([key]) =>\n        rootAllowConfig.includes(key)\n      )\n    ),\n    locales:\n      // assign locale data to `themeConfig`\n      getLocales({\n        app,\n        name: \"vuepress-theme-hope\",\n        default: Object.fromEntries(\n          Object.entries(themeLocalesData).map(([locale, config]) => {\n            // remove blog locales if blog is not enabled\n            if (!enableBlog) {\n              // @ts-ignore\n              delete config.blogLocales;\n\n              // @ts-ignore\n              delete config.paginationLocales;\n            }\n\n            return [locale, <ThemeLocaleConfig>config];\n          })\n        ),\n        // extract localeConfig\n        config: Object.fromEntries(\n          Object.entries<ThemeLocaleOptions>({\n            // ensure default locale\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"/\": {},\n            ...(themeOptions.locales || {}),\n          }).map(([localePath, localeConfig]) => [\n            localePath,\n            <ThemeLocaleConfig>{\n              // root config\n              ...Object.fromEntries(\n                Object.entries(themeOptions).filter(\n                  ([key]) => key !== \"locales\" && !rootAllowConfig.includes(key)\n                )\n              ),\n              // locale options\n              ...localeConfig,\n            },\n          ])\n        ),\n      }),\n  };\n\n  // handle encrypt options\n  themeData.encrypt = getEncryptConfig(themeData.encrypt);\n\n  if (app.env.isDebug) console.log(\"Theme config: \", themeData);\n\n  return themeData;\n};\n"]}