import{_ as n,V as s,W as a,$ as t}from"./framework-56e099cb.js";const e="/assets/icon/image-20231129103004184.png",p="/assets/icon/image-20231129103021570.png",o="/assets/icon/image-20231129103049862.png",c="/assets/icon/image-20231129103245386.png",l="/assets/icon/image-20231129151539848.png",i="/assets/icon/image-20231129163625681.png",r="/assets/icon/image-20231129164013025.png",u={},d=t(`<hr><hr><hr><p>如果在使用 <code>@Controller</code> 标注的控制器中出现404错误而在使用 <code>@RestController</code> 中正常工作，可能是由于以下原因：</p><ol><li><strong>返回类型不同：</strong><ul><li><code>@RestController</code> 注解的控制器方法返回的是数据，而不是视图。它会将返回的数据直接写入HTTP响应体中，通常是JSON格式。</li><li><code>@Controller</code> 注解的控制器方法通常返回视图名称，而不是数据。如果没有配置正确的视图解析器，可能会导致404错误。</li></ul></li><li><strong>视图解析器配置：</strong><ul><li>确保在使用 <code>@Controller</code> 时配置了正确的视图解析器，以将逻辑视图名称解析为实际的视图。例如，通过配置 <code>InternalResourceViewResolver</code> 或 <code>ThymeleafViewResolver</code>，具体取决于你使用的视图技术。</li></ul></li><li><strong>路径映射和视图名称：</strong><ul><li>确保 <code>@Controller</code> 中的 <code>@RequestMapping</code> 或 <code>@GetMapping</code> 注解中指定的路径映射和视图名称的返回与你的项目结构和配置相匹配。</li></ul></li></ol><p>示例代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javaCopy code@Controller
public class MyController {
    @GetMapping(&quot;/view&quot;)
    public String getView() {
        return &quot;myView&quot;; // 确保视图名称正确
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>静态资源配置： <ul><li>如果在 <code>@Controller</code> 中使用了 <code>@RequestMapping</code> 指定路径，确保不与静态资源路径冲突。Spring Boot默认会映射<code>/static</code>、<code>/public</code>、<code>/resources</code>和<code>/META-INF/resources</code>为静态资源路径。</li></ul></li></ol><p>![屏幕截图 2023-11-28 161055](/assets/icon/屏幕截图 2023-11-28 161055.png)</p><p>![屏幕截图 2023-11-28 161140](/assets/icon/屏幕截图 2023-11-28 161140.png)</p><p>![屏幕截图 2023-11-28 162419](/assets/icon/屏幕截图 2023-11-28 162419.png)</p><hr><hr><hr><hr><p>![屏幕截图 2023-11-28 163051](/assets/icon/屏幕截图 2023-11-28 163051.png)</p><p>![屏幕截图 2023-11-28 163413](/assets/icon/屏幕截图 2023-11-28 163413.png)</p><p>![屏幕截图 2023-11-28 165929](/assets/icon/屏幕截图 2023-11-28 165929-17012243533793.png)</p><hr><hr><table><thead><tr><th>Bean type</th><th>Explanation</th></tr></thead><tbody><tr><td>HandlerMapping</td><td>处理器 (Controller) 的映射。保存了每个Controller的所有方法都能处理哪些请求。<br>利用map，保存请求url和controller的对应关系: <br><br>所有的映射存在 MappingReqistry 类中。里面有很多map进行配合<br>最终返回的是一个 HandlerExecutionChain 处理器链[handler (真正处理请求的目标方法)interceptors (所有拦截器) : 效果，目标方法执行前后由拦截器进行拦截]<br></td></tr><tr><td>HandlerAdapter<br></td><td>就是一个超级反射工具。用它来反射执行目标方法<br>执行目标方法期间。确定方法的每个参数的值、把返回值封装成ModeLAndview</td></tr><tr><td>HandlerExceptionResolver<br></td><td>异常解析器: <br>利用所有的异常解析看谁能解析这个异常。<br>把异常转成一个 ModeLAndView; <br>全局异常处理; @ControllerAdvice、@ExceptionHandler; <br> 比如: ExceptionHandlerExceptionResolver 异常解析器的作用就是 全局找 所有标注了@ExceptionHandler 注解的方法，看谁能处理这个异常</td></tr><tr><td>ViewResolver<br></td><td>string 的逻辑视图 (页面地址) ，转化为真实 View; 并染<br>详见 View Resolution and View Technologies .<br>比如: <br>BeanNameviewResolver: Bean名字视图解析器，把返回值当前组件的名字去容器中找这个名字的View组件。<br><br>UrLBasedViewResolver: 前缀 + 返回值 + 后缀<br>如果有forward:前缀。new InternalResourceView(forwardUrl);&lt;br如果有redirect:前缀。new RedirectView(你的路径); 在底层调用response.sendRedirect(encodedURL]:</td></tr><tr><td>LocaleResolver<br>LocaleContextResolver<br></td><td>国际化的解析器</td></tr><tr><td>ThemeResolver<br></td><td>主题解析器</td></tr><tr><td>MultipartResolver<br></td><td>文件上传解析器。负责在请求一进来就检查是否文件上传请求，如果是就包装成一个AbstractMultipartHttpServletRequest; 方便以后使用</td></tr><tr><td>FlashMapManager</td><td>洋细看 Flash Attributes .<br>重定向携带数据;放到session中共享数据</td></tr></tbody></table><hr><hr><blockquote><p>简易版 Servlet</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>springbootstudy<span class="token punctuation">.</span></span><span class="token class-name">MVC_servelt_lesson</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">EconomicMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Myserver</span> <span class="token punctuation">{</span>
   <span class="token comment">// private ServerSocket serverSocket;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> portName <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token class-name">ServerSocket</span> serverSocket<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Socket</span> socket<span class="token operator">=</span>serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">handler1</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handler1</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>

        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> substring <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  GET   /admin</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> substring<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> method<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> path<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> className<span class="token operator">=</span>path<span class="token operator">+</span><span class="token string">&quot;Servlet&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">Servlet</span> servlet <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Servlet</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><figure><img src="`+e+'" alt="image-20231129103004184" tabindex="0" loading="lazy"><figcaption>image-20231129103004184</figcaption></figure><figure><img src="'+p+'" alt="image-20231129103021570" tabindex="0" loading="lazy"><figcaption>image-20231129103021570</figcaption></figure><figure><img src="'+o+'" alt="image-20231129103049862" tabindex="0" loading="lazy"><figcaption>image-20231129103049862</figcaption></figure><p>![屏幕截图 2023-11-29 101505](/assets/icon/屏幕截图 2023-11-29 101505.png)</p><figure><img src="'+c+'" alt="image-20231129103245386" tabindex="0" loading="lazy"><figcaption>image-20231129103245386</figcaption></figure><hr><p>Spring MVC（Model-View-Controller）框架遵循一个明确定义的请求处理流程。以下是该过程的逐步详解：</p><ol><li><strong>请求映射（Handler Mapping）：</strong><ul><li>当请求进来时，DispatcherServlet 会查询 HandlerMapping 以确定哪个控制器应该处理请求。</li><li>HandlerMapping 将请求的URL映射到特定的控制器方法（处理程序）。</li></ul></li><li><strong>处理程序执行链：</strong><ul><li>如果找到了合适的处理程序，HandlerMapping 返回一个 HandlerExecutionChain，其中包含选定的处理程序（控制器方法）和与之关联的任何拦截器。</li></ul></li><li><strong>处理程序适配器：</strong><ul><li>然后，DispatcherServlet 调用 HandlerAdapter，负责执行处理程序方法。HandlerAdapter 将请求转换为处理程序方法可以理解的格式。</li><li>对于注解控制器，通常使用反射来调用适当的方法。</li></ul></li><li><strong>拦截器（PreHandle）：</strong><ul><li>在实际处理程序方法执行之前，框架调用 HandlerExecutionChain 中任何拦截器的 preHandle 方法。</li><li>如果任何 preHandle 方法返回 false，请求处理停止，并返回响应。</li></ul></li><li><strong>处理程序执行：</strong><ul><li>执行实际的处理程序方法以处理请求。</li><li>处理程序方法通常执行业务逻辑并返回一个 ModelAndView 对象，其中包含模型（数据）和视图（呈现）。</li></ul></li><li><strong>拦截器（PostHandle）：</strong><ul><li>在执行处理程序方法后，调用拦截器的 postHandle 方法。</li><li>拦截器有机会在呈现 ModelAndView 之前对其进行操作。</li></ul></li><li><strong>视图解析：</strong><ul><li>DispatcherServlet 查询 ViewResolver 以确定根据ModelAndView中的逻辑视图名称要呈现的实际视图。</li><li>视图负责呈现响应，可以是HTML页面、JSON、XML等。</li></ul></li><li><strong>异常处理：</strong><ul><li>如果在处理请求过程中发生异常，它将由配置的异常解析器处理。</li><li>异常解析器将异常映射到适当的错误视图或执行其他配置的操作。</li></ul></li><li><strong>拦截器（AfterCompletion）：</strong><ul><li>最后，在视图呈现后，调用拦截器的 afterCompletion 方法。</li><li>无论是否发生异常，都会调用此方法。</li></ul></li><li><strong>错误处理：</strong><ul><li>如果有任何未处理的异常，框架可能会调用全局错误处理机制，例如错误页面或自定义错误处理组件。</li></ul></li></ol><hr><figure><img src="'+l+'" alt="image-20231129151539848" tabindex="0" loading="lazy"><figcaption>image-20231129151539848</figcaption></figure><hr><figure><img src="'+i+'" alt="image-20231129163625681" tabindex="0" loading="lazy"><figcaption>image-20231129163625681</figcaption></figure><hr><h2 id="springmvc配置" tabindex="-1"><a class="header-anchor" href="#springmvc配置" aria-hidden="true">#</a> SpringMVC配置</h2><h3 id="_1-config配置" tabindex="-1"><a class="header-anchor" href="#_1-config配置" aria-hidden="true">#</a> 1.config配置</h3><figure><img src="'+r+'" alt="image-20231129164013025" tabindex="0" loading="lazy"><figcaption>image-20231129164013025</figcaption></figure>',43),k=[d];function m(v,g){return s(),a("div",null,k)}const f=n(u,[["render",m],["__file","1.html.vue"]]);export{f as default};
