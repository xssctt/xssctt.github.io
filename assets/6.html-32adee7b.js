const e=JSON.parse('{"key":"v-4d2630d6","path":"/other/mq/6.html","title":"MQ","lang":"zh-CN","frontmatter":{"title":"MQ","icon":"page","order":65,"author":"xss","date":"2023-12-11T00:00:00.000Z","category":["MQ"],"tag":["MQ"],"footer":"这是测试显示的页脚","copyright":"无版权","description":"@Configuration public class RabbitConfiguration { @Resource private CachingConnectionFactory connectionFactory; //--------------------------------------------------------------------------------- @Bean(name = \\"listenerContainer\\") public SimpleRabbitListenerContainerFactory listenerContainer() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setConnectionFactory(connectionFactory); factory.setPrefetchCount(1); //将PrefetchCount设定为1表示一次只能取一个 return factory; } //--------------------------------------------------------------------------------- @Bean(\\"directExchange\\") //定义交换机Bean，可以很多个 public Exchange directExchange(){ return ExchangeBuilder.directExchange(\\"amq.direct\\").build(); } //--------------------------------------------------------------------------------- @Bean(\\"directDlExchange\\") //创建一个新的死信交换机 public Exchange directDlExchange(){ return ExchangeBuilder.directExchange(\\"dlx.direct\\").build(); } //--------------------------------------------------------------------------------- //发布订阅 fanoutExchange @Bean(\\"fanoutExchange\\") public Exchange fanoutExchange(){ //注意这里是fanoutExchange 路由 return ExchangeBuilder.fanoutExchange(\\"amq.fanout\\").build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssQueue\\") //定义消息队列 public Queue queue(){ return QueueBuilder .nonDurable(\\"xss\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssQueue1\\") //定义消息队列 public Queue queue1(){ return QueueBuilder .nonDurable(\\"xss1\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } @Bean(\\"xssQueue2\\") //定义消息队列 public Queue queue2(){ return QueueBuilder .nonDurable(\\"xss2\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssDlQueue\\") //创建一个新的死信队列 public Queue dlQueue(){ return QueueBuilder .nonDurable(\\"dl-xss\\") .build(); } //--------------------------------------------------------------------------------- @Bean(\\"hqQueue1\\") public Queue hqQueue1(){ return QueueBuilder.nonDurable(\\"hq1\\").build(); // 同一个队列 } @Bean(\\"hqQueue2\\") public Queue hqQueue2(){ return QueueBuilder.nonDurable(\\"hq1\\").build(); // 同一个队列 } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding binding(@Qualifier(\\"directExchange\\") Exchange exchange, //普通交换机 directExchange @Qualifier(\\"xssQueue\\") Queue queue){ //将我们刚刚定义的交换机和队列进行绑定 return BindingBuilder .bind(queue) //绑定队列 .to(exchange) //到交换机 .with(\\"my-xss\\") //使用自定义的routingKey .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"dlBinding\\") //死信交换机和死信队列进绑定 public Binding dlBinding(@Qualifier(\\"directDlExchange\\") Exchange exchange, //死信交换机 directDlExchange @Qualifier(\\"xssDlQueue\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"dl-xss\\") //绑定 死信队列 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding bindingxss1(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"xssQueue1\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"xss1\\") //不同队列 绑定同一个交换机 .noargs(); } @Bean(\\"binding2\\") public Binding bindingxss2(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"xssQueue2\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"xss2\\") //不同队列 绑定同一个交换机 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding binding1(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"hqQueue1\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"hq1\\") //同一个队列 绑定同一个交换机 routing key 不同 .noargs(); } @Bean(\\"binding2\\") public Binding binding2(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"hqQueue2\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"hq2\\") //同一个队列 绑定同一个交换机 routing key 不同 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"jacksonConverter\\") //直接创建一个用于JSON转换的Bean public Jackson2JsonMessageConverter converter(){ return new Jackson2JsonMessageConverter(); } //---------------------------------------------------------------------------------","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/mq/6.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"MQ"}],["meta",{"property":"og:description","content":"@Configuration public class RabbitConfiguration { @Resource private CachingConnectionFactory connectionFactory; //--------------------------------------------------------------------------------- @Bean(name = \\"listenerContainer\\") public SimpleRabbitListenerContainerFactory listenerContainer() { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); factory.setConnectionFactory(connectionFactory); factory.setPrefetchCount(1); //将PrefetchCount设定为1表示一次只能取一个 return factory; } //--------------------------------------------------------------------------------- @Bean(\\"directExchange\\") //定义交换机Bean，可以很多个 public Exchange directExchange(){ return ExchangeBuilder.directExchange(\\"amq.direct\\").build(); } //--------------------------------------------------------------------------------- @Bean(\\"directDlExchange\\") //创建一个新的死信交换机 public Exchange directDlExchange(){ return ExchangeBuilder.directExchange(\\"dlx.direct\\").build(); } //--------------------------------------------------------------------------------- //发布订阅 fanoutExchange @Bean(\\"fanoutExchange\\") public Exchange fanoutExchange(){ //注意这里是fanoutExchange 路由 return ExchangeBuilder.fanoutExchange(\\"amq.fanout\\").build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssQueue\\") //定义消息队列 public Queue queue(){ return QueueBuilder .nonDurable(\\"xss\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssQueue1\\") //定义消息队列 public Queue queue1(){ return QueueBuilder .nonDurable(\\"xss1\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } @Bean(\\"xssQueue2\\") //定义消息队列 public Queue queue2(){ return QueueBuilder .nonDurable(\\"xss2\\") //非持久化类型 //.durable() 持久化类型 .deadLetterExchange(\\"dlx.direct\\") //指定死信交换机 .deadLetterRoutingKey(\\"dl-xss\\") //指定死信RoutingKey .ttl(5000) //ttl 多久不处理进入死信队列 .maxLength(10) /// .build(); } //--------------------------------------------------------------------------------- @Bean(\\"xssDlQueue\\") //创建一个新的死信队列 public Queue dlQueue(){ return QueueBuilder .nonDurable(\\"dl-xss\\") .build(); } //--------------------------------------------------------------------------------- @Bean(\\"hqQueue1\\") public Queue hqQueue1(){ return QueueBuilder.nonDurable(\\"hq1\\").build(); // 同一个队列 } @Bean(\\"hqQueue2\\") public Queue hqQueue2(){ return QueueBuilder.nonDurable(\\"hq1\\").build(); // 同一个队列 } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding binding(@Qualifier(\\"directExchange\\") Exchange exchange, //普通交换机 directExchange @Qualifier(\\"xssQueue\\") Queue queue){ //将我们刚刚定义的交换机和队列进行绑定 return BindingBuilder .bind(queue) //绑定队列 .to(exchange) //到交换机 .with(\\"my-xss\\") //使用自定义的routingKey .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"dlBinding\\") //死信交换机和死信队列进绑定 public Binding dlBinding(@Qualifier(\\"directDlExchange\\") Exchange exchange, //死信交换机 directDlExchange @Qualifier(\\"xssDlQueue\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"dl-xss\\") //绑定 死信队列 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding bindingxss1(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"xssQueue1\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"xss1\\") //不同队列 绑定同一个交换机 .noargs(); } @Bean(\\"binding2\\") public Binding bindingxss2(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"xssQueue2\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"xss2\\") //不同队列 绑定同一个交换机 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"binding\\") public Binding binding1(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"hqQueue1\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"hq1\\") //同一个队列 绑定同一个交换机 routing key 不同 .noargs(); } @Bean(\\"binding2\\") public Binding binding2(@Qualifier(\\"fanoutExchange\\") Exchange exchange, @Qualifier(\\"hqQueue2\\") Queue queue){ return BindingBuilder .bind(queue) .to(exchange) .with(\\"hq2\\") //同一个队列 绑定同一个交换机 routing key 不同 .noargs(); } //--------------------------------------------------------------------------------- @Bean(\\"jacksonConverter\\") //直接创建一个用于JSON转换的Bean public Jackson2JsonMessageConverter converter(){ return new Jackson2JsonMessageConverter(); } //---------------------------------------------------------------------------------"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xss"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xss\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.37,"words":712},"filePathRelative":"other/mq/6.md","localizedDate":"2023年12月11日","excerpt":"<pre><code>@Configuration\\npublic class RabbitConfiguration {\\n@Resource\\nprivate CachingConnectionFactory connectionFactory;\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n@Bean(name = \\"listenerContainer\\")\\npublic SimpleRabbitListenerContainerFactory listenerContainer() {\\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\\n    factory.setConnectionFactory(connectionFactory);\\n    factory.setPrefetchCount(1);   //将PrefetchCount设定为1表示一次只能取一个\\n    return factory;\\n}\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n@Bean(\\"directExchange\\")  //定义交换机Bean，可以很多个\\npublic Exchange directExchange(){\\n    return ExchangeBuilder.directExchange(\\"amq.direct\\").build();\\n}\\n\\n//---------------------------------------------------------------------------------\\n\\n@Bean(\\"directDlExchange\\")  //创建一个新的死信交换机\\npublic Exchange directDlExchange(){\\n    return ExchangeBuilder.directExchange(\\"dlx.direct\\").build();\\n}\\n\\n//---------------------------------------------------------------------------------\\n\\n//发布订阅 fanoutExchange\\n\\n@Bean(\\"fanoutExchange\\")\\npublic Exchange fanoutExchange(){         //注意这里是fanoutExchange   路由\\n\\n    return ExchangeBuilder.fanoutExchange(\\"amq.fanout\\").build();\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n@Bean(\\"xssQueue\\")     //定义消息队列\\npublic Queue queue(){\\n    return QueueBuilder\\n            .nonDurable(\\"xss\\")   //非持久化类型 //.durable() 持久化类型\\n            .deadLetterExchange(\\"dlx.direct\\")   //指定死信交换机\\n            .deadLetterRoutingKey(\\"dl-xss\\")   //指定死信RoutingKey\\n            .ttl(5000)            //ttl  多久不处理进入死信队列\\n            .maxLength(10)          ///\\n            .build();\\n}\\n\\n//---------------------------------------------------------------------------------\\n\\n@Bean(\\"xssQueue1\\")     //定义消息队列\\npublic Queue queue1(){\\n    return QueueBuilder\\n            .nonDurable(\\"xss1\\")   //非持久化类型 //.durable() 持久化类型\\n            .deadLetterExchange(\\"dlx.direct\\")   //指定死信交换机\\n            .deadLetterRoutingKey(\\"dl-xss\\")   //指定死信RoutingKey\\n            .ttl(5000)            //ttl  多久不处理进入死信队列\\n            .maxLength(10)          ///\\n            .build();\\n}\\n\\n\\n@Bean(\\"xssQueue2\\")     //定义消息队列\\npublic Queue queue2(){\\n    return QueueBuilder\\n            .nonDurable(\\"xss2\\")   //非持久化类型 //.durable() 持久化类型\\n            .deadLetterExchange(\\"dlx.direct\\")   //指定死信交换机\\n            .deadLetterRoutingKey(\\"dl-xss\\")   //指定死信RoutingKey\\n            .ttl(5000)            //ttl  多久不处理进入死信队列\\n            .maxLength(10)          ///\\n            .build();\\n}\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n@Bean(\\"xssDlQueue\\")   //创建一个新的死信队列\\npublic Queue dlQueue(){\\n    return QueueBuilder\\n            .nonDurable(\\"dl-xss\\")\\n            .build();\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n\\n@Bean(\\"hqQueue1\\")\\npublic Queue hqQueue1(){\\n    return QueueBuilder.nonDurable(\\"hq1\\").build();    //  同一个队列\\n}\\n\\n@Bean(\\"hqQueue2\\")\\npublic Queue hqQueue2(){\\n    return QueueBuilder.nonDurable(\\"hq1\\").build();      //  同一个队列\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n@Bean(\\"binding\\")\\npublic Binding binding(@Qualifier(\\"directExchange\\") Exchange exchange,   //普通交换机 directExchange\\n                       @Qualifier(\\"xssQueue\\") Queue queue){\\n    //将我们刚刚定义的交换机和队列进行绑定\\n    return BindingBuilder\\n            .bind(queue)   //绑定队列\\n            .to(exchange)  //到交换机\\n            .with(\\"my-xss\\")   //使用自定义的routingKey\\n            .noargs();\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n@Bean(\\"dlBinding\\")   //死信交换机和死信队列进绑定\\npublic Binding dlBinding(@Qualifier(\\"directDlExchange\\") Exchange exchange,    //死信交换机 directDlExchange\\n                         @Qualifier(\\"xssDlQueue\\") Queue queue){\\n    return BindingBuilder\\n            .bind(queue)\\n            .to(exchange)\\n            .with(\\"dl-xss\\")         //绑定 死信队列\\n            .noargs();\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n\\n@Bean(\\"binding\\")\\npublic Binding bindingxss1(@Qualifier(\\"fanoutExchange\\") Exchange exchange,\\n                        @Qualifier(\\"xssQueue1\\") Queue queue){\\n    return BindingBuilder\\n            .bind(queue)\\n            .to(exchange)\\n            .with(\\"xss1\\")             //不同队列 绑定同一个交换机\\n            .noargs();\\n}\\n\\n\\n@Bean(\\"binding2\\")\\npublic Binding bindingxss2(@Qualifier(\\"fanoutExchange\\") Exchange exchange,\\n                        @Qualifier(\\"xssQueue2\\") Queue queue){\\n    return BindingBuilder\\n            .bind(queue)\\n            .to(exchange)\\n            .with(\\"xss2\\")                //不同队列 绑定同一个交换机\\n            .noargs();\\n}\\n\\n\\n\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n\\n\\n@Bean(\\"binding\\")\\npublic Binding binding1(@Qualifier(\\"fanoutExchange\\") Exchange exchange,\\n                        @Qualifier(\\"hqQueue1\\") Queue queue){\\n    return BindingBuilder\\n            .bind(queue)\\n            .to(exchange)\\n            .with(\\"hq1\\")             //同一个队列 绑定同一个交换机  routing key 不同\\n            .noargs();\\n}\\n\\n\\n@Bean(\\"binding2\\")\\npublic Binding binding2(@Qualifier(\\"fanoutExchange\\") Exchange exchange,\\n                        @Qualifier(\\"hqQueue2\\") Queue queue){\\n    return BindingBuilder\\n            .bind(queue)\\n            .to(exchange)\\n            .with(\\"hq2\\")                //同一个队列 绑定同一个交换机  routing key 不同\\n            .noargs();\\n}\\n\\n\\n//---------------------------------------------------------------------------------\\n\\n\\n\\n\\n\\n\\n@Bean(\\"jacksonConverter\\")   //直接创建一个用于JSON转换的Bean\\npublic Jackson2JsonMessageConverter converter(){\\n    return new Jackson2JsonMessageConverter();\\n}\\n\\n\\n\\n//---------------------------------------------------------------------------------\\n</code></pre>","autoDesc":true}');export{e as data};
