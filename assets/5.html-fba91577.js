const e=JSON.parse('{"key":"v-1cdf9ed8","path":"/other/mybatis/5.html","title":"条件构造wrapper详细使用","lang":"zh-CN","frontmatter":{"title":"条件构造wrapper详细使用","icon":"page","order":24,"author":"xss","date":"2023-12-11T00:00:00.000Z","category":["wrapper"],"tag":["wrapper"],"footer":"这是测试显示的页脚","copyright":"无版权","description":"条件构造器 image-20231206173505662 说明: 以下出现的第一个入参boolean condition表示该条件是否加入最后生成的sql中，例如：query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age) 以下代码块内的多个方法均为从上往下补全个别boolean类型的入参,默认为true 以下出现的泛型Param均为Wrapper的子类实例(均具有AbstractWrapper的所有方法) 以下方法在入参中出现的R为泛型,在普通wrapper中是String,在LambdaWrapper中是函数(例:Entity::getId,Entity为实体类,getId为字段id的getter Method) 以下方法入参中的R column均表示数据库字段,当R具体类型为String时则为数据库字段名(字段名是数据库关键字的自己用转义符包裹!)而不是实体类数据字段名!!! 以下举例均为使用普通wrapper,入参为Map和List的均以json形式表现! 使用中如果入参的Map或者List为空,则不会加入最后生成的sql中!!! 有任何疑问就点开源码看,看不懂函数的点击我学习新知识(opens new window)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/mybatis/5.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"条件构造wrapper详细使用"}],["meta",{"property":"og:description","content":"条件构造器 image-20231206173505662 说明: 以下出现的第一个入参boolean condition表示该条件是否加入最后生成的sql中，例如：query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age) 以下代码块内的多个方法均为从上往下补全个别boolean类型的入参,默认为true 以下出现的泛型Param均为Wrapper的子类实例(均具有AbstractWrapper的所有方法) 以下方法在入参中出现的R为泛型,在普通wrapper中是String,在LambdaWrapper中是函数(例:Entity::getId,Entity为实体类,getId为字段id的getter Method) 以下方法入参中的R column均表示数据库字段,当R具体类型为String时则为数据库字段名(字段名是数据库关键字的自己用转义符包裹!)而不是实体类数据字段名!!! 以下举例均为使用普通wrapper,入参为Map和List的均以json形式表现! 使用中如果入参的Map或者List为空,则不会加入最后生成的sql中!!! 有任何疑问就点开源码看,看不懂函数的点击我学习新知识(opens new window)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xss"}],["meta",{"property":"article:tag","content":"wrapper"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"条件构造wrapper详细使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xss\\"}]}"]]},"headers":[{"level":2,"title":"AbstractWrapper","slug":"abstractwrapper","link":"#abstractwrapper","children":[{"level":3,"title":"allEq","slug":"alleq","link":"#alleq","children":[]},{"level":3,"title":"eq","slug":"eq","link":"#eq","children":[]},{"level":3,"title":"#ne","slug":"ne","link":"#ne","children":[]},{"level":3,"title":"#gt","slug":"gt","link":"#gt","children":[]},{"level":3,"title":"ge","slug":"ge","link":"#ge","children":[]},{"level":3,"title":"#lt","slug":"lt","link":"#lt","children":[]},{"level":3,"title":"#le","slug":"le","link":"#le","children":[]},{"level":3,"title":"#between","slug":"between","link":"#between","children":[]},{"level":3,"title":"#notBetween","slug":"notbetween","link":"#notbetween","children":[]},{"level":3,"title":"#like","slug":"like","link":"#like","children":[]},{"level":3,"title":"#notLike","slug":"notlike","link":"#notlike","children":[]},{"level":3,"title":"likeLeft","slug":"likeleft","link":"#likeleft","children":[]},{"level":3,"title":"likeRight","slug":"likeright","link":"#likeright","children":[]},{"level":3,"title":"notLikeLeft","slug":"notlikeleft","link":"#notlikeleft","children":[]},{"level":3,"title":"#notLikeRight","slug":"notlikeright","link":"#notlikeright","children":[]},{"level":3,"title":"#isNull","slug":"isnull","link":"#isnull","children":[]},{"level":3,"title":"#isNotNull","slug":"isnotnull","link":"#isnotnull","children":[]},{"level":3,"title":"in","slug":"in","link":"#in","children":[]},{"level":3,"title":"#notIn","slug":"notin","link":"#notin","children":[]},{"level":3,"title":"#inSql","slug":"insql","link":"#insql","children":[]},{"level":3,"title":"#notInSql","slug":"notinsql","link":"#notinsql","children":[]},{"level":3,"title":"#groupBy","slug":"groupby","link":"#groupby","children":[]},{"level":3,"title":"#orderByAsc","slug":"orderbyasc","link":"#orderbyasc","children":[]},{"level":3,"title":"#orderByDesc","slug":"orderbydesc","link":"#orderbydesc","children":[]},{"level":3,"title":"#orderBy","slug":"orderby","link":"#orderby","children":[]},{"level":3,"title":"#having","slug":"having","link":"#having","children":[]},{"level":3,"title":"#func","slug":"func","link":"#func","children":[]},{"level":3,"title":"#or","slug":"or","link":"#or","children":[]},{"level":3,"title":"#and","slug":"and","link":"#and","children":[]},{"level":3,"title":"#nested","slug":"nested","link":"#nested","children":[]},{"level":3,"title":"#apply","slug":"apply","link":"#apply","children":[]},{"level":3,"title":"#last","slug":"last","link":"#last","children":[]},{"level":3,"title":"#exists","slug":"exists","link":"#exists","children":[]},{"level":3,"title":"#notExists","slug":"notexists","link":"#notexists","children":[]}]},{"level":2,"title":"#QueryWrapper","slug":"querywrapper","link":"#querywrapper","children":[{"level":3,"title":"#select","slug":"select","link":"#select","children":[]}]},{"level":2,"title":"#UpdateWrapper","slug":"updatewrapper","link":"#updatewrapper","children":[{"level":3,"title":"#set","slug":"set","link":"#set","children":[]},{"level":3,"title":"#setSql","slug":"setsql","link":"#setsql","children":[]},{"level":3,"title":"#lambda","slug":"lambda","link":"#lambda","children":[]}]},{"level":2,"title":"#使用 Wrapper 自定义SQL","slug":"使用-wrapper-自定义sql","link":"#使用-wrapper-自定义sql","children":[{"level":3,"title":"#kotlin持久化对象定义最佳实践","slug":"kotlin持久化对象定义最佳实践","link":"#kotlin持久化对象定义最佳实践","children":[]},{"level":3,"title":"#用注解","slug":"用注解","link":"#用注解","children":[]},{"level":3,"title":"#用XML","slug":"用xml","link":"#用xml","children":[]},{"level":3,"title":"#kotlin使用wrapper","slug":"kotlin使用wrapper","link":"#kotlin使用wrapper","children":[]},{"level":3,"title":"#链式调用 lambda 式","slug":"链式调用-lambda-式","link":"#链式调用-lambda-式","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.06,"words":3017},"filePathRelative":"other/mybatis/5.md","localizedDate":"2023年12月11日","excerpt":"<h1> 条件构造器</h1>\\n<figure><img src=\\"/assets/icon/image-20231206173505662.png\\" alt=\\"image-20231206173505662\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231206173505662</figcaption></figure>\\n<p>说明:</p>\\n<ul>\\n<li>以下出现的第一个入参<code>boolean condition</code>表示该条件<strong>是否</strong>加入最后生成的sql中，例如：query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age)</li>\\n<li>以下代码块内的多个方法均为从上往下补全个别<code>boolean</code>类型的入参,默认为<code>true</code></li>\\n<li>以下出现的泛型<code>Param</code>均为<code>Wrapper</code>的子类实例(均具有<code>AbstractWrapper</code>的所有方法)</li>\\n<li>以下方法在入参中出现的<code>R</code>为泛型,在普通wrapper中是<code>String</code>,在<code>LambdaWrapper</code>中是<strong>函数</strong>(例:<code>Entity::getId</code>,<code>Entity</code>为实体类,<code>getId</code>为字段<code>id</code>的<strong>getter Method</strong>)</li>\\n<li>以下方法入参中的<code>R column</code>均表示数据库字段,当<code>R</code>具体类型为<code>String</code>时则为数据库字段名(<strong>字段名是数据库关键字的自己用转义符包裹!</strong>)而不是实体类数据字段名!!!</li>\\n<li>以下举例均为使用普通wrapper,入参为<code>Map</code>和<code>List</code>的均以<code>json</code>形式表现!</li>\\n<li>使用中如果入参的<code>Map</code>或者<code>List</code>为<strong>空</strong>,则不会加入最后生成的sql中!!!</li>\\n<li>有任何疑问就点开源码看,看不懂<strong>函数</strong>的<a href=\\"https://www.jianshu.com/p/613a6118e2e0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">点击我学习新知识(opens new window)</a></li>\\n</ul>","autoDesc":true}');export{e as data};
