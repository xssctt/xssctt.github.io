import{_ as p,F as i,V as o,W as c,X as s,Y as n,Z as t,$ as e}from"./framework-56e099cb.js";const l={},u=e('<figure><img src="https://s2.loli.net/2023/03/08/9a2q4ZBuWxJs861.jpg" alt="image-20220415163559986" tabindex="0" loading="lazy"><figcaption>image-20220415163559986</figcaption></figure><h1 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h1><p>经过前面的学习，我们已经了解了我们之前的技术在分布式环境下的应用，接着我们来看最后一章的内容。</p><p>那么，什么是消息队列呢？</p><p>我们之前如果需要进行远程调用，那么一般可以通过发送HTTP请求来完成，而现在，我们可以使用第二种方式，就是消息队列，它能够将发送方发送的信息放入队列中，当新的消息入队时，会通知接收方进行处理，一般消息发送方称为生产者，接收方称为消费者。</p><figure><img src="https://s2.loli.net/2023/03/08/yknBVt2jGgFSTO8.jpg" alt="image-20220415165805716" tabindex="0" loading="lazy"><figcaption>image-20220415165805716</figcaption></figure><p>这样我们所有的请求，都可以直接丢到消息队列中，再由消费者取出，不再是直接连接消费者的形式了，而是加了一个中间商，这也是一种很好的解耦方案，并且在高并发的情况下，由于消费者能力有限，消息队列也能起到一个削峰填谷的作用，堆积一部分的请求，再由消费者来慢慢处理，而不会像直接调用那样请求蜂拥而至。</p><p>那么，消息队列具体实现有哪些呢：</p><ul><li>RabbitMQ - 性能很强，吞吐量很高，支持多种协议，集群化，消息的可靠执行特性等优势，很适合企业的开发。</li><li>Kafka - 提供了超高的吞吐量，ms级别的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。</li><li>RocketMQ - 阿里巴巴推出的消息队列，经历过双十一的考验，单机吞吐量高，消息的高可靠性，扩展性强，支持事务等，但是功能不够完整，语言支持性较差。</li></ul><p>我们这里，主要讲解的是RabbitMQ消息队列。</p><h2 id="rabbitmq-消息队列" tabindex="-1"><a class="header-anchor" href="#rabbitmq-消息队列" aria-hidden="true">#</a> RabbitMQ 消息队列</h2>',11),d={href:"https://www.rabbitmq.com",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.youtube.com/watch?v=1qcTu2QUtrU",target:"_blank",rel:"noopener noreferrer"},k={href:"https://medium.com/@runtastic/messagebus-handling-dead-letters-in-rabbitmq-using-a-dead-letter-exchange-f070699b952b",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,"RabbitMQ轻量级，易于在本地和云端部署，它支持多种消息协议。RabbitMQ可以部署在分布式和联合配置中，以满足大规模、高可用性要求。",-1),m={href:"https://www.rabbitmq.com/devtools.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.rabbitmq.com/devtools.html",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"我们首先还是来看看如何进行安装。",-1),f=s("h3",{id:"安装消息队列",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装消息队列","aria-hidden":"true"},"#"),n(" 安装消息队列")],-1),y={href:"https://www.rabbitmq.com/download.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>由于除了消息队列本身之外还需要Erlang环境（RabbitMQ就是这个语言开发的）所以我们就在我们的Ubuntu服务器上进行安装。</p><p>首先是Erlang，比较大，1GB左右：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> erlang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着安装RabbitMQ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，可以输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来查看当前的RabbitMQ运行状态，包括运行环境、内存占用、日志文件等信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Runtime

OS PID: 13718
OS: Linux
Uptime (seconds): 65
Is under maintenance?: false
RabbitMQ version: 3.8.9
Node name: rabbit@ubuntu-server-2
Erlang configuration: Erlang/OTP 23 [erts-11.1.8] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:64]
Erlang processes: 280 used, 1048576 limit
Scheduler run queue: 1
Cluster heartbeat timeout (net_ticktime): 60
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们的RabbitMQ服务器就安装完成了，要省事还得是Ubuntu啊。</p><p>可以看到默认有两个端口名被使用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Listeners

Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一会主要使用的就是amqp协议的那个端口<code>5672</code>来进行连接，25672是集群化端口，之后我们也会用到。</p><p>接着我们还可以将RabbitMQ的管理面板开启，这样话就可以在浏览器上进行实时访问和监控了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次查看状态，可以看到多了一个管理面板，使用的是HTTP协议：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Listeners

Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Interface: [::], port: 15672, protocol: http, purpose: HTTP API
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们打开浏览器直接访问一下：</p><figure><img src="https://s2.loli.net/2023/03/08/HxtXlqi7BUYWdC2.jpg" alt="image-20220415203431587" tabindex="0" loading="lazy"><figcaption>image-20220415203431587</figcaption></figure><p>可以看到需要我们进行登录才可以进入，我们这里还需要创建一个用户才可以，这里就都用admin：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl add_user 用户名 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将管理员权限给予我们刚刚创建好的用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl set_user_tags admin administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建完成之后，我们登录一下页面：</p><figure><img src="https://s2.loli.net/2023/03/08/eEJMsxhc5Onpld8.jpg" alt="image-20220415203728664" tabindex="0" loading="lazy"><figcaption>image-20220415203728664</figcaption></figure><p>进入了之后会显示当前的消息队列情况，包括版本号、Erlang版本等，这里需要介绍一下RabbitMQ的设计架构，这样我们就知道各个模块管理的是什么内容了：</p><figure><img src="https://s2.loli.net/2023/03/08/j5kIgD9ZRQiGtd6.jpg" alt="image-20220416103043845" tabindex="0" loading="lazy"><figcaption>image-20220416103043845</figcaption></figure><ul><li>**生产者（Publisher）和消费者（Consumer）：**不用多说了吧。</li><li>**Channel：**我们的客户端连接都会使用一个Channel，再通过Channel去访问到RabbitMQ服务器，注意通信协议不是http，而是amqp协议。</li><li>**Exchange：**类似于交换机一样的存在，会根据我们的请求，转发给相应的消息队列，每个队列都可以绑定到Exchange上，这样Exchange就可以将数据转发给队列了，可以存在很多个，不同的Exchange类型可以用于实现不同消息的模式。</li><li>**Queue：**消息队列本体，生产者所有的消息都存放在消息队列中，等待消费者取出。</li><li>**Virtual Host：**有点类似于环境隔离，不同环境都可以单独配置一个Virtual Host，每个Virtual Host可以包含很多个Exchange和Queue，每个Virtual Host相互之间不影响。</li></ul><h3 id="使用消息队列" tabindex="-1"><a class="header-anchor" href="#使用消息队列" aria-hidden="true">#</a> 使用消息队列</h3><p>我们就从最简的的模型开始讲起：</p><figure><img src="https://s2.loli.net/2023/03/08/GWkUJx1g8ZnTV57.jpg" alt="image-20220417103647609" tabindex="0" loading="lazy"><figcaption>image-20220417103647609</figcaption></figure><p>（一个生产者 -&gt; 消息队列 -&gt; 一个消费者）</p><p>生产者只需要将数据丢进消息队列，而消费者只需要将数据从消息队列中取出，这样就实现了生产者和消费者的消息交互。我们现在来演示一下，首先进入到我们的管理页面，这里我们创建一个新的实验环境，只需要新建一个Virtual Host即可：</p><figure><img src="https://s2.loli.net/2023/03/08/PzehXHuDyFANIKV.jpg" alt="image-20220419143014974" tabindex="0" loading="lazy"><figcaption>image-20220419143014974</figcaption></figure><p>添加新的虚拟主机之后，我们可以看到，当前admin用户的主机访问权限中新增了我们刚刚添加的环境：</p><figure><img src="https://s2.loli.net/2023/03/08/9cGyunKrTvjfDRp.jpg" alt="image-20220419143115507" tabindex="0" loading="lazy"><figcaption>image-20220419143115507</figcaption></figure><p>现在我们来看看交换机：</p><figure><img src="https://s2.loli.net/2023/03/08/GDnFoizW86pC5l9.jpg" alt="image-20220419143338487" tabindex="0" loading="lazy"><figcaption>image-20220419143338487</figcaption></figure><p>交换机列表中自动为我们新增了刚刚创建好的虚拟主机相关的预设交换机，一共7个，这里我们首先介绍一下前面两个<code>direct</code>类型的交换机，一个是<code>（AMQP default）</code>还有一个是<code>amq.direct</code>，它们都是直连模式的交换机，我们来看看第一个：</p><figure><img src="https://s2.loli.net/2023/03/08/lIpfxGjLPrOatE5.jpg" alt="image-20220419143612318" tabindex="0" loading="lazy"><figcaption>image-20220419143612318</figcaption></figure><p>第一个交换机是所有虚拟主机都会自带的一个默认交换机，并且此交换机不可删除，此交换机默认绑定到所有的消息队列，如果是通过默认交换机发送消息，那么会根据消息的<code>routingKey</code>（之后我们发消息都会指定）决定发送给哪个同名的消息队列，同时也不能显示地将消息队列绑定或解绑到此交换机。</p><p>我们可以看到，详细信息中，当前交换机特性是持久化的，也就是说就算机器重启，那么此交换机也会保留，如果不是持久化，那么一旦重启就会消失。实际上我们在列表中看到<code>D</code>的字样，就表示此交换机是持久化的，包含一会我们要讲解的消息队列列表也是这样，所有自动生成的交换机都是持久化的。</p><p>我们接着来看第二个交换机，这个交换机是一个普通的直连交换机：</p><figure><img src="https://s2.loli.net/2023/03/08/DnpENxIPgOUTSbM.jpg" alt="image-20220419144200533" tabindex="0" loading="lazy"><figcaption>image-20220419144200533</figcaption></figure><p>这个交换机和我们刚刚介绍的默认交换机类型一致，并且也是持久化的，但是我们可以看到它是具有绑定关系的，如果没有指定的消息队列绑定到此交换机上，那么这个交换机无法正常将信息存放到指定的消息队列中，也是根据<code>routingKey</code>寻找消息队列（但是可以自定义）</p><p>我们可以在下面直接操作，让某个队列绑定，这里我们先不进行操作。</p><p>介绍完了两个最基本的交换机之后（其他类型的交换机我们会在后面进行介绍），我们接着来看消息队列：</p><figure><img src="https://s2.loli.net/2023/03/08/q7WcUvZp8NhMb9f.jpg" alt="image-20220419144508881" tabindex="0" loading="lazy"><figcaption>image-20220419144508881</figcaption></figure><p>可以看到消息队列列表中没有任何的消息队列，我们可以来尝试添加一个新的消息队列：</p><figure><img src="https://s2.loli.net/2023/03/08/D8hv6Kbo3eSNzVp.jpg" alt="image-20220419144553817" tabindex="0" loading="lazy"><figcaption>image-20220419144553817</figcaption></figure><p>第一行，我们选择我们刚刚创建好的虚拟主机，在这个虚拟主机下创建此消息队列，接着我们将其类型定义为<code>Classic</code>类型，也就是经典类型（其他类型我们会在后面逐步介绍）名称随便起一个，然后持久化我们选择<code>Transient</code>暂时的（当然也可以持久化，看你自己）自动删除我们选择<code>No</code>（需要至少有一个消费者连接到这个队列，之后，一旦所有与这个队列连接的消费者都断开时，就会自动删除此队列）最下面的参数我们暂时不进行任何设置（之后会用到）</p><p>现在，我们就创建好了一个经典的消息队列：</p><figure><img src="https://s2.loli.net/2023/03/08/yGSt4HbT7iX3Nze.jpg" alt="image-20220419145109450" tabindex="0" loading="lazy"><figcaption>image-20220419145109450</figcaption></figure><p>点击此队列的名称，我们可以查看详细信息：</p><figure><img src="https://s2.loli.net/2023/03/08/NGCFKhcUf9lOADX.jpg" alt="image-20220419145238458" tabindex="0" loading="lazy"><figcaption>image-20220419145238458</figcaption></figure><p>详细相信中包括队列的当前负载状态、属性、消息队列占用的内存，消息数量等，一会我们发送消息时可以进一步进行观察。</p><p>现在我们需要将此消息队列绑定到上面的第二个直连交换机，这样我们就可以通过此交换机向此消息队列发送消息了：</p><figure><img src="https://s2.loli.net/2023/03/08/NGCFKhcUf9lOADX.jpg" alt="image-20220419145520844" tabindex="0" loading="lazy"><figcaption>image-20220419145520844</figcaption></figure><p>这里填写之前第二个交换机的名称还有我们自定义的<code>routingKey</code>（最好还是和消息队列名称一致，这里是为了一会演示两个交换机区别用）我们直接点击绑定即可：</p><figure><img src="https://s2.loli.net/2023/03/08/u95NJG2YskOBpXl.jpg" alt="image-20220419145635179" tabindex="0" loading="lazy"><figcaption>image-20220419145635179</figcaption></figure><p>绑定之后我们可以看到当前队列已经绑定对应的交换机了，现在我们可以前往交换机对此消息队列发送一个消息：</p><figure><img src="https://s2.loli.net/2023/03/08/MBIDVqzf8oce2L4.jpg" alt="image-20220419145725499" tabindex="0" loading="lazy"><figcaption>image-20220419145725499</figcaption></figure><p>回到交换机之后，可以卡到这边也是同步了当前的绑定信息，在下方，我们直接向此消息队列发送信息：</p><figure><img src="https://s2.loli.net/2023/03/08/htEoZ49zu6mipCM.jpg" alt="image-20220419145808450" tabindex="0" loading="lazy"><figcaption>image-20220419145808450</figcaption></figure><p>点击发送之后，我们回到刚刚的交换机详细页面，可以看到已经有一条新的消息在队列中了：</p><figure><img src="https://s2.loli.net/2023/03/08/nO9eUjMRbCmBqPT.jpg" alt="image-20220419145903723" tabindex="0" loading="lazy"><figcaption>image-20220419145903723</figcaption></figure><p>我们可以直接在消息队列这边获取消息队列中的消息，找到下方的Get message选项：</p><figure><img src="https://s2.loli.net/2023/03/08/emrY3SZ98CJRAOh.jpg" alt="image-20220419145936160" tabindex="0" loading="lazy"><figcaption>image-20220419145936160</figcaption></figure><p>可以看到有三个选择，首先第一个Ack Mode，这个是应答模式选择，一共有4个选项：</p><figure><img src="https://s2.loli.net/2023/03/08/nrWPuoGRTp7F36e.jpg" alt="image-20220419150053926" tabindex="0" loading="lazy"><figcaption>image-20220419150053926</figcaption></figure><ul><li>Nack message requeue true：拒绝消息，也就是说不会将消息从消息队列取出，并且重新排队，一次可以拒绝多个消息。</li><li>Ack message requeue false：确认应答，确认后消息会从消息队列中移除，一次可以确认多个消息。</li><li>Reject message requeue true/false：也是拒绝此消息，但是可以指定是否重新排队。</li></ul><p>这里我们使用默认的就可以了，这样只会查看消息是啥，但是不会取出，消息依然存在于消息队列中，第二个参数是编码格式，使用默认的就可以了，最后就是要生效的操作数量，选择1就行：</p><figure><img src="https://s2.loli.net/2023/03/08/c6auDXoHFqZT9M2.jpg" alt="image-20220419150712314" tabindex="0" loading="lazy"><figcaption>image-20220419150712314</figcaption></figure><p>可以看到我们刚刚的消息已经成功读取到。</p><p>现在我们再去第一个默认交换机中尝试发送消息试试看：</p><figure><img src="https://s2.loli.net/2023/03/08/t5V3yQ8kbOKRpxf.jpg" alt="image-20220419150913859" tabindex="0" loading="lazy"><figcaption>image-20220419150913859</figcaption></figure><p>如果我们使用之前自定义的<code>routingKey</code>，会显示没有路由，这是因为默认的交换机只会找对应名称的消息队列，我们现在向<code>yyds</code>发送一下试试看：</p><figure><img src="https://s2.loli.net/2023/03/08/LCVPvykIjMox9m1.jpg" alt="image-20220419151016735" tabindex="0" loading="lazy"><figcaption>image-20220419151016735</figcaption></figure><p>可以看到消息成功发布了，我们来接收一下看看：</p><figure><img src="https://s2.loli.net/2023/03/08/9jsdfADB5HRC7wP.jpg" alt="image-20220419151058659" tabindex="0" loading="lazy"><figcaption>image-20220419151058659</figcaption></figure><p>可以看到成功发送到此消息队列中了。</p><p>当然除了在交换机发送消息给消息队列之外，我们也可以直接在消息队列这里发：</p><figure><img src="https://s2.loli.net/2023/03/08/cYPwJnbiZlmvqD3.jpg" alt="image-20220419151155264" tabindex="0" loading="lazy"><figcaption>image-20220419151155264</figcaption></figure><p>效果是一样的，注意这里我们可以选择是否将消息持久化，如果是持久化消息，那么就算服务器重启，此消息也会保存在消息队列中。</p><p>最后如果我们不需要再使用此消息队列了，我们可以手动对其进行删除或是清空：</p><figure><img src="https://s2.loli.net/2023/03/08/kJE5xwgZOTGWjLq.jpg" alt="image-20220419151548923" tabindex="0" loading="lazy"><figcaption>image-20220419151548923</figcaption></figure><p>点击Delete Queue删除我们刚刚创建好的<code>yyds</code>队列，到这里，我们对应消息队列的一些简单使用，就讲解完毕了。</p><h3 id="使用java操作消息队列" tabindex="-1"><a class="header-anchor" href="#使用java操作消息队列" aria-hidden="true">#</a> 使用Java操作消息队列</h3><p>现在我们来看看如何通过Java连接到RabbitMQ服务器并使用消息队列进行消息发送（这里一起讲解，包括Java基础版本和SpringBoot版本），首先我们使用最基本的Java客户端连接方式：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.14.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖导入之后，我们来实现一下生产者和消费者，首先是生产者，生产者负责将信息发送到消息队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//使用ConnectionFactory来创建连接</span>
    <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//设定连接信息，基操</span>
    factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.0.12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这里写5672，是amqp协议端口</span>
    factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
 		<span class="token comment">//创建连接</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们可以直接在程序中定义并创建消息队列（实际上是和我们在管理页面创建一样的效果）客户端需要通过连接创建一个新的通道（Channel），同一个连接下可以有很多个通道，这样就不用创建很多个连接也能支持分开发送了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//通过Connection创建新的Channel</span>
  	<span class="token comment">//声明队列，如果此队列不存在，会自动创建</span>
    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">//将队列绑定到交换机</span>
    channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">//发布新的消息，注意消息需要转换为byte[]</span>
    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>queueDeclare</code>方法的参数如下：</p><ul><li>queue：队列的名称（默认创建后routingKey和队列名称一致）</li><li>durable：是否持久化。</li><li>exclusive：是否排他，如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。排他队列是基于Connection可见，同一个Connection的不同Channel是可以同时访问同一个连接创建的排他队列，并且，如果一个Connection已经声明了一个排他队列，其他的Connection是不允许建立同名的排他队列的，即使该队列是持久化的，一旦Connection关闭或者客户端退出，该排他队列都会自动被删除。</li><li>autoDelete：是否自动删除。</li><li>arguments：设置队列的其他一些参数，这里我们暂时不需要什么其他参数。</li></ul><p>其中<code>queueBind</code>方法参数如下：</p><ul><li>queue：需要绑定的队列名称。</li><li>exchange：需要绑定的交换机名称。</li><li>routingKey：不用多说了吧。</li></ul><p>其中<code>basicPublish</code>方法的参数如下：</p><ul><li>exchange: 对应的Exchange名称，我们这里就使用第二个直连交换机。</li><li>routingKey：这里我们填写绑定时指定的routingKey，其实和之前在管理页面操作一样。</li><li>props：其他的配置。</li><li>body：消息本体。</li></ul><p>执行完成后，可以在管理页面中看到我们刚刚创建好的消息队列了：</p><figure><img src="https://s2.loli.net/2023/03/08/baiDgVyoPQ65TMX.jpg" alt="image-20220419153630431" tabindex="0" loading="lazy"><figcaption>image-20220419153630431</figcaption></figure><p>并且此消息队列已经成功与<code>amq.direct</code>交换机进行绑定：</p><figure><img src="https://s2.loli.net/2023/03/08/5lENjHswniC4Zg8.jpg" alt="image-20220419154618613" tabindex="0" loading="lazy"><figcaption>image-20220419154618613</figcaption></figure><p>那么现在我们的消息队列中已经存在数据了，怎么将其读取出来呢？我们来看看如何创建一个消费者：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;10.37.129.4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//这里不使用try-with-resource，因为消费者是一直等待新的消息到来，然后按照</span>
    <span class="token comment">//我们设定的逻辑进行处理，所以这里不能在定义完成之后就关闭连接</span>
    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//创建一个基本的消费者</span>
    channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//basicAck是确认应答，第一个参数是当前的消息标签，后面的参数是</span>
        <span class="token comment">//是否批量处理消息队列中所有的消息，如果为false表示只处理当前消息</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//basicNack是拒绝应答，最后一个参数表示是否将当前消息放回队列，如果</span>
        <span class="token comment">//为false，那么消息就会被丢弃</span>
        <span class="token comment">//channel.basicNack(delivery.getEnvelope().getDeliveryTag(), false, false);</span>
        <span class="token comment">//跟上面一样，最后一个参数为false，只不过这里省了</span>
        <span class="token comment">//channel.basicReject(delivery.getEnvelope().getDeliveryTag(), false);</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>basicConsume</code>方法参数如下：</p><ul><li>queue - 消息队列名称，直接指定。</li><li>autoAck - 自动应答，消费者从消息队列取出数据后，需要跟服务器进行确认应答，当服务器收到确认后，会自动将消息删除，如果开启自动应答，那么消息发出后会直接删除。</li><li>deliver - 消息接收后的函数回调，我们可以在回调中对消息进行处理，处理完成后，需要给服务器确认应答。</li><li>cancel - 当消费者取消订阅时进行的函数回调，这里暂时用不到。</li></ul><p>现在我们启动一下消费者，可以看到立即读取到我们刚刚插入到队列中的数据：</p><figure><img src="https://s2.loli.net/2023/03/08/rR7eThxXbufjsEo.jpg" alt="image-20220419155938158" tabindex="0" loading="lazy"><figcaption>image-20220419155938158</figcaption></figure><p>我们现在继续在消息队列中插入新的数据，这里直接在网页上进行操作就行了，同样的我们也可以在消费者端接受并进行处理。</p><p>现在我们把刚刚创建好的消息队列删除。</p>`,112),q={href:"https://docs.spring.io/spring-amqp/docs/current/reference/html/",target:"_blank",rel:"noopener noreferrer"},x=e(`<p>前面我们已经完成了RabbitMQ的安装和简单使用，并且通过Java连接到服务器。现在我们来尝试在SpringBoot中整合消息队列客户端，首先是依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要配置RabbitMQ的地址等信息：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.0.4
    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就完成了最基本信息配置，现在我们来看一下，如何像之前一样去声明一个消息队列，我们只需要一个配置类就行了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//定义交换机Bean，可以很多个</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>     <span class="token comment">//定义消息队列</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
          				<span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//非持久化类型</span>
          				<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token comment">//将我们刚刚定义的交换机和队列进行绑定</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>   <span class="token comment">//绑定队列</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>  <span class="token comment">//到交换机</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//使用自定义的routingKey</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来创建一个生产者，这里我们直接编写在测试用例中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringCloudMqApplicationTests</span> <span class="token punctuation">{</span>

  	<span class="token comment">//RabbitTemplate为我们封装了大量的RabbitMQ操作，已经由Starter提供，因此直接注入使用即可</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">RabbitTemplate</span> template<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">//使用convertAndSend方法一步到位，参数基本和之前是一样的</span>
      	<span class="token comment">//最后一个消息本体可以是Object类型，真是大大的方便</span>
        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来运行一下这个测试用例：</p><figure><img src="https://s2.loli.net/2023/03/08/UxVemu9B2cGifWv.jpg" alt="image-20220419221426545" tabindex="0" loading="lazy"><figcaption>image-20220419221426545</figcaption></figure><p>可以看到后台自动声明了我们刚刚定义好的消息队列和交换机以及对应的绑定关系，并且我们的数据也是成功插入到消息队列中：</p><figure><img src="https://s2.loli.net/2023/03/08/RjY4JUn7v9pmryx.jpg" alt="image-20220419221532673" tabindex="0" loading="lazy"><figcaption>image-20220419221532673</figcaption></figure><p>现在我们再来看看如何创建一个消费者，因为消费者实际上就是一直等待消息然后进行处理的角色，这里我们只需要创建一个监听器就行了，它会一直等待消息到来然后再进行处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>  <span class="token comment">//注册为Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//定义此方法为队列yyds的监听器，一旦监听到新的消息，就会接受并处理</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们启动服务器：</p><figure><img src="https://s2.loli.net/2023/03/08/ZjRs8u2cHbBEOaW.jpg" alt="image-20220419230223151" tabindex="0" loading="lazy"><figcaption>image-20220419230223151</figcaption></figure><p>可以看到控制台成功输出了我们之前放入队列的消息，并且管理页面中也显示此消费者已经连接了：</p><figure><img src="https://s2.loli.net/2023/03/08/RwUFdgqXlDKk7AI.jpg" alt="image-20220419230315376" tabindex="0" loading="lazy"><figcaption>image-20220419230315376</figcaption></figure><p>接着我们再通过管理页面添加新的消息看看，也是可以正常进行接受的。</p><p>当然，如果我们需要确保消息能够被消费者接受并处理，然后得到消费者的反馈，也是可以的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">//会等待消费者消费然后返回响应结果</span>
    <span class="token class-name">Object</span> res <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">convertSendAndReceive</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到消费者响应：&quot;</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者这边只需要返回一个对应的结果即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;收到!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试没有问题：</p><figure><img src="https://s2.loli.net/2023/03/08/OkV6zN9PJRlwnQF.jpg" alt="image-20220421142425891" tabindex="0" loading="lazy"><figcaption>image-20220421142425891</figcaption></figure><p>那么如果我们需要直接接收一个JSON格式的消息，并且希望直接获取到实体类呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>
  	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;jacksonConverter&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//直接创建一个用于JSON转换的Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jackson2JsonMessageConverter</span> <span class="token function">converter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们只需要指定转换器就可以了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>

  	<span class="token comment">//指定messageConverter为我们刚刚创建的Bean名称</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> messageConverter <span class="token operator">=</span> <span class="token string">&quot;jacksonConverter&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//直接接收User类型</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们直接在管理页面发送：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;LB&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,32),w=s("img",{src:"https://s2.loli.net/2023/03/08/3dXbs5naViUMrDO.jpg",alt:"image-20220416225912100",loading:"lazy"},null,-1),j={href:"https://tva1.sinaimg.cn/large/e6c9d24ely1h1byhcakabj221m0lwac0.jpg",target:"_blank",rel:"noopener noreferrer"},Q=e(`<p>可以看到成功完成了转换，并输出了用户信息：</p><figure><img src="https://s2.loli.net/2023/03/08/aM8SCL12hkKynUu.jpg" alt="image-20220416225829807" tabindex="0" loading="lazy"><figcaption>image-20220416225829807</figcaption></figure><p>同样的，我们也可以直接发送User，因为我们刚刚已经配置了Jackson2JsonMessageConverter为Bean，所以直接使用就可以了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到后台的数据类型为：</p><figure><img src="https://s2.loli.net/2023/03/08/xVSpC7KHE1RyOk6.jpg" alt="image-20220419232715025" tabindex="0" loading="lazy"><figcaption>image-20220419232715025</figcaption></figure><figure><img src="https://s2.loli.net/2023/03/08/Q9tBuprGwfleNLZ.jpg" alt="image-20220416231709750" tabindex="0" loading="lazy"><figcaption>image-20220416231709750</figcaption></figure><p>这样，我们就通过SpringBoot实现了RabbitMQ的简单使用。</p><h3 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> 死信队列</h3><p>消息队列中的数据，如果迟迟没有消费者来处理，那么就会一直占用消息队列的空间。比如我们模拟一下抢车票的场景，用户下单高铁票之后，会进行抢座，然后再进行付款，但是如果用户下单之后并没有及时的付款，这张票不可能一直让这个用户占用着，因为你不买别人还要买呢，所以会在一段时间后超时，让这张票可以继续被其他人购买。</p><p>这时，我们就可以使用死信队列，将那些用户超时未付款的或是用户主动取消的订单，进行进一步的处理，以下类型的消息都会被判定为死信：</p><ul><li>消息被拒绝(basic.reject / basic.nack)，并且requeue = false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><figure><img src="https://s2.loli.net/2023/03/08/itUWySuA9kvcEgs.jpg" alt="image-20220419112336088" tabindex="0" loading="lazy"><figcaption>image-20220419112336088</figcaption></figure><p>那么如何构建这样的一种使用模式呢？实际上本质就是一个死信交换机+绑定的死信队列，当正常队列中的消息被判定为死信时，会被发送到对应的死信交换机，然后再通过交换机发送到死信队列中，死信队列也有对应的消费者去处理消息。</p><p>这里我们直接在配置类中创建一个新的死信交换机和死信队列，并进行绑定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;directDlExchange&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建一个新的死信交换机</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dlx.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsDlQueue&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//创建一个新的死信队列</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
                <span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;dlBinding&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//死信交换机和死信队列进绑定</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">dlBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;directDlExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsDlQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
                <span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dlx.direct&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//指定死信交换机</span>
                <span class="token punctuation">.</span><span class="token function">deadLetterRoutingKey</span><span class="token punctuation">(</span><span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//指定死信RoutingKey</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
  	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们将监听器修改为死信队列监听：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">,</span> messageConverter <span class="token operator">=</span> <span class="token string">&quot;jacksonConverter&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，我们来尝试启动一下吧，注意启动之前记得把之前的队列给删了，这里要重新定义。</p><figure><img src="https://s2.loli.net/2023/03/08/AdrS9yxnRojfWgL.jpg" alt="image-20220420103846981" tabindex="0" loading="lazy"><figcaption>image-20220420103846981</figcaption></figure><p>队列列表中已经出现了我们刚刚定义好的死信队列，并且yyds队列也支持死信队列发送功能了，现在我们尝试向此队列发送一个消息，但是我们将其拒绝：</p><figure><img src="https://s2.loli.net/2023/03/08/mLokEWYcQ4PXnar.jpg" alt="image-20220420105359931" tabindex="0" loading="lazy"><figcaption>image-20220420105359931</figcaption></figure><p>可以看到拒绝后，如果不让消息重新排队，那么就会变成死信，直接被丢进死信队列中，可以看到在拒绝后：</p><figure><img src="https://s2.loli.net/2023/03/08/rgiWVJMbpKzQX46.jpg" alt="image-20220420105455291" tabindex="0" loading="lazy"><figcaption>image-20220420105455291</figcaption></figure><p>现在我们来看看第二种情况，RabbitMQ支持将超过一定时间没被消费的消息自动删除，这需要消息队列设定TTL值，如果消息的存活时间超过了Time To Live值，就会被自动删除，自动删除后的消息如果有死信队列，那么就会进入到死信队列中。</p><p>现在我们将yyds消息队列设定TTL值（毫秒为单位）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
            <span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dlx.direct&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">deadLetterRoutingKey</span><span class="token punctuation">(</span><span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>   <span class="token comment">//如果5秒没处理，就自动删除</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们重启测试一下，注意修改了之后记得删除之前的yyds队列：</p><figure><img src="https://s2.loli.net/2023/03/08/u8xboyv3aTJ9ZE6.jpg" alt="image-20220420110317997" tabindex="0" loading="lazy"><figcaption>image-20220420110317997</figcaption></figure><p>可以看到现在yyds队列已经具有TTL特性了，我们现在来插入一个新的消息：</p><figure><img src="https://s2.loli.net/2023/03/08/2qensPxuf3zLoQ1.jpg" alt="image-20220420110504022" tabindex="0" loading="lazy"><figcaption>image-20220420110504022</figcaption></figure><p>可以看到消息5秒钟之后就不见了，而是被丢进了死信队列中。</p><p>最后我们来看一下当消息队列长度达到最大的情况，现在我们将消息队列的长度进行限制：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
            <span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dlx.direct&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">deadLetterRoutingKey</span><span class="token punctuation">(</span><span class="token string">&quot;dl-yyds&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">//将最大长度设定为3</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们重启一下，然后尝试连续插入4个消息：</p><figure><img src="https://s2.loli.net/2023/03/08/56TsMf24QlhZCYL.jpg" alt="image-20220420135316458" tabindex="0" loading="lazy"><figcaption>image-20220420135316458</figcaption></figure><p>可以看到yyds消息队列新增了Limit特性，也就是限定长度：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://s2.loli.net/2023/03/08/d3lEHLPR4VNF92T.jpg" alt="image-20220420135419673" tabindex="0" loading="lazy"><figcaption>image-20220420135419673</figcaption></figure><p>可以看到因为长度限制为3，所以有一个消息直接被丢进了死信队列中，为了能够更直观地观察消息队列的机制，我们为User类新增一个时间字段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token class-name">String</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着每隔一秒钟插入一个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-yyds&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次进行上述实验，可以发现如果到达队列长度限制，那么每次插入都会把位于队首的消息丢进死信队列，来腾出空间给新来的消息。</p><h3 id="工作队列模式" tabindex="-1"><a class="header-anchor" href="#工作队列模式" aria-hidden="true">#</a> 工作队列模式</h3><p>**注意：**XX模式只是一种设计思路，并不是指的具体的某种实现，可以理解为实现XX模式需要怎么去写。</p><p>前面我们了解了最简的一个消费者一个生产者的模式，接着我们来了解一下一个生产者多个消费者的情况：</p><figure><img src="https://s2.loli.net/2023/03/08/8AR4H5LbOCrXZmu.jpg" alt="image-20220420151258324" tabindex="0" loading="lazy"><figcaption>image-20220420151258324</figcaption></figure><p>实际上这种模式就非常适合多个工人等待新的任务到来的场景，我们的任务有很多个，一个一个丢进消息队列，而此时工人有很多个，那么我们就可以将这些任务分配个各个工人，让他们各自负责一些任务，并且做的快的工人还可以做完成一些（能者多劳）。</p><p>非常简单，我们只需要创建两个监听器即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//这里直接接收String类型的数据</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver2</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们发送消息时，会自动进行轮询分发：</p><figure><img src="https://s2.loli.net/2023/03/08/YgibmNxD9qtHajQ.jpg" alt="image-20220420154602883" tabindex="0" loading="lazy"><figcaption>image-20220420154602883</figcaption></figure><p>那么如果我们一开始就在消息队列中放入一部分消息在开启消费者呢？</p><figure><img src="https://s2.loli.net/2023/03/08/Rv6YkDSTPl83Hmo.jpg" alt="image-20220420154654901" tabindex="0" loading="lazy"><figcaption>image-20220420154654901</figcaption></figure><p>可以看到，如果是一开始就存在消息，会被一个消费者一次性全部消耗，这是因为我们没有对消费者的Prefetch count（预获取数量，一次性获取消息的最大数量）进行限制，也就是说我们现在希望的是消费者一次只能拿一个消息，而不是将所有的消息全部都获取。</p><figure><img src="https://s2.loli.net/2023/03/08/UNEniupt5cRHz93.jpg" alt="image-20220420160253144" tabindex="0" loading="lazy"><figcaption>image-20220420160253144</figcaption></figure><p>因此我们需要对这个数量进行一些配置，这里我们需要在配置类中定义一个自定义的ListenerContainerFactory，可以在这里设定消费者Channel的PrefetchCount的大小：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">CachingConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;listenerContainer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span> <span class="token function">listenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">SimpleRabbitListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPrefetchCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将PrefetchCount设定为1表示一次只能取一个</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们在监听器这边指定即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span>  containerFactory <span class="token operator">=</span> <span class="token string">&quot;listenerContainer&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;listenerContainer&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver2</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们再次启动服务器，可以看到PrefetchCount被限定为1了：</p><figure><img src="https://s2.loli.net/2023/03/08/KgWzOUu8ry2V9Ej.jpg" alt="image-20220420164702864" tabindex="0" loading="lazy"><figcaption>image-20220420164702864</figcaption></figure><p>再次重复上述的实现，可以看到消息不会被一号消费者给全部抢走了：</p><figure><img src="https://s2.loli.net/2023/03/08/vmAfh68GpuQXdUk.jpg" alt="image-20220420164827502" tabindex="0" loading="lazy"><figcaption>image-20220420164827502</figcaption></figure><p>当然除了去定义两个相同的监听器之外，我们也可以直接在注解中定义，比如我们现在需要10个同样的消费者：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">,</span>  containerFactory <span class="token operator">=</span> <span class="token string">&quot;listenerContainer&quot;</span><span class="token punctuation">,</span> concurrency <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在管理页面中出现了10个消费者：</p><figure><img src="https://s2.loli.net/2023/03/08/REl1qIaMXLTK6js.jpg" alt="image-20220420170349298" tabindex="0" loading="lazy"><figcaption>image-20220420170349298</figcaption></figure><p>至此，有关工作队列模式就讲到这里。</p><h3 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h3><p>前面我们已经了解了RabbitMQ客户端的一些基本操作，包括普通的消息模式，接着我们来了解一下其他的模式，首先是发布订阅模式，它支持多种方式：</p><figure><img src="https://s2.loli.net/2023/03/08/fetLjQszH7cTZmO.jpg" alt="image-20220420172252440" tabindex="0" loading="lazy"><figcaption>image-20220420172252440</figcaption></figure><p>比如我们在阿里云买了云服务器，但是最近快到期了，那么就会给你的手机、邮箱发送消息，告诉你需要去续费了，但是手机短信和邮件发送并不一定是同一个业务提供的，但是现在我们又希望能够都去执行，所以就可以用到发布订阅模式，简而言之就是，发布一次，消费多个。</p><p>实现这种模式其实也非常简单，但是如果使用我们之前的直连交换机，肯定是不行的，我们这里需要用到另一种类型的交换机，叫做<code>fanout</code>（扇出）类型，这时一种广播类型，消息会被广播到所有与此交换机绑定的消息队列中。</p><p>这里我们使用默认的交换机：</p><figure><img src="https://s2.loli.net/2023/03/08/Er7RBCjm3nNJZHT.jpg" alt="image-20220420225300171" tabindex="0" loading="lazy"><figcaption>image-20220420225300171</figcaption></figure><p>这个交换机是一个<code>fanout</code>类型的交换机，我们就是要它就行了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;fanoutExchange&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token comment">//注意这里是fanoutExchange</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;fanoutExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;yyds1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;fanoutExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;yyds2&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将两个队列都绑定到此交换机上，我们先启动看看效果：</p><figure><img src="https://s2.loli.net/2023/03/08/pFXEmbv7LCMKxwq.jpg" alt="image-20220420230954785" tabindex="0" loading="lazy"><figcaption>image-20220420230954785</figcaption></figure><p>绑定没有什么问题，接着我们搞两个监听器，监听一下这两个队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;yyds2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver2</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二号消息队列监听器 &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们通过交换机发送消息，看看是不是两个监听器都会接收到消息：</p><figure><img src="https://s2.loli.net/2023/03/08/k7V1xXyGTPKO6eb.jpg" alt="image-20220420231113658" tabindex="0" loading="lazy"><figcaption>image-20220420231113658</figcaption></figure><p>可以看到确实是两个消息队列都能够接受到此消息：</p><figure><img src="https://s2.loli.net/2023/03/08/vhwydqXr9Ue61t4.jpg" alt="image-20220420231145578" tabindex="0" loading="lazy"><figcaption>image-20220420231145578</figcaption></figure><p>这样我们就实现了发布订阅模式。</p><h3 id="路由模式" tabindex="-1"><a class="header-anchor" href="#路由模式" aria-hidden="true">#</a> 路由模式</h3><p>路由模式实际上我们一开始就已经实现了，我们可以在绑定时指定想要的<code>routingKey</code>只有生产者发送时指定了对应的<code>routingKey</code>才能到达对应的队列。</p><figure><img src="https://s2.loli.net/2023/03/08/52vs9bualApXGMR.jpg" alt="image-20220420232826848" tabindex="0" loading="lazy"><figcaption>image-20220420232826848</figcaption></figure><p>当然除了我们之前的一次绑定之外，同一个消息队列可以多次绑定到交换机，并且使用不同的<code>routingKey</code>，这样只要满足其中一个都可以被发送到此消息队列中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//使用yyds1绑定</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;yyds1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding2&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//使用yyds2绑定</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;directExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;yyds2&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后我们可以看到管理面板中出现了两个绑定关系：</p><figure><img src="https://s2.loli.net/2023/03/08/n9NxMEsoCeWSaVL.jpg" alt="image-20220420233606749" tabindex="0" loading="lazy"><figcaption>image-20220420233606749</figcaption></figure><p>这里可以测试一下，随便使用哪个<code>routingKey</code>都可以。</p><h3 id="主题模式" tabindex="-1"><a class="header-anchor" href="#主题模式" aria-hidden="true">#</a> 主题模式</h3><p>实际上这种模式就是一种模糊匹配的模式，我们可以将<code>routingKey</code>以模糊匹配的方式去进行转发。</p><figure><img src="https://s2.loli.net/2023/03/08/z45gI7UaKmCipEL.jpg" alt="image-20220420233721239" tabindex="0" loading="lazy"><figcaption>image-20220420233721239</figcaption></figure><p>我们可以使用<code>*</code>或<code>#</code>来表示：</p><ul><li>* - 表示任意的一个单词</li><li># - 表示0个或多个单词</li></ul><p>这里我们来测试一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;topicExchange&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//这里使用预置的Topic类型交换机</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;topicExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.test.*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目，可以看到只要是满足通配符条件的都可以成功转发到对应的消息队列：</p><figure><img src="https://s2.loli.net/2023/03/08/aS37QitoUdf4FZ9.jpg" alt="image-20220421103753962" tabindex="0" loading="lazy"><figcaption>image-20220421103753962</figcaption></figure><p>接着我们可以再试试看<code>#</code>通配符。</p><p>除了我们这里使用的默认主题交换机之外，还有一个叫做<code>amq.rabbitmq.trace</code>的交换机：</p><figure><img src="https://s2.loli.net/2023/03/08/CWfRIwoYLjQrbpH.jpg" alt="image-20220421104035463" tabindex="0" loading="lazy"><figcaption>image-20220421104035463</figcaption></figure><p>可以看到它也是<code>topic</code>类型的，那么这个交换机是做什么的呢？实际上这是用于帮助我们记录和追踪生产者和消费者使用消息队列的交换机，它是一个内部的交换机，那么如果使用呢？首先创建一个消息队列用于接收记录：</p><figure><img src="https://s2.loli.net/2023/03/08/s7B38pjkd4EGFLI.jpg" alt="image-20220421104619325" tabindex="0" loading="lazy"><figcaption>image-20220421104619325</figcaption></figure><p>接着我们需要在控制台将虚拟主机<code>/test</code>的追踪功能开启：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl trace_on <span class="token parameter variable">-p</span> /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启后，我们将此队列绑定到上面的交换机上：</p><figure><img src="https://s2.loli.net/2023/03/08/VsD2dYIpHhbt6R9.jpg" alt="image-20220421104843224" tabindex="0" loading="lazy"><figcaption>image-20220421104843224</figcaption></figure><figure><img src="https://s2.loli.net/2023/03/08/EM4WKHqtyz3vLSk.jpg" alt="image-20220421105141144" tabindex="0" loading="lazy"><figcaption>image-20220421105141144</figcaption></figure><p>由于发送到此交换机上的<code>routingKey</code>为routing key为 publish.交换机名称 和 deliver.队列名称，分别对应生产者投递到交换机的消息，和消费者从队列上获取的消息，因此这里使用<code>#</code>通配符进行绑定。</p><p>现在我们来测试一下，比如还是往yyds队列发送消息：</p><figure><img src="https://s2.loli.net/2023/03/08/vHKPqJFahV8y7l3.jpg" alt="image-20220421105242770" tabindex="0" loading="lazy"><figcaption>image-20220421105242770</figcaption></figure><p>可以看到在发送消息，并且消费者已经处理之后，<code>trace</code>队列中新增了两条消息，那么我们来看看都是些什么消息：</p><figure><img src="https://s2.loli.net/2023/03/08/vHKPqJFahV8y7l3.jpg" alt="image-20220421105528532" tabindex="0" loading="lazy"><figcaption>image-20220421105528532</figcaption></figure><p>通过追踪，我们可以很明确地得知消息发送的交换机、routingKey、用户等信息，包括信息本身，同样的，消费者在取出数据时也有记录：</p><figure><img src="https://s2.loli.net/2023/03/08/NApBodythmfjzMV.jpg" alt="image-20220421105638715" tabindex="0" loading="lazy"><figcaption>image-20220421105638715</figcaption></figure><p>我们可以明确消费者的地址、端口、具体操作的队列以及取出的消息信息等。</p><p>到这里，我们就已经了解了3种类型的交换机。</p><h3 id="第四种交换机类型" tabindex="-1"><a class="header-anchor" href="#第四种交换机类型" aria-hidden="true">#</a> 第四种交换机类型</h3><p>通过前面的学习，我们已经介绍了三种交换机类型，现在我们来介绍一下第四种交换机类型<code>header</code>，它是根据头部信息来决定的，在我们发送的消息中是可以携带一些头部信息的（类似于HTTP），我们可以根据这些头部信息来决定路由到哪一个消息队列中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;headerExchange&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//注意这里返回的是HeadersExchange</span>
    <span class="token keyword">public</span> <span class="token class-name">HeadersExchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span>
                <span class="token punctuation">.</span><span class="token function">headersExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.headers&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//RabbitMQ为我们预置了两个，这里用第一个就行</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;headerExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">HeadersExchange</span> exchange<span class="token punctuation">,</span>  <span class="token comment">//这里和上面一样的类型</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>   <span class="token comment">//使用HeadersExchange的to方法，可以进行进一步配置</span>
          			<span class="token comment">//.whereAny(&quot;a&quot;, &quot;b&quot;).exist();   这个是只要存在任意一个指定的头部Key就行</span>
                <span class="token comment">//.whereAll(&quot;a&quot;, &quot;b&quot;).exist();   这个是必须存在所有指定的的头部Key</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//比如我们现在需要消息的头部信息中包含test，并且值为hello才能转发给我们的消息队列</span>
      					<span class="token comment">//.whereAny(Collections.singletonMap(&quot;test&quot;, &quot;hello&quot;)).match();  传入Map也行，批量指定键值对</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来启动一下试试看：</p><figure><img src="https://s2.loli.net/2023/03/08/NApBodythmfjzMV.jpg" alt="image-20220421110926077" tabindex="0" loading="lazy"><figcaption>image-20220421110926077</figcaption></figure><p>结果发现，消息可以成功发送到消息队列，这就是使用头部信息进行路由。</p><p>这样，我们就介绍完了所有四种类型的交换机。</p><h3 id="集群搭建" tabindex="-1"><a class="header-anchor" href="#集群搭建" aria-hidden="true">#</a> 集群搭建</h3><p>前面我们对于RabbitMQ的相关内容已经基本讲解完毕了，最后我们来尝试搭建一个集群，让RabbitMQ之间进行数据复制（镜像模式）稍微有点麻烦，跟着视频走吧。</p><p>可能会用到的一些命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl stop_app
<span class="token function">sudo</span> rabbitmqctl join_cluster rabbit@ubuntu-server
<span class="token function">sudo</span> rabbitmqctl start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现复制即可。</p><hr><h2 id="springcloud-消息组件" tabindex="-1"><a class="header-anchor" href="#springcloud-消息组件" aria-hidden="true">#</a> SpringCloud 消息组件</h2><p>前面我们已经学习了如何使用RabbitMQ消息队列，接着我们来简单介绍一下SpringCloud为我们提供的一些消息组件。</p><h3 id="springcloud-stream" tabindex="-1"><a class="header-anchor" href="#springcloud-stream" aria-hidden="true">#</a> SpringCloud Stream</h3>`,140),C={href:"https://docs.spring.io/spring-cloud-stream/docs/3.2.2/reference/html/",target:"_blank",rel:"noopener noreferrer"},B=e(`<p>前面我们介绍了RabbitMQ，了解了消息队列相关的一些操作，但是可能我们会遇到不同的系统在用不同的消息队列，比如系统A用的Kafka、系统B用的RabbitMQ，但是我们现在又没有学习过Kafka，那么怎么办呢？有没有一种方式像JDBC一样，我们只需要关心SQL和业务本身，而不用关心数据库的具体实现呢？</p><p>SpringCloud Stream能够做到，它能够屏蔽底层实现，我们使用统一的消息队列操作方式就能操作多种不同类型的消息队列。</p><figure><img src="https://s2.loli.net/2023/03/08/VWvry9TSDBinatH.jpg" alt="image-20220421225215709" tabindex="0" loading="lazy"><figcaption>image-20220421225215709</figcaption></figure><p>它屏蔽了RabbitMQ底层操作，让我们使用统一的Input和Output形式，以Binder为中间件，这样就算我们切换了不同的消息队列，也无需修改代码，而具体某种消息队列的底层实现是交给Stream在做的。</p><p>这里我们创建一个新的项目来测试一下：</p><figure><img src="https://s2.loli.net/2023/03/08/pJefuIUXzNHhsxP.jpg" alt="image-20220421215534386" tabindex="0" loading="lazy"><figcaption>image-20220421215534386</figcaption></figure><p>依赖如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2021.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--  RabbitMQ的Stream实现  --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们来编写一下生产者，首先是配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
      <span class="token key atrule">binders</span><span class="token punctuation">:</span>   <span class="token comment">#此处配置要绑定的rabbitmq的服务信息</span>
        <span class="token key atrule">local-server</span><span class="token punctuation">:</span> <span class="token comment">#绑定名称，随便起一个就行</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment">#消息组件类型，这里使用的是RabbitMQ，就填写rabbit</span>
          <span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token comment">#服务器相关信息，按照下面的方式填写就行，爆红别管</span>
            <span class="token key atrule">spring</span><span class="token punctuation">:</span>
              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
                <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.0.6
                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
                <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
                <span class="token key atrule">password</span><span class="token punctuation">:</span> admin
                <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /test
       <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
        <span class="token key atrule">test-out-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> test.exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来编写一个Controller，一会访问一次这个接口，就向消息队列发送一个数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublishController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">StreamBridge</span> bridge<span class="token punctuation">;</span>  <span class="token comment">//通过bridge来发送消息</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/publish&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//第一个参数其实就是RabbitMQ的交换机名称（数据会发送给这个交换机，到达哪个消息队列，不由我们决定）</span>
      	<span class="token comment">//这个交换机的命名稍微有一些规则:</span>
      	<span class="token comment">//输入:    &lt;名称&gt; + -in- + &lt;index&gt;</span>
      	<span class="token comment">//输出:    &lt;名称&gt; + -out- + &lt;index&gt;</span>
      	<span class="token comment">//这里我们使用输出的方式，来将数据发送到消息队列，注意这里的名称会和之后的消费者Bean名称进行对应</span>
        bridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;test-out-0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;HelloWorld!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;消息发送成功！&quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来将生产者启动一下，访问一下接口：</p><figure><img src="https://s2.loli.net/2023/03/08/pvc8udVL9EwMW56.jpg" alt="image-20220421220955906" tabindex="0" loading="lazy"><figcaption>image-20220421220955906</figcaption></figure><p>可以看到消息成功发送，我们来看看RabbitMQ这边的情况：</p><figure><img src="https://s2.loli.net/2023/03/08/1fBHoQe6gc7XizO.jpg" alt="image-20220421221027145" tabindex="0" loading="lazy"><figcaption>image-20220421221027145</figcaption></figure><p>新增了一个<code>test-in-0</code>交换机，并且此交换机是topic类型的：</p><figure><img src="https://s2.loli.net/2023/03/08/mN4EfOehP8Ta2JC.jpg" alt="image-20220421221107547" tabindex="0" loading="lazy"><figcaption>image-20220421221107547</figcaption></figure><p>但是目前没有任何队列绑定到此交换机上，因此我们刚刚发送的消息实际上是没有给到任何队列的。</p><p>接着我们来编写一下消费者，消费者的编写方式比较特别，只需要定义一个Consumer就可以了，其他配置保持一致：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//注意这里需要填写我们前面交换机名称中&quot;名称&quot;，这样生产者发送的数据才会正确到达</span>
    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置中需要修改一下目标交换机：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">stream</span><span class="token punctuation">:</span>
    	<span class="token punctuation">...</span>
      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>
      	<span class="token comment">#因为消费者是输入，默认名称为 方法名-in-index，这里我们将其指定为我们刚刚定义的交换机</span>
        <span class="token key atrule">test-in-0</span><span class="token punctuation">:</span>
          <span class="token key atrule">destination</span><span class="token punctuation">:</span> test.exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们直接启动就可以了，可以看到启动之后，自动为我们创建了一个新的队列：</p><figure><img src="https://s2.loli.net/2023/03/08/kUelcRgb7MrGdB6.jpg" alt="image-20220421221733723" tabindex="0" loading="lazy"><figcaption>image-20220421221733723</figcaption></figure><p>而这个队列实际上就是我们消费者等待数据到达的队列：</p><figure><img src="https://s2.loli.net/2023/03/08/lzDjiI9SLH1rVY3.jpg" alt="image-20220421221807577" tabindex="0" loading="lazy"><figcaption>image-20220421221807577</figcaption></figure><p>可以看到当前队列直接绑定到了我们刚刚创建的交换机上，并且<code>routingKey</code>是直接写的<code>#</code>，也就是说一会消息会直接过来。</p><p>现在我们再来访问一些消息发送接口：</p><figure><img src="https://s2.loli.net/2023/03/08/cSPRdoY43gzVNXk.jpg" alt="image-20220421221938730" tabindex="0" loading="lazy"><figcaption>image-20220421221938730</figcaption></figure><figure><img src="https://s2.loli.net/2023/03/08/8TEv1KQGSNA9luY.jpg" alt="image-20220421221952663" tabindex="0" loading="lazy"><figcaption>image-20220421221952663</figcaption></figure><p>可以看到消费者成功地进行消费了：</p><figure><img src="https://s2.loli.net/2023/03/08/lICtpeK2oAGZynD.jpg" alt="image-20220421222011924" tabindex="0" loading="lazy"><figcaption>image-20220421222011924</figcaption></figure><p>这样，我们就通过使用SpringCloud Stream来屏蔽掉底层RabbitMQ来直接进行消息的操作了。</p><h3 id="springcloud-bus" tabindex="-1"><a class="header-anchor" href="#springcloud-bus" aria-hidden="true">#</a> SpringCloud Bus</h3>`,36),z={href:"https://cloud.spring.io/spring-cloud-bus/reference/html/",target:"_blank",rel:"noopener noreferrer"},R=e(`<p>实际上它就相当于是一个消息总线，可用于向各个服务广播某些状态的更改（比如云端配置更改，可以结合Config组件实现动态更新配置，当然我们前面学习的Nacos其实已经包含这个功能了）或其他管理指令。</p><p>这里我们也是简单使用一下吧，Bus需要基于一个具体的消息队列实现，比如RabbitMQ或是Kafka，这里我们依然使用RabbitMQ。</p><p>我们将最开始的微服务拆分项目继续使用，比如现在我们希望借阅服务的某个接口调用时，能够给用户服务和图书服务发送一个通知，首先是依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们只需要在配置文件中将RabbitMQ的相关信息配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.0.6
    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /test
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>    <span class="token comment">#暴露端点，一会用于提醒刷新</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动我们的三个服务器，可以看到在管理面板中：</p><figure><img src="https://s2.loli.net/2023/03/08/UfTVhAiOnMqoPX7.jpg" alt="image-20220421232118952" tabindex="0" loading="lazy"><figcaption>image-20220421232118952</figcaption></figure><p>新增了springCloudBug这样一个交换机，并且：</p><figure><img src="https://s2.loli.net/2023/03/08/2VdCOuPLAb9Qhfx.jpg" alt="image-20220421232146646" tabindex="0" loading="lazy"><figcaption>image-20220421232146646</figcaption></figure><p>自动生成了各自的消息队列，这样就可以监听并接收到消息了。</p><p>现在我们访问一个端口：</p><figure><img src="https://s2.loli.net/2023/03/08/H3szAX82xhpWw6j.jpg" alt="image-20220421233200950" tabindex="0" loading="lazy"><figcaption>image-20220421233200950</figcaption></figure><p>此端口是用于通知别人进行刷新，可以看到调用之后，消息队列中成功出现了一次消费：</p><figure><img src="https://s2.loli.net/2023/03/08/LoviBfecC1DbMOg.jpg" alt="image-20220421233302328" tabindex="0" loading="lazy"><figcaption>image-20220421233302328</figcaption></figure><p>现在我们结合之前使用的Config配置中心，来看看是不是可以做到通知之后所有的配置动态刷新了。</p>`,16);function E(S,M){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("**官方网站：**"),s("a",d,[n("https://www.rabbitmq.com"),t(a)])]),s("blockquote",null,[s("p",null,[n("RabbitMQ拥有数万计的用户，是最受欢迎的开源消息队列之一，从"),s("a",r,[n("T-Mobile"),t(a)]),n("到"),s("a",k,[n("Runtastic"),t(a)]),n("，RabbitMQ在全球范围内用于小型初创企业和大型企业。")]),g,s("p",null,[n("RabbitMQ在许多操作系统和云环境中运行，并为"),s("a",m,[n("大多数流行语言"),t(a)]),n("提供了"),s("a",v,[n("广泛的开发者工具"),t(a)]),n("。")])]),b,f,s("p",null,[n("**下载地址：**"),s("a",y,[n("https://www.rabbitmq.com/download.html"),t(a)])]),h,s("p",null,[n("官方文档："),s("a",q,[n("https://docs.spring.io/spring-amqp/docs/current/reference/html/"),t(a)])]),x,s("p",null,[n("!"),w,n("]("),s("a",j,[n("https://tva1.sinaimg.cn/large/e6c9d24ely1h1byhcakabj221m0lwac0.jpg"),t(a)]),n(")")]),Q,s("p",null,[n("**官方文档：**"),s("a",C,[n("https://docs.spring.io/spring-cloud-stream/docs/3.2.2/reference/html/"),t(a)])]),B,s("p",null,[n("**官方文档：**"),s("a",z,[n("https://cloud.spring.io/spring-cloud-bus/reference/html/"),t(a)])]),R])}const T=p(l,[["render",E],["__file","3.html.vue"]]);export{T as default};
