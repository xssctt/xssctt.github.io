import{_ as e,F as o,V as c,W as l,X as n,Y as s,Z as t,$ as p}from"./framework-56e099cb.js";const u="/assets/icon/v2-04ce7f0ce0d3de2bc76297083e1b274e_720w.png",i="/assets/icon/v2-dc89a455df4ce2475303b636a6aab0f2_720w.png",r="/assets/icon/v2-6f4603629278bcce00dd4d7b19be808a_720w.png",k="/assets/icon/ad.png",d={},m=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言：")],-1),v=n("hr",null,null,-1),g=n("strong",null,"调用构造方法",-1),b={href:"https://www.cnblogs.com/salt-baked-universe/articles/17330628.html",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"实现了SQL查询条件构造",-1),q=p(`<h2 id="一个流程看懂" tabindex="-1"><a class="header-anchor" href="#一个流程看懂" aria-hidden="true">#</a> 一个流程看懂</h2><p><strong>创建</strong>一个LambdaQueryWrapper对象 -&gt; 使用Lambda表达式或方法引用<strong>构造</strong>查询条件 -&gt; <strong>调用</strong>MyBatis-Plus提供的方法获取查询结果。</p><figure><img src="https://raw.githubusercontent.com/xssctt/typora_image/main/img/202311061003373.jpg" alt="盐焗小宇宙" tabindex="0" loading="lazy"><figcaption>盐焗小宇宙</figcaption></figure><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><p>首先，我们定义了一个<code>UserDao</code>接口集成自<code>BaseMapper&lt;User&gt;</code>，它提供了许多基础的CRUD方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，定义了一个示例Service类<code>UserService</code>，它使用了<code>@Autowired</code>注解注入了<code>UserDao</code>对象，用于操作数据库。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">listUsersByGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getGender</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token doc-comment comment">/**
          *LambdaQueryWrapper常用方法
          */</span>
         wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;条件值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于where条件</span>
         wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;区间一&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;区间二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于范围内使用的between</span>
         wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;模糊查询的字符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//模糊查询like</span>
         wrapper<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于group by分组</span>
         wrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;包括的值,分割&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于in</span>
         wrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//升序</span>
         wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//降序</span>
         wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;要比较的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大于等于</span>
         wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">&quot;实体类::查询字段&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;要比较的值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小于等于</span>
        
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码展示了通过LambdaQueryWrapper进行查询的基本步骤。</p><ol><li><p>首先，我们定义了一个<code>UserDao</code>接口集成自<code>BaseMapper&lt;User&gt;</code>，它提供了许多基础的CRUD方法。</p><blockquote><p>CRUD方法：指封装了数据库语句的增删改查方法。</p></blockquote></li><li><p>然后定义了一个示例Service类<code>UserService</code>，它使用了<code>@Autowired</code>注解注入了<code>UserDao</code>对象，用于操作数据库。</p></li><li><p>在<code>UserService</code>类的<code>listUsersByGender</code>方法中，我们首先创建了一个<code>LambdaQueryWrapper&lt;User&gt;</code>对象，它用于构造查询条件。</p></li><li><p>然后，我们使用<code>eq</code>方法添加查询条件，该方法使用Lambda表达式指定了查询对象的属性以及需要查询的值。接下来，我们使用<code>orderByDesc</code>方法通过Lambda表达式指定了查询结果的排序方式。最后，我们使用<code>selectList</code>方法获取符合条件的查询结果。</p></li><li><p>在实际使用中，我们可以根据需要在LambdaQueryWrapper对象中使用更多的方法来构建查询条件。在Lambda表达式中，我们可以通过<code>::</code>符号指定查询对象的属性。orderby、select等方法可用于指定查询结果的排序方式和返回的列等。</p></li><li><p>需要注意的是，为了确保MySQL和Java类的字段名称一致，我们需要在MySQL中将列名和Java Bean属性名定义一致。这样，在查询数据时，MyBatis-Plus就会自动映射数据库表和Java Bean对象的属性，使我们能够更方便地进行数据操作。</p></li></ol><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><p>**Q1：**LambdaQueryWrapper返回的查询结果是什么类型？</p><p>**A1：**LambdaQueryWrapper返回的查询结果通常是由 MyBatis-Plus 提供的IBaseMapper中的方法返回的类型。（IBaseMapper是一个基础的Mapper接口， 提供了很多基础的CRUD操作，如insert、update、delete、select等。）查询结果的类型通常是一个Java Bean对象或一组Java Bean对象的集合，它们由IBaseMapper中的方法返回并由MyBatis进行映射。 例如，当使用selectList方法查询时，返回的是一个泛型为Java Bean的List集合；当使用selectOne查询时，返回一个Java Bean对象。</p><p>**Q2：**LambdaQueryWrapper和QueryWrapper有什么主要区别？</p><p><strong>A2：</strong></p><ul><li>LambdaQueryWrapper和QueryWrapper都是MyBatis-Plus框架中提供的查询条件构造器，它们的主要区别在于：使用Lambda表达式和方法引用构造查询条件、类型安全（有编译时校验）和代码简洁方便。</li><li>具体来说，LambdaQueryWrapper支持使用Lambda表达式和方法引用构建查询条件，它需要使用IDEA等编辑工具来支持Lambda表达式，需要jdk1.8及以上的版本支持。 而QueryWrapper则使用拼接字符串的方式来构造查询条件，它的使用方法与JdbcTemplate等框架非常相似。</li><li>在使用LambdaQueryWrapper时，代码更加类型安全，因为使用了Lambda表达式的编译时校验，可以避免一些由于类型不匹配或写错列名等问题导致的运行时异常。此外，使用LambdaQueryWrapper时，代码更加简洁和易读，可以大大提高开发效率。</li><li>总的来说，如果你是使用jdk1.8及以上版本和IDEA等编辑工具进行开发，推荐使用LambdaQueryWrapper，否则使用QueryWrapper。但需要注意的是，如果你需要用到某些QueryWrapper特有的方法，建议还是使用QueryWrapper。</li></ul><hr><hr><p>好处：<strong>单表查询</strong>的话，可以直接的使用对象操作，其实实现起来极其方便而且简单！</p><p>如果<strong>多表的查询</strong>的话，那就建议使用xml格式的配置化进行关联，文章末尾也进行了案例讲解参考学习！</p>`,20),y={href:"https://link.zhihu.com/?target=https%3A//so.csdn.net/so/search%3Fq%3D%E9%87%8D%E5%86%99%26spm%3D1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"LambdaQueryWrapper&QueryWrapper",-1),h=p(`<p>简单对象查询方式用起来极为方便！涉及到单表查询的是该该对象查询继承；</p><p>推荐使用：<strong>LambdaQueryWrapper</strong></p><p>查询使用案例增删改查总结如下</p><h2 id="_1、【大小比较-】" tabindex="-1"><a class="header-anchor" href="#_1、【大小比较-】" aria-hidden="true">#</a> 1、【大小比较： ( =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;= )】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 =，例: eq(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name = &#39;媳妇&#39;</span>
<span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 &lt;&gt;，例: ne(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name &lt;&gt; &#39;媳妇&#39;</span>
<span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 &gt;，例: gt(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name &gt; &#39;媳妇&#39;</span>
<span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 &gt;=，例: ge(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name &gt;= &#39;媳妇&#39;</span>
<span class="token function">lt</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 &lt;，例: lt(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name &lt; &#39;媳妇&#39; le(R column, Object val); // 等价于 &lt;=，例: le(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name &lt;= &#39;媳妇&#39;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面直接对象的名称，以及入参即可，比如下面java代码实现列表查询</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DimDict</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByDictCode</span><span class="token punctuation">(</span><span class="token class-name">DictCodeEnum</span> dictCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DimDict</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DimDict</span><span class="token operator">::</span><span class="token function">getDictCode</span><span class="token punctuation">,</span> dictCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DimDict</span><span class="token operator">::</span><span class="token function">getEnabled</span><span class="token punctuation">,</span> <span class="token class-name">DictEnableEnum</span><span class="token punctuation">.</span><span class="token constant">VALID</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、【范围-between、not-between、in、not-in-】" tabindex="-1"><a class="header-anchor" href="#_2、【范围-between、not-between、in、not-in-】" aria-hidden="true">#</a> 2、【范围：（between、not between、in、not in）】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 between a and b, 例： between(&quot;age&quot;, 18, 30) ---&gt; age between 18 and 30</span>
<span class="token function">notBetween</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 not between a and b, 例： notBetween(&quot;age&quot;, 18, 30) ---&gt; age not between 18 and 30</span>
<span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 字段 IN (v0, v1, ...),例: in(&quot;age&quot;,{1,2,3}) ---&gt; age in (1,2,3)</span>
<span class="token function">notIn</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 字段 NOT IN (v0, v1, ...), 例: notIn(&quot;age&quot;,{1,2,3}) ---&gt; age not in (1,2,3)</span>
<span class="token function">inSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 字段 IN (sql 语句), 例: inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;) ---&gt; id in (select id from table where id &lt; 3) notInSql(R column, Object... values); // 等价于 字段 NOT IN (sql 语句)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要实现的java代码如下，实现查询一个页面。里面会带有分页且根据时间排序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TbmNewsDupFilter</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInfoListByNewsId</span><span class="token punctuation">(</span><span class="token class-name">String</span> newsId<span class="token punctuation">,</span> <span class="token class-name">Byte</span> position<span class="token punctuation">,</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">,</span> <span class="token class-name">Date</span> endTime<span class="token punctuation">,</span> <span class="token class-name">Integer</span> current<span class="token punctuation">,</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TbmNewsDupFilter</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TbmNewsDupFilter</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsDupFilter</span><span class="token operator">::</span><span class="token function">getNewsId</span><span class="token punctuation">,</span> newsId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsDupFilter</span><span class="token operator">::</span><span class="token function">getPosition</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsDupFilter</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsDupFilter</span><span class="token operator">::</span><span class="token function">getPosition</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>

        lqw<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsDupFilter</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> tbmNewsDupFilterMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、【模糊匹配-like-】" tabindex="-1"><a class="header-anchor" href="#_3、【模糊匹配-like-】" aria-hidden="true">#</a> 3、【模糊匹配：（like）】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 LIKE &#39;%值%&#39;，例: like(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name like &#39;%媳妇%&#39;</span>
<span class="token function">notLike</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 NOT LIKE &#39;%值%&#39;，例: notLike(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name not like &#39;%媳妇%&#39;</span>
<span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 LIKE &#39;%值&#39;，例: likeLeft(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name like &#39;%媳妇&#39; likeRight(R column, Object val); // 等价于 LIKE &#39;值%&#39;，例: likeRight(&quot;name&quot;, &quot;媳妇&quot;) ---&gt; name like &#39;媳妇%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java代码查询右边末尾模糊查询，前端字符串匹配代码实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagWeight</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token class-name">TagWeight</span><span class="token operator">::</span><span class="token function">getTagType</span><span class="token punctuation">,</span> <span class="token string">&quot;101109&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TagWeight</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> tagWeightService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">return</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">TagWeight</span><span class="token operator">::</span><span class="token function">getTagType</span><span class="token punctuation">,</span> <span class="token class-name">TagWeight</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、【空值比较-isnull、isnotnull-】" tabindex="-1"><a class="header-anchor" href="#_4、【空值比较-isnull、isnotnull-】" aria-hidden="true">#</a> 4、【空值比较：（isNull、isNotNull）】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 IS NULL，例: isNull(&quot;name&quot;) ---&gt; name is null isNotNull(R column); // 等价于 IS NOT NULL，例: isNotNull(&quot;name&quot;) ---&gt; name is not null</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java代码使用的案例实现的代码如下可以一共参考，isnotNUll使用上比较多的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HwSecuritiesInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHwSecuritiesInfoList</span><span class="token punctuation">(</span><span class="token class-name">Long</span> jsid<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>

​        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HwSecuritiesInfo</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

​        lambda<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getCompanyCode</span><span class="token punctuation">)</span>

​                <span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getSecuritiesSection</span><span class="token punctuation">,</span> <span class="token constant">EXCLUDE_SEUCRITIES_SECTION</span><span class="token punctuation">)</span>

​                <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getJsid</span><span class="token punctuation">,</span> jsid<span class="token punctuation">)</span>

​                <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getJsid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

​        lambda<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit &quot;</span> <span class="token operator">+</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

​        <span class="token keyword">return</span> hwSecuritiesInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、【分组、排序-group、having、order-】" tabindex="-1"><a class="header-anchor" href="#_5、【分组、排序-group、having、order-】" aria-hidden="true">#</a> 5、【分组、排序：（group、having、order）】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 GROUP BY 字段, ...， 例: groupBy(&quot;id&quot;, &quot;name&quot;) ---&gt; group by id,name</span>
<span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 ORDER BY 字段, ... ASC， 例: orderByAsc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id ASC,name ASC</span>
<span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 ORDER BY 字段, ... DESC， 例: orderByDesc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id DESC,name DESC having(String sqlHaving, Object... params); // 等价于 HAVING ( sql语句 )， 例: having(&quot;sum(age) &gt; {0}&quot;, 11) ---&gt; having sum(age) &gt; 11</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现的java代码参考如下通过分组来查询分页的使用代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceType</span><span class="token punctuation">.</span><span class="token constant">HW_BUSINESS</span><span class="token punctuation">)</span>

    <span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ds</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectDistinctDsByPage</span><span class="token punctuation">(</span><span class="token class-name">DsQueryForm</span> queryForm<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Integer</span> currentPage <span class="token operator">=</span> queryForm<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Integer</span> pageSize <span class="token operator">=</span> queryForm<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ds</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ds</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//数据源编码， 媒体栏目， 信息来源参数只传了一个</span>

        <span class="token class-name">String</span> dsCode <span class="token operator">=</span> queryForm<span class="token punctuation">.</span><span class="token function">getDsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> dsSourceName <span class="token operator">=</span> queryForm<span class="token punctuation">.</span><span class="token function">getDsSourceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> dsNewsColumns <span class="token operator">=</span> queryForm<span class="token punctuation">.</span><span class="token function">getDsNewsColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dsCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            lqw<span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsCode</span><span class="token punctuation">,</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeLike</span><span class="token punctuation">(</span>dsCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            lqw<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsCode</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token string">&quot;count (0) &gt;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dsSourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            lqw<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsSourceName</span><span class="token punctuation">,</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeLike</span><span class="token punctuation">(</span>dsSourceName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            lqw<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsSourceName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dsNewsColumns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            lqw<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsNewsColumns</span><span class="token punctuation">,</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeLike</span><span class="token punctuation">(</span>dsNewsColumns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            lqw<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsNewsColumns</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lqw<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">Ds</span><span class="token operator">::</span><span class="token function">getDsCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> dsMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、【拼接、嵌套-sql-or、and、nested、apply-】" tabindex="-1"><a class="header-anchor" href="#_6、【拼接、嵌套-sql-or、and、nested、apply-】" aria-hidden="true">#</a> 6、【拼接、嵌套 sql：（or、and、nested、apply）】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 a or b， 例：eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;媳妇&quot;) ---&gt; id = 1 or name = &#39;媳妇&#39;</span>
<span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 or(a or/and b)，or 嵌套。例: or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</span>
<span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 and(a or/and b)，and 嵌套。例: and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</span>
<span class="token function">nested</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 (a or/and b)，普通嵌套。例: nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;)) ---&gt; (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</span>
<span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> applySql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = {0}&quot;, &quot;2008-08-08&quot;) ---&gt; date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</span>
<span class="token function">last</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastSql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span>
<span class="token function">exists</span><span class="token punctuation">(</span><span class="token class-name">String</span> existsSql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接 exists 语句。例: exists(&quot;select id from table where age = 1&quot;) ---&gt; exists (select id from table where age = 1) 使用案例java实现的代码逻辑last案例</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">calculateFileRealMd5</span><span class="token punctuation">(</span><span class="token class-name">Long</span> minId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnncFile</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AnncFile</span><span class="token operator">::</span><span class="token function">getUploadStatus</span><span class="token punctuation">,</span> <span class="token class-name">UploadStatusEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">AnncFile</span><span class="token operator">::</span><span class="token function">getRealFileMd5</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">AnncFile</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> minId<span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">AnncFile</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit &quot;</span> <span class="token operator">+</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnncFile</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> anncFileService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、【querywrapper-条件-】" tabindex="-1"><a class="header-anchor" href="#_7、【querywrapper-条件-】" aria-hidden="true">#</a> 7、【QueryWrapper 条件：】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> sqlSelect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于定义需要返回的字段。例： select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;) ---&gt; select id, name, age</span>
<span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableFieldInfo</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Lambda](https://link.zhihu.com/?target=https%3A//so.csdn.net/so/search%3Fq%3DLambda%26spm%3D1001.2101.3001.7020) 表达式，过滤需要的字段。</span>
<span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个 LambdaQueryWrapper 实际使用的select语句java代码实现案例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HwSecuritiesInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryParam</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HwSecuritiesInfo</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> param<span class="token punctuation">.</span><span class="token function">getJsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getBusinessId</span><span class="token punctuation">,</span> <span class="token class-name">HwSecuritiesInfo</span><span class="token operator">::</span><span class="token function">getCompanyCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        wrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit &quot;</span> <span class="token operator">+</span> param<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> hwSecuritiesInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、【updatewrapper-条件-】" tabindex="-1"><a class="header-anchor" href="#_8、【updatewrapper-条件-】" aria-hidden="true">#</a> 8、【UpdateWrapper 条件：】</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于设置 set 字段值。例: set(&quot;name&quot;, null) ---&gt; set name = null</span>
<span class="token function">etSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于设置 set 字段值。例: setSql(&quot;name = &#39;老公&#39;&quot;) ---&gt; set name = &#39;老公&#39; lambda(); // 返回一个 LambdaUpdateWrapper</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java代码使用案例如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GelonghuiNews</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectGelonghuiNews</span><span class="token punctuation">(</span><span class="token class-name">Long</span> lastId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GelonghuiNews</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> lastId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">GelonghuiNews</span><span class="token operator">::</span><span class="token function">getJsid</span><span class="token punctuation">,</span> lastId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GelonghuiNews</span><span class="token operator">::</span><span class="token function">getImageStatus</span><span class="token punctuation">,</span><span class="token class-name">OssImageStatus</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用功能简单地开发代码截图如下</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HwPicture</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_9、-lambdaquerywrapper使用其实更为方便" tabindex="-1"><a class="header-anchor" href="#_9、-lambdaquerywrapper使用其实更为方便" aria-hidden="true">#</a> 9、 LambdaQueryWrapper使用其实更为方便；</h2><p>因为很多个性化的功能呢都在这里面使用的，所以目前开发组建议使用这个；</p><p>java使用案例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TbmNewsPopularFeelings</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectNewsPopularFeelings</span><span class="token punctuation">(</span><span class="token class-name">Date</span> startTime<span class="token punctuation">,</span> <span class="token class-name">Date</span> endTime<span class="token punctuation">,</span> <span class="token class-name">Integer</span> limitSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TbmNewsPopularFeelings</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">TbmNewsPopularFeelings</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>endTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">TbmNewsPopularFeelings</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">TbmNewsPopularFeelings</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit &quot;</span> <span class="token operator">+</span> limitSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> historyNewsEventMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_10-多表查询如何配置使用" tabindex="-1"><a class="header-anchor" href="#_10-多表查询如何配置使用" aria-hidden="true">#</a> 10，多表查询如何配置使用</h2><figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代码案例使用</p><h2 id="_11-pom依赖" tabindex="-1"><a class="header-anchor" href="#_11-pom依赖" aria-hidden="true">#</a> 11.pom依赖</h2><p>目前的Mybatis-Plus版本已经跟新到2.5.2【本篇博客更新2022-06-15】</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token punctuation">.</span>version<span class="token operator">&gt;</span><span class="token number">3.5</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token punctuation">.</span>version<span class="token operator">&gt;</span><span class="token number">3.5</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>extension<span class="token punctuation">.</span>version<span class="token operator">&gt;</span><span class="token number">3.5</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>extension<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token operator">&gt;</span><span class="token number">3.5</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前如果仅仅只是使用上面的功能的话，下面的俩个依赖已经完全满足需要了！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>

                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>

                <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>

                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>

                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>

                <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>

            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',51);function j(S,L){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,v,n("p",null,[s("通过"),g,s("返回一个LambdaQueryWrapper对象，在对象上使用"),n("a",b,[s("链式编程"),t(a)]),s(" 、Lambda表达式和链式调用的方式，灵活地"),f,s("和简化了SQL查询代码的编写。")]),q,n("p",null,[s("目前在重构一个项目的时候要针对原有的SQL进行"),n("a",y,[s("重写"),t(a)]),s("，所以针对一个好用的Mybatis的插件使用。在这里做一些总结，然后通过我们组内人员使用，统一的改用"),w]),h])}const I=e(d,[["render",j],["__file","4.html.vue"]]);export{I as default};
