import{_ as s,V as n,W as a,$ as t}from"./framework-56e099cb.js";const e={},p=t('<hr><hr><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 连接到本机的 MySQL，默认 <span class="token number">3306</span> 端口，回车后按提示输入密码，进入 MySQL 控制台\n<span class="token constant">C</span><span class="token operator">:</span>\\<span class="token operator">&gt;</span> mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 显示有哪些数据库\nmysql<span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>\n\n# 创建一个叫 test 的数据库\nmysql<span class="token operator">&gt;</span> create database test<span class="token punctuation">;</span>\n\n# 进入到 test 数据库中\nmysql<span class="token operator">&gt;</span> use test<span class="token punctuation">;</span>\n\n# 显示有哪些表\nmysql<span class="token operator">&gt;</span> show tables<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 创建一个 user 表\nmysql<span class="token operator">&gt;</span> create table <span class="token function">user</span> <span class="token punctuation">(</span>\n  id <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span><span class="token punctuation">,</span>\n  username <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  created_at <span class="token constant">DATETIME</span>\n<span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 查看 user 表的字段信息\nmysql<span class="token operator">&gt;</span> desc user<span class="token punctuation">;</span>\n\n# 查看 user 表的建表语句\nmysql<span class="token operator">&gt;</span> show create table user<span class="token punctuation">;</span>\n\n# 删除 user 表\nmysql<span class="token operator">&gt;</span> drop table user<span class="token punctuation">;</span>\n\n# 删除 test 数据库\nmysql<span class="token operator">&gt;</span> drop database test<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 退出 MySQL\nmysql<span class="token operator">&gt;</span> exit<span class="token punctuation">;</span>\n\n<span class="token constant">C</span><span class="token operator">:</span>\\<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MySQL` 中的数据类型，大致可分为三大类：`数值类型`、`日期时间类型` 、`字符类型\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先我们来看看 <code>MySQL</code> 中的数值类型</p><p>表示整数的数据类型有 <code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code></p><p>表示浮点的数据类型有 <code>FLOAT</code> 和 <code>DOUBLE</code> 。而 <code>DECIMAL</code> 数据类型用于在数据库中存储精确的小数值。<code>FLOAT</code>、<code>DOUBLE</code> 都存在精度问题，而 <code>DECIMAL</code> 则不存在精度问题，所以表示小数值我们都会使用 <code>DECIMAL</code></p><p>下面的表中是不同数值类型的取值范围及用来表示什么类型的整数：</p><table><thead><tr><th>类型</th><th>大小</th><th>范围(有符号)</th><th>范围(无符号)</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 Byte</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数</td></tr><tr><td>SMALLINT</td><td>2 Bytes</td><td>(-32 768, 32 767)</td><td>(0, 65 535)</td><td>大整数</td></tr><tr><td>MEDIUMINT</td><td>3 Bytes</td><td>(-8 388 608， 8 388 607)</td><td>(0， 16 777 215)</td><td>大整数</td></tr><tr><td>INT</td><td>4 Bytes</td><td>(-2 147 483 648， 2 147 483 647)</td><td>(0， 4 294 967 295)</td><td>大整数</td></tr><tr><td>BIGINT</td><td>8 Bytes</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数</td></tr><tr><td>FLOAT</td><td>4 Bytes</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度浮点数</td></tr><tr><td>DOUBLE</td><td>8 Bytes</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度浮点数</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><p>接下来，我们来看看日期时间类型</p><p>日期时间类型，我们用得最多的是 <code>DATETIME</code> 类型，他所表示的 &quot;年-月-日 时:分:秒&quot; 格式，既表示日期，又表示时间。如果，你只需要存储日期部分，你可以选择 <code>DATE</code> 类型， 只表示时间，你可以选择 <code>TIME</code> 类型。 详细的取值范围和用途请查看下表:</p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3 Bytes</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期</td></tr><tr><td>TIME</td><td>3 Bytes</td><td>&#39;-838:59:59&#39;/&#39;838:59:59&#39;</td><td>HH:MM:SS</td><td>时间</td></tr><tr><td>YEAR</td><td>1 Bytes</td><td>1901/2155</td><td>YYYY</td><td>年份</td></tr><tr><td>DATETIME</td><td>8 Bytes</td><td>&#39;1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59&#39;</td><td>YYYY-MM-DD hh:mm:ss</td><td>日期时间</td></tr><tr><td>TIMESTAMP</td><td>4 Bytes</td><td>&#39;1970-01-01 00:00:01&#39; UTC 到 &#39;2038-01-19 03:14:07&#39; UTC</td><td>YYYY-MM-DD hh:mm:ss</td><td>日期时间，时间戳</td></tr></tbody></table><p>接下来，我们来看看 <code>MySQL</code> 中的字符串</p><p>字符类型有 <code>char</code>、<code>varchar</code>、<code>text</code> 和 <code>blob</code> 四种</p><p><code>char</code> 和 <code>varchar</code> 从字面意思来理解，就是存储字符的数据类型，在使用的时候需要在类型的后面指定字符个数，<code>char(n)</code> 和 <code>varchar(n)</code> 括号中 <code>n</code> 代表字符的个数，不是代表字节个数，比如 <code>char(10)</code> 就可以存储 10 个字符</p><p><code>BLOB</code> 用来存储二进制数据。 <code>BLOB</code> 类型有 4 种，分别是：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code> 。它们区别在于可容纳存储的数据范围不同</p><p><code>TEXT</code> 类型，用来存储长文本，比如说要存储一篇文章就选择 <code>TEXT</code> 类型， <code>TEXT</code> 类型有 4 种， 分别是：<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 和 <code>LONGTEXT</code>。它们可存储的最大长度不同，可根据实际情况选择。具体参见下表：</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 Bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 Bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 Bytes</td><td>不超过255个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255 Bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535 Bytes</td><td>二进制长文本</td></tr><tr><td>TEXT</td><td>0-65535 Bytes</td><td>长文本</td></tr><tr><td>MEDIUMBLOB</td><td>0-16777215 Bytes</td><td>二进制中等长度文本</td></tr><tr><td>MEDIUMTEXT</td><td>0-16777215 Bytes</td><td>中等长度文本</td></tr><tr><td>LONGBLOB</td><td>0-4294967295 Bytes</td><td>二进制大文本</td></tr><tr><td>LONGTEXT</td><td>0-4294967295 Bytes</td><td>大文本</td></tr></tbody></table><p>在 <code>SQL</code> 入门中，我们已经学习过如何创建数据表，在这里，我们学习了 <code>MySQL</code> 中更多的数据类型，同学们要认真巩固这些知识点，在创建数据表的时候才能够准确熟练的选择相应的数据类型来设计数据表。</p><hr><hr><p>这一节，我们来练习在终端下操作 <code>MySQL</code> 的表结构，比如 <code>添加字段</code>、<code>删除字段</code>、<code>修改字段属性</code> 等操作</p><p>在进行表结构的操作前，我们先要了解几个关键字的使用。第一个关键字是 <code>UNSIGNED</code></p><p><code>UNSIGNED</code> 无符号的意思，通俗理解就是不表示负数只表示正数。比如说 <code>TINYINT</code> 类型，取值范围是 -128 ~ 127，如果设置为 <code>UNSIGNED</code> 取值范围则是 0 ~ 255；也就是说，一个数值字段被设置为无符号，则正数的表示范围就增大一倍</p><p>来看下面的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">--</span> 如果有 user 表 则删除 user 表\n<span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token operator">--</span> 创建 user 表\n<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span>\n<span class="token punctuation">)</span><span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">CHARSET</span><span class="token operator">=</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>\n\n<span class="token operator">--</span> 我们添加两条数据：\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;lily&#39;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">--</span> 执行一下查询语句：\n<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察一下这两条数据中 <code>age</code> 的值，你会发现，插入的 -300 实际存储的值是 -128 ，插入的 300 实际存储的值是 127 。也就是说，当插入的数值超过边界值的大小，默认就是边界值。这里的 <code>age</code> 字段是 <code>TINYINT</code> 类型，其表示的数据范围是 -128 ~ 127</p><p>我们来给 <code>age</code> 字段加上 <code>UNSIGNED</code> 属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token operator">--</span> 加上 <span class="token constant">UNSINGED</span> 属性\n<span class="token punctuation">)</span><span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">CHARSET</span><span class="token operator">=</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>\n\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;lily&#39;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是插入的-300 实际存储的值是 0，插入的 300 实际存储的值是 255</p><p>总结一下：<code>UNSIGNED</code> 表示无符号，即不表示负数，加上 <code>UNSIGNED</code> 属性的字段，正值的取值范围将会增大一倍。<code>UNSIGNED</code> 用来修饰数值类型的字段</p><p>下面，我们来学习 <code>AUTO_INCREMENT</code> 和 <code>PRIMARY KEY</code> 两个属性</p><p><code>PRIMARY KEY</code> 是将一个字段设置为主键。一个数据表只能有一个主键。字段设置为 <code>PRIMARY KEY</code> 后，其值不能重复</p><p><code>AUTO_INCREMENT</code> 自动增加的意思，一般用于主键或唯一索引，也就是用于值不重复的字段上。当每新增一条记录，该字段的值会自加1。一般用在整数类型上</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AUTO_INCREMENT` 必须配合 `PRIMARY KEY` 一起使用。设置 `PRIMARY KEY` 的字段，不一定需要 `AUTO_INCREMNT\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来看看下面的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">--</span> 创建user表：\n<span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token constant">INT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span><span class="token punctuation">,</span> <span class="token operator">--</span> 设置无符号、自增、主键\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token operator">--</span> 设为无符号\n<span class="token punctuation">)</span><span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">CHARSET</span><span class="token operator">=</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>\n\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;lily&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察表中的数据, 写入数据时，我们没有为 <code>id</code> 字段赋值，由于 <code>id</code> 字段设置的 <code>AUTO_INCREMENT</code> 属性，<code>MySQL</code> 会自动为该字段赋值，且是从当前表的最大 <code>id</code> 值自动加 1</p><p>下面我们来学习 <code>非空约束</code> 、 <code>默认值</code> 、 <code>注释</code>， 对应的属性是 <code>NOT NULL</code> 、 <code>DEFAULT</code> 、<code>COMMENT</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NOT NULL` 是用于创建表时为字段设置非空约束，即字段的值不能为 `NULL\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>DEFAULT</code> 用来设置默认值。当添加数据值，如果没有给设置默认值的字段赋值，则该条记录中该字段就使用默认值</p><p><code>COMMENT</code> 用来添加注释。注释就是说明一下字段存储的是什么数据或字段的中文意思，说明一下字段的不同的值代表着什么意思</p><p>一起来看看下面的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">--</span> 创建一个user表：\n<span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token constant">INT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;编号&quot;</span><span class="token punctuation">,</span> <span class="token operator">--</span> 使用 <span class="token constant">DOMMENT</span> 添加了注释\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token string">&quot;&quot;</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;用户名&quot;</span><span class="token punctuation">,</span> <span class="token operator">--</span> 设置了非空约束，并设置默认值为空字符串\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">0</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;年龄&quot;</span><span class="token punctuation">,</span> <span class="token operator">--</span> 设置了非空约束，并设置默认值为<span class="token number">0</span>\n	<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gender</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">1</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;性别 0-未知 1-男 2-女&quot;</span> <span class="token operator">--</span> 设置了非空约束，并设置默认值为<span class="token number">1</span>\n<span class="token punctuation">)</span><span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">CHARSET</span><span class="token operator">=</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>\n\n<span class="token constant">DESC</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;johnny&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入数据时，我们只给字段 <code>username</code> 赋值了，其它字段都没有赋值。 <code>id</code> 是自增字段，所以 <code>MySQL</code> 会自动给 <code>id</code> 进行自增赋值。<code>age、gender</code> 都设置了默认值，所以，插入数据时，没有给有默认值的字段赋值，字段的值就是默认值</p><p>接下来，我们开始操作数据表的表结构</p><p>我们使用 <code>ALTER TABLE</code> 关键字，配合 <code>ADD</code> 、<code>MODIFY</code> 、<code>CHANGE</code> 、 <code>DROP COLUMN</code> 来实现对数据表进行字段的 <code>添加</code>、<code>修改</code> 和 <code>删除</code></p><p><code>ALTER TABLE</code> 语句用来操作数据表的表结构</p><p><code>ADD</code> 给数据表添加新字段</p><p><code>MODIFY</code> 用于修改字段属性</p><p><code>CHANGE</code> 用于修改字段名，同时也可以修改字段属性</p><p><code>DROP COLUMN</code> 删除数据表中的字段</p><p>一起来看看添加字段的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">--</span> 创建user表：\n<span class="token constant">DROP</span> <span class="token constant">TALBE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user_test</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token constant">INT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;编号&quot;</span><span class="token punctuation">,</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token string">&quot;&quot;</span> <span class="token constant">COMMENT</span> <span class="token string">&quot;用户名&quot;</span>	\n<span class="token punctuation">)</span><span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">CHARSET</span><span class="token operator">=</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>\n\n<span class="token constant">DESC</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，这个用户表缺少很多字段，现在让我们使用 ADD 关键字来添加 <code>age</code> 和 <code>gender</code> 字段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token constant">ADD</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span><span class="token punctuation">;</span>\n<span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token constant">ADD</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gender</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span><span class="token punctuation">;</span>\n\n<span class="token constant">DESC</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>DESC</code> 语句，我们可以看到两个新字段 <code>age、gender</code> 就添加成功了</p><p>如果用户的年龄超过 127 岁（要考虑会出现的极端情况），之前使用的 <code>TINYINT</code> 就不能表示大于 127 的值</p><p>下面，使用 <code>MODIFY</code> 来修改一下 <code>age</code> 字段的属性，我们给 <code>age</code> 字段添加上 <code>UNSIGNED、DEFAULT、COMMENT</code> 属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age</span><span class="token template-punctuation string">`</span></span> <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">0</span> <span class="token constant">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决数值大于 127 其实只需要加上 <code>UNSIGNED</code> 即可，现在最大数值可以表示到 255 了，<code>DEFAULT</code> <code>COMMENT</code> 属性是额外加上去的，增加你对这些属性的记忆</p><p>接下来，我们来用一用 <code>CHANGE</code> 关键字。需求是将 <code>gender</code> 字段名修改为 <code>sex</code>，并添加上非空约束、默认值和注释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token constant">CHANGE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">gender</span><span class="token template-punctuation string">`</span></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sex</span><span class="token template-punctuation string">`</span></span>  <span class="token constant">TINYINT</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">1</span> <span class="token constant">COMMENT</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们用 <code>DESC</code> 查看表结构，会发现字段名已经改为 <code>sex</code> 了</p><p>如果我们想删除一个字段，我们会用 <code>DROP COLUMN</code> 来完成，比如我们将 <code>sex</code> 字段删除：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">user</span><span class="token template-punctuation string">`</span></span> <span class="token constant">DROP</span> <span class="token constant">COLUMN</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sex</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次使用 <code>DESC</code> 语句，观察一下表结构的变化，我们会发现 <code>sex</code> 字段已经被删除了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在实际的开发工作中，如果要执行删除操作，建议一定要先进行备份，因为一但执行删除，数据就消失在人间了。一定要给自己的删除操作留退路。防止数据丢失的惨剧发生在你的身上\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><hr><p>mysqldump 用于备份数据库到一个SQL文件中，下面示范将 <code>test</code>数据库，备份到 <code>test.sql</code>文件中，假设你数据库用户名为 <code>root</code>，密码为<code>12345</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p12345 test <span class="token operator">&gt;</span> test<span class="token punctuation">.</span>sql\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要将备份的数据恢复到MySQL中，使用下面的语句：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># 先删除test数据库，从新创建一个空的 test库，再执行下面的语句\n$ mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p12345 test <span class="token operator">&lt;</span> test<span class="token punctuation">.</span>sql\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><p>根据你提供的命令行截图和信息,这个情况下MySQL命令行无反应的最可能原因是,前面有一个未完成的多行语句。</p><p>具体来说,在你输入 <code>\\c</code> 回车后,MySQL服务器认为这是一个多行语句的开始,等待更多的输入。但是你后续输入的<code>root</code>、<code>exit</code>等都是单独的语句,而不是完成 <code>\\c</code> 开头的逻辑。</p><p>所以MySQL服务器仍然停留在等待多行语句输入的状态,导致后面所有语句都不会执行,从而出现命令行无反应的情况。</p><p>要解决这个问题,你可以按以下操作:</p><ol><li>输入一个分号回车,手动终止这个多行语句的输入:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>然后再输入你想运行的语句,比如:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>show databases;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>现在命令行应该可以正常执行SQL语句了。</li></ol><p>另外要注意在MySQL中使用多行语句时:</p><ul><li>必须以<code>\\</code>字符开头表示多行模式</li><li>输入多行语句内容时不能有分号</li><li>结束多行语句输入要以<code>\\g</code>或<code>\\G</code>结尾</li></ul><p>这就避免了这种语句没有结尾导致的命令行挂起情况。</p><p>让我知道如果问题还没完全解决!</p>',94),c=[p];function o(l,i){return n(),a("div",null,c)}const r=s(e,[["render",o],["__file","3.html.vue"]]);export{r as default};
