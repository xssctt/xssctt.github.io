const n=JSON.parse('{"key":"v-257eb898","path":"/other/io/2.html","title":"IOdemo","lang":"zh-CN","frontmatter":{"title":"IOdemo","icon":"page","order":10,"author":"xss","date":"2023-12-11T00:00:00.000Z","category":["demo"],"tag":["demo"],"footer":"这是测试显示的页脚","copyright":"无版权","description":"package free300.demo.Stream; import java.io.*; public class FileStream { public static void main(String[] args) throws IOException { String PATH=\\"src/main/java/free300/demo/Stream/\\"; System.out.println(new File(PATH).listRoots()); File file=new File(PATH+\\"demo.txt\\"); // file.renameTo(new File(PATH+\\"demo1.txt\\")); if(file.exists()){ System.out.println(\\"存在\\"); } if(file.canRead()){ System.out.println(\\"可读\\"); } if(file.canWrite()){ System.out.println(\\"可写\\"); } // File file1=new File(PATH+\\"delete/deletedemo.txt\\"); // // if(file1.delete()){ // System.out.println(\\"删除成功\\"); // }else { // System.out.println(\\"删除失败\\"); // } File file2=new File(PATH+\\"delete\\"); if(file2.isDirectory()){ System.out.println(\\"文件夹\\"); }else { System.out.println(\\"不是文件夹\\"); } File file3=new File(PATH); System.out.println(\\"长度\\"+file3.length()); System.out.println(file3.canExecute()); File[] files=file3.listFiles(); for (File f: files) { System.out.println(f.getPath()); } FileInputStream inputStream=new FileInputStream(file); // int buffer; // // byte[] buff=new byte[2]; // Byte[] buff2=new Byte[1024]; // // // while ((buffer = inputStream.read()) != -1){ // System.out.println((char) buffer); // } InputStreamReader inputStreamReader=new InputStreamReader(inputStream); // int bt; // Byte[] bt1=new Byte[1024]; // byte[] bt2=new byte[2]; // char[] chars=new char[1024]; // // System.out.println(inputStreamReader.read(chars, 0, 10)); // // while ((bt = inputStreamReader.read(chars,0,100)) != -1){ // System.out.println(new String(chars,0,bt)); // } BufferedReader bufferedReader=new BufferedReader(inputStreamReader); System.out.println(bufferedReader.readLine()); if(bufferedReader != null){ bufferedReader.close(); } if(inputStreamReader != null){ inputStreamReader.close(); } //int read(byte[] b) // 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。 // int read(byte[] b, int off, int len) // 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 // long skip(long n) // 从输入流中跳过并丢弃 n 个字节的数据。 // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(new String(buff)); // } // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(buff); // } // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(buffer); // } // // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(new String(buff,0,buffer)); // } if(inputStream != null){ inputStream.close(); } //------------------------------------------------------------------------------------------------------------------------------------------------ FileOutputStream outputStream=new FileOutputStream(PATH+\\"dt.txt\\"); String demo=\\"aweiyijingsiloigvb哦苹果v抵抗\\"; // byte[] bytes = demo.getBytes(); // // outputStream.write(bytes); OutputStreamWriter outputStreamWriter=new OutputStreamWriter(outputStream); BufferedWriter bufferedWriter=new BufferedWriter(outputStreamWriter); bufferedWriter.write(demo); // outputStreamWriter.write(demo,0,demo.length()); if(bufferedWriter != null){ bufferedWriter.close(); } if(outputStreamWriter != null){ outputStreamWriter.close(); } if(outputStream != null){ outputStream.close(); } } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/io/2.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"IOdemo"}],["meta",{"property":"og:description","content":"package free300.demo.Stream; import java.io.*; public class FileStream { public static void main(String[] args) throws IOException { String PATH=\\"src/main/java/free300/demo/Stream/\\"; System.out.println(new File(PATH).listRoots()); File file=new File(PATH+\\"demo.txt\\"); // file.renameTo(new File(PATH+\\"demo1.txt\\")); if(file.exists()){ System.out.println(\\"存在\\"); } if(file.canRead()){ System.out.println(\\"可读\\"); } if(file.canWrite()){ System.out.println(\\"可写\\"); } // File file1=new File(PATH+\\"delete/deletedemo.txt\\"); // // if(file1.delete()){ // System.out.println(\\"删除成功\\"); // }else { // System.out.println(\\"删除失败\\"); // } File file2=new File(PATH+\\"delete\\"); if(file2.isDirectory()){ System.out.println(\\"文件夹\\"); }else { System.out.println(\\"不是文件夹\\"); } File file3=new File(PATH); System.out.println(\\"长度\\"+file3.length()); System.out.println(file3.canExecute()); File[] files=file3.listFiles(); for (File f: files) { System.out.println(f.getPath()); } FileInputStream inputStream=new FileInputStream(file); // int buffer; // // byte[] buff=new byte[2]; // Byte[] buff2=new Byte[1024]; // // // while ((buffer = inputStream.read()) != -1){ // System.out.println((char) buffer); // } InputStreamReader inputStreamReader=new InputStreamReader(inputStream); // int bt; // Byte[] bt1=new Byte[1024]; // byte[] bt2=new byte[2]; // char[] chars=new char[1024]; // // System.out.println(inputStreamReader.read(chars, 0, 10)); // // while ((bt = inputStreamReader.read(chars,0,100)) != -1){ // System.out.println(new String(chars,0,bt)); // } BufferedReader bufferedReader=new BufferedReader(inputStreamReader); System.out.println(bufferedReader.readLine()); if(bufferedReader != null){ bufferedReader.close(); } if(inputStreamReader != null){ inputStreamReader.close(); } //int read(byte[] b) // 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。 // int read(byte[] b, int off, int len) // 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 // long skip(long n) // 从输入流中跳过并丢弃 n 个字节的数据。 // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(new String(buff)); // } // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(buff); // } // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(buffer); // } // // // while ((buffer = inputStream.read(buff)) != -1){ // System.out.println(new String(buff,0,buffer)); // } if(inputStream != null){ inputStream.close(); } //------------------------------------------------------------------------------------------------------------------------------------------------ FileOutputStream outputStream=new FileOutputStream(PATH+\\"dt.txt\\"); String demo=\\"aweiyijingsiloigvb哦苹果v抵抗\\"; // byte[] bytes = demo.getBytes(); // // outputStream.write(bytes); OutputStreamWriter outputStreamWriter=new OutputStreamWriter(outputStream); BufferedWriter bufferedWriter=new BufferedWriter(outputStreamWriter); bufferedWriter.write(demo); // outputStreamWriter.write(demo,0,demo.length()); if(bufferedWriter != null){ bufferedWriter.close(); } if(outputStreamWriter != null){ outputStreamWriter.close(); } if(outputStream != null){ outputStream.close(); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xss"}],["meta",{"property":"article:tag","content":"demo"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOdemo\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xss\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.58,"words":474},"filePathRelative":"other/io/2.md","localizedDate":"2023年12月11日","excerpt":"<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">free300<span class=\\"token punctuation\\">.</span>demo<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Stream</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">FileStream</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">PATH</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"src/main/java/free300/demo/Stream/\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PATH</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">listRoots</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n        <span class=\\"token class-name\\">File</span> file<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PATH</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"demo.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n       <span class=\\"token comment\\">// file.renameTo(new File(PATH+\\"demo1.txt\\"));</span>\\n\\n\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"存在\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">canRead</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"可读\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">canWrite</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"可写\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//        File file1=new File(PATH+\\"delete/deletedemo.txt\\");</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        if(file1.delete()){</span>\\n<span class=\\"token comment\\">//            System.out.println(\\"删除成功\\");</span>\\n<span class=\\"token comment\\">//        }else {</span>\\n<span class=\\"token comment\\">//            System.out.println(\\"删除失败\\");</span>\\n<span class=\\"token comment\\">//        }</span>\\n\\n        <span class=\\"token class-name\\">File</span> file2<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PATH</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"delete\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>file2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isDirectory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件夹\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"不是文件夹\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n\\n        <span class=\\"token class-name\\">File</span> file3<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PATH</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"长度\\"</span><span class=\\"token operator\\">+</span>file3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>file3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">canExecute</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n       <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> files<span class=\\"token operator\\">=</span>file3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">listFiles</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">File</span> f<span class=\\"token operator\\">:</span> files<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPath</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n\\n\\n        <span class=\\"token class-name\\">FileInputStream</span> inputStream<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileInputStream</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//        int buffer;</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        byte[] buff=new byte[2];</span>\\n<span class=\\"token comment\\">//        Byte[] buff2=new Byte[1024];</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        while ((buffer = inputStream.read()) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println((char) buffer);</span>\\n<span class=\\"token comment\\">//        }</span>\\n\\n        <span class=\\"token class-name\\">InputStreamReader</span> inputStreamReader<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InputStreamReader</span><span class=\\"token punctuation\\">(</span>inputStream<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n\\n<span class=\\"token comment\\">//        int bt;</span>\\n<span class=\\"token comment\\">//        Byte[] bt1=new Byte[1024];</span>\\n<span class=\\"token comment\\">//        byte[] bt2=new byte[2];</span>\\n<span class=\\"token comment\\">//        char[] chars=new char[1024];</span>\\n<span class=\\"token comment\\">//</span>\\n         <span class=\\"token comment\\">// System.out.println(inputStreamReader.read(chars, 0, 10));</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        while ((bt = inputStreamReader.read(chars,0,100)) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println(new String(chars,0,bt));</span>\\n<span class=\\"token comment\\">//        }</span>\\n\\n\\n\\n        <span class=\\"token class-name\\">BufferedReader</span> bufferedReader<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedReader</span><span class=\\"token punctuation\\">(</span>inputStreamReader<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>bufferedReader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>bufferedReader <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            bufferedReader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>inputStreamReader <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            inputStreamReader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n\\n        <span class=\\"token comment\\">//int read(byte[] b)</span>\\n        <span class=\\"token comment\\">//          从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。</span>\\n        <span class=\\"token comment\\">// int read(byte[] b, int off, int len)</span>\\n        <span class=\\"token comment\\">//          从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span>\\n        <span class=\\"token comment\\">// long skip(long n)</span>\\n        <span class=\\"token comment\\">//          从输入流中跳过并丢弃 n 个字节的数据。</span>\\n\\n<span class=\\"token comment\\">//        while ((buffer = inputStream.read(buff)) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println(new String(buff));</span>\\n<span class=\\"token comment\\">//        }</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        while ((buffer = inputStream.read(buff)) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println(buff);</span>\\n<span class=\\"token comment\\">//        }</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        while ((buffer = inputStream.read(buff)) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println(buffer);</span>\\n<span class=\\"token comment\\">//        }</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        while ((buffer = inputStream.read(buff)) != -1){</span>\\n<span class=\\"token comment\\">//            System.out.println(new String(buff,0,buffer));</span>\\n<span class=\\"token comment\\">//        }</span>\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>inputStream <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            inputStream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n<span class=\\"token comment\\">//------------------------------------------------------------------------------------------------------------------------------------------------</span>\\n\\n\\n\\n        <span class=\\"token class-name\\">FileOutputStream</span> outputStream<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileOutputStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PATH</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"dt.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">String</span> demo<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"aweiyijingsiloigvb哦苹果v抵抗\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//        byte[] bytes = demo.getBytes();</span>\\n<span class=\\"token comment\\">//</span>\\n<span class=\\"token comment\\">//        outputStream.write(bytes);</span>\\n        <span class=\\"token class-name\\">OutputStreamWriter</span> outputStreamWriter<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">OutputStreamWriter</span><span class=\\"token punctuation\\">(</span>outputStream<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">BufferedWriter</span> bufferedWriter<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedWriter</span><span class=\\"token punctuation\\">(</span>outputStreamWriter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        bufferedWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>demo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n       <span class=\\"token comment\\">// outputStreamWriter.write(demo,0,demo.length());</span>\\n\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>bufferedWriter <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            bufferedWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>outputStreamWriter <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            outputStreamWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>outputStream <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            outputStream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
