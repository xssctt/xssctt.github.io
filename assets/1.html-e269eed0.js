const n=JSON.parse('{"key":"v-dd991ea6","path":"/other/mysql/1.html","title":"数据库","lang":"zh-CN","frontmatter":{"title":"数据库","icon":"page","order":31,"author":"xss","date":"2023-12-11T00:00:00.000Z","category":["数据库"],"tag":["数据库","sql"],"footer":"这是测试显示的页脚","copyright":"无版权","description":"关系型数据库的主要特点有哪些? me: 数据关系 连表查询 ai: 数据以表格的形式存储,每行记录代表一个数据实体,每列属性代表数据实体的一个特征。 强调数据之间的关系,数据可以通过定义主键和外键进行关联。 数据操作通过关系代数和关系演算等关系模型进行。 提供结构化查询语言(SQL),方便对数据的查询、插入、删除和更新。 具有**事务处理(**ACID)的功能,可以保证数据的完整性和一致性。 提供视图、存储过程、触发器等数据库对象,扩展了关系模型的建模能力。 支持数据库规范化,有助于减少数据冗余,提高存储效率。 提供用户权限管理、备份恢复等管理功能。 支持客户端/服务器架构,易于在分布式环境下部署。 成熟可靠,有完善的安全机制。 数据库中的数据冗余是指什么?有哪些缺点? me: 存储空间利用不当，存在小碎片的存储空间不能充分利用/空间占用大 ai: 数据冗余指的是在数据库中的表中出现重复或多余的数据。主要有以下两个方面的缺点: 数据存储空间的浪费 数据冗余会导致重复或无用的数据被存储多次,占用了大量额外的存储空间。特别是在大数据库中,冗余数据会明显增加数据库的体积,增加存储成本。 数据异常的风险 存在冗余数据时,当某一处数据被修改后,相关数据不一定会同步更新,导致数据之间出现不一致的情况。这会降低数据的可靠性和完整性。 此外,数据冗余还可能导致其他问题,比如插入和删除异常、程序设计和操作复杂化等。 为了避免数据冗余,数据库的设计者通常会采用数据库规范化的方法来减少冗余,主要包括第一范式(1NF)、第二范式(2NF)、第三范式(3NF)等规范要求。合理的数据库规范化可以有效减少数据冗余,提高数据的完整性和一致性。 什么是数据库的完整性?有哪几种完整性? me: null ai: 实体完整性:每张表的每一行(即每一个实体)都应该是唯一的,通常通过主键约束来保证。 域完整性: 数据表中的每一列(属性)只允许出现合理的值,每个属性值的范围应该事先定义好。 引用完整性:维护表与表之间的关系,例如外键约束来保证主表中不存在的外键值不能在从表中出现。 用户定义完整性:允许用户根据需要定义或指定需要保证的完整性约束条件。 业务完整性:按业务规则设定数据需要满足的一致性或准确性。 如何理解数据库的三大范式?请简要说明每一范式的含义。 me: 第一范式 去除与主键 第二范式 第三范式 ai: 第一范式(1NF): 属性不可再分 满足1NF的关系Mode中,每个属性值都必须是不可再分的基本值,不允许有重复的属性或多个值在一个属性中。 第二范式(2NF): 完全依赖主键 满足2NF的关系模式中,非主属性必须完全依赖主键,消除1NF基础上产生的部分依赖。 第三范式(3NF): 消除传递依赖 满足3NF的关系模式中,任何非主属性不依赖于其它非主属性,消除2NF基础上产生的传递依赖。 简单来说: 1NF 消除属性的重复组合; 2NF 消除部分依赖; 3NF 消除传递依赖。 数据库索引的作用是什么?哪些字段应该创建索引? me; 在数据量比较大时可以加快对数据的查询 主键 唯一的识别的值 ai; 加速查询和检索速度 索引可以大大减少数据库需要扫描的数据量,使得查询和检索速度能够大幅提升。 2.加速表与表之间的连接 通过在连接字段上进行索引,可以减少连接需要的时间。 3**.加速排序操作** 可以通过索引直接提取排序数据,加快排序速度。 4.加速聚集函数的操作 聚集函数如sum()、max()、min()等在索引列上进行计算时速度会更快。 通常以下字段应该创建索引: 表中经常需要搜索的字段。 经常出现在WHERE子句中的字段。 经常需要排序的字段。 表主键。 频繁被连接的字段。 在查询中与其他索引列组合使用的字段。 什么是数据库事务?事务的四个特征是什么? me: 对多个数据库的操作，执行的方法， /隔离性 原子性 一致性 持久性 ai: 数据库事务(Transaction)是指作为一个单独执行单元的一系列操作,这些操作要么全部成功执行,要么全部不执行。 数据库事务通常具有四个关键特徵,称为 ACID: **原子性(Atomicity)😗*事务是一个不可分割的工作单位,事务中的所有操作要么全部执行成功,要么全部失败回滚。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。事务执行不会破坏数据库数据的完整性和业务逻辑约束。 隔离性(Isolation):多个事务并发执行时,一个事务的执行不应影响其他事务的执行。 持久性(Durability):已提交的事务对数据库的修改应该永久保存在数据库中,不会被回滚。 什么是数据库的锁机制?有哪几种锁? me: 对数据查询访问的限制操作 / 悲观锁 乐观锁 ai: 数据库锁机制是为了保证数据库并发访问的一致性而设计的,它通过对数据加锁来实现多用户对数据库的并发访问控制。 常见的数据库锁主要有以下两种: **共享锁(S锁)😗*允许多个事务对同一数据进行读取操作,防止资源被修改。 排他锁(X锁):只允许一个事务占有数据的排他访问权,防止多个事务同时修改数据。 除此之外,数据库锁可以分为以下几种: 行级锁:对关系表中的某一行加锁。 表级锁:对整张表加锁。 页级锁:对数据表的某个页面加锁。 表空间锁:对表空间中的所有对象加锁。 数据库锁:对整个数据库加锁。 什么是数据库的并发控制?常见的并发控制方法有哪些? me: null ai: 数据库的并发控制是为了保证在多个事务并发执行时不破坏数据库的完整性和一致性而设计的机制。常见的并发控制方法有以下几种: 锁机制:通过在数据上加锁来实现并发控制,如共享锁、排它锁等。 多版本并发控制(MVCC):每次读取都从一个快照读,不加锁。通过在修改时生成新版本的数据行副本来实现。 时间戳序方法:为每一个事务赋予一个唯一的时间戳,事务只能读取时间戳小于自己的时间戳的数据。 乐观并发控制:假设冲突较少,允许事务先执行,但在提交时检查是否违反一致性。 悲观并发控制:假设冲突很多,在操作数据前先加锁,确保操作的一致性。 基于多粒度的锁机制:采用多种粒度的锁来获得更好的并发性。 什么是数据库的故障恢复技术? checkpoint、redo log、undo log之间的关系是? me: 通过对数据库日志，对数据库故障的恢复 / ai: 数据库的故障恢复技术主要包括备份恢复技术、日志恢复技术等。 checkpoint、redo log、undo log三者之间的关系如下: checkpoint:检查点,数据库会定期将缓冲池中的脏页(修改过的数据页)刷新到磁盘上,生成一个检查点。 redo log:重做日志,记录数据库操作引起的数据修改。用于重做或回滚未提交的事务。 undo log:回滚日志,记录数据修改前的旧值。用于事务回滚时撤销对数据库的修改。 当数据库发生故障后,利用checkpoint信息将数据页恢复到故障发生时的最后known good状态。然后利用redo log重做故障后新提交的事务对数据的修改。最后再根据undo log进行未提交事务的回滚操作,直到恢复到故障发生前的状态。 数据库优化的常见手段有哪些? me: 数据库规范化 索引 ai: **SQL语句优化:**通过参数绑定、去除不必要的查询等方式优化查询语句。 数据库结构优化:合理设计表结构,避免冗余,建立索引。 数据库服务器优化:调整数据库内存、并发数等服务器参数。 查询计划优化:选择最优查询路径,如利用索引查询。 数据访问优化:减少客户端与服务器之间交互,使用连接池。 磁盘I/O优化:SEPARATE表空间,RAID技术。 **数据库分区:**通过垂直拆分或水平拆分 way 提高可扩展性。 采用读写分离机制:降低数据库访问压力。 数据库并行处理:如并行查询。 采用数据库缓存:缓存热点数据,减少磁盘I/O。 数据库中的视图有什么作用?视图可以更新数据吗? me: 视图狗都不用 ai: 简化复杂的SQL查询 通过在视图上执行查询,可以将复杂的查询封装和隐藏,使用更简单的查询语法。 ​\\t2保护数据 可以在视图上隐藏表中的部分敏感字段,对用户只开放必要的列。 ​\\t3提高查询性能 视图可以只查询必要的数据列,并且可以利用索引提升性能。 ​\\t4保持数据的一致性 可以在视图上定义计算字段,从而在不同的表中实现一致的数据显示。 ​\\t5实现数据独立 当表结构变更时,只修改视图定义,对访问视图的查询语句无须改动。 对于可更新的视图,可以通过视图实现对基表数据的修改、插入和删除操作。但有些视图由于存在聚合函数等是不可更新的。 什么是数据库的范式设计?为什么需要范式设计? me: 对数据库的属性进行规范化设计 / 减少数据库的冗余 提高数据库查询 优化数据库 ai: 数据库需要范式设计主要有以下原因: 减少数据冗余 范式设计可以识别出不合规范的设计,消除数据冗余,节省存储空间。 避免插入异常 消除非主属性对主属性的部分函数依赖可以避免插入异常。 避免删除异常 消除非主属性对主属性的传递函数依赖可以避免删除异常。 避免更新异常 符合范式的关系模式,非主属性不依赖于其他非主属性,可以避免更新异常。 提高查询性能 减少数据冗余可以提高查询和搜索的性能。 保持数据一致性 符合范式的设计可以保证数据一致性,避免数据操作引起的数据不一致。 方便数据库应用设计 降低数据库复杂度,使数据库结构更清晰简洁,便于开发人员设计和使用。 数据库的主键和唯一键有什么区别? me: 主键 必须唯一性唯一标志 可以作为其他表的外键 唯一键 属性唯一 ai: 主键是一行数据的唯一标识,可以唯一定位一行数据,每张表只能有一个主键。唯一键不是主键,一张表可以有多个唯一键。 主键不允许为空值,唯一键列可以为空值。 主键直接定义在表中。唯一键可以定义在表中,也可以通过唯一索引实现唯一键约束。 主键默认会建立主键索引,数据库系统会自动为主键创建索引。唯一键可以建立唯一索引,也可以不创建。 **主键不允许修改,**除非重建表。唯一键可以修改,但不能重复。 每张表必须定义主键,以标识唯一一行记录。唯一键不是必需的。 一个表可以有多个唯一键,但最多只能有一个主键。 什么是数据库的参照完整性?如何通过外键约束实现参照完整性? me: 忘了 ai: 数据库的参照完整性是指存在外键关系的表之间的数据一致性。它通过外键约束来实现。 外键约束的作用是保证子表数据外键列的值必须来自主表的主键列的值。这样就建立了主表和子表数据之间的链接,保证了主 子 表数据的一致性。 具体实现参照完整性的方法: 在子表添加外键列,其数据类型和主表的主键列一致。 在子表外键列上添加外键约束,约束引用主表的主键列。 指定外键更新和删除时的操作,如级联更新/删除或设置为无动作。 可以设置外键值为null,也可以设置为不允许为空。 数据库的三大设计范式之间有什么关系?为什么要遵守高级范式的设计? me: 三个范式 互相递进 第三范式在第二范式基础上更加要求 / 遵循高级范式可以减少数据冗余 数据操作异常 数据一致性 ai: 数据库的三大范式之间是逐步规范化的关系: 第一范式(1NF)是关系数据库的基础,表的每一列都是不可分割的基本数据项。 第二范式(2NF)在1NF的基础上,非码属性必须完全依赖于候选码,消除非主属性对主码的部分函数依赖。 第三范式(3NF)在2NF基础上,任何非主属性不依赖于其它非主属性,消除传递依赖。 高级范式都是在第三范式的基础上建立的,如BCNF范式等。 遵守高级范式设计数据库的主要理由: 可以避免数据冗余,节省数据存储空间。 将数据结构分解成合理的形式,有利于数据库维护。 减少插入、更新、删除异常的发生。 提高数据查询和访问的效率。 提高程序对数据库的设计和操作的简单性。 方便对数据库的扩展和修改。 提高数据的一致性和完整性。 什么是数据库的**冗余设计?**冗余设计的利与弊是什么? me： 不知道 ai: 数据库冗余设计指在数据库设计中存在一定数据冗余或重复的设计。 冗余设计的利与弊: 利: 提高了数据的完整性和一致性。系统容错能力增强。 提高数据读取效率。多表查询时,冗余数据可以减少连接操作。 提高数据写入效率。允许在少数表中进行冗余存储,以提高写效率。 简化数据库设计,可以利用冗余数据减少复杂的查询。 弊: 数据冗余增加了数据维护的难度。 提高了数据存储空间的需求。 提高了系统设计和开发的难度。需考虑数据同步问题。 增加了数据库插入和更新的问题。 出现数据不一致的可能。 数据库连接的分类有哪些?各有什么特点? me: 使用数据库引擎 使用数据池链接 / 1， 2，数据池连接减少操作次数 ai： 短连接:每次数据库操作后就关闭连接。 特点:连接创建和关闭频繁,资源消耗大,性能较差。 长连接:重复使用同一个数据库连接,对多次数据库操作优化。 特点:减少连接创建和关闭次数,性能较好。但如果长时间不关闭,会占用连接资源。 另外,数据库连接还可以分为: **直接连接:**应用程序直接连接数据库。 特点:简单,无中间层,但不利于管理和拓展。 连接池连接:使用连接池存放数据库连接,应用程序从池中获取连接。 特点:可以重用连接,提高效率。但需要注意池容量控制。 什么是数据库事务的ACID特性?缺少某一特性会造成什么问题? me: 隔离性 一致性 原子性 持久性 / 缺少会造成数据不一致 事务失效 ai: 原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。 隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。 持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。 如果缺少某一特性: 缺少原子性:事务执行可能只部分成功,使数据处于不一致状态。 缺少一致性:事务执行使数据库从一个一致状态变成不一致状态。 缺少隔离性:事务并发执行相互影响,数据错误。 缺少持久性:系统故障后,已提交事务的修改可能丢失 选择使用何种数据库索引类型的判断标准有哪些? me： 不知道 ai: 查询方式 - 根据查询中条件列的判断,选择合适的索引,如唯一索引、普通索引、前缀索引等。 查询性能 - 根据查询的性能要求,如查询范围的大小,选择聚簇索引或非聚簇索引。 数据量 - 数据量小可以考虑使用唯一索引;数据量大则应优先考虑普通索引。 数据变更频率 - 变更频繁的数据字段不太适合创建索引。静态数据字段可优先考虑。 索引维护成本 - 索引能够带来查询性能提升需要与维护索引的成本作比较。 索引限制 - 一些数据库对索引的 key 长度、数量都有限制,在设计时需要注意。 数据关系 - 与查询条件 columnist 相关联的数据字段优先考虑建立索引。 实际执行查询计划 - 可以比较真实的执行计划来决定创建哪些索引。 数据库的性能优化手段中,哪些属于SQL优化,哪些属于硬件优化? me; 索引优化 分页 属于sql //硬件优化 ai: SQL优化主要包括: SQL语句优化 - 使用EXPLAIN检查执行计划,优化查询方式,避免全表扫描等。 索引优化 - 加入适当的索引,减少查询需要扫描的数据。 数据库结构优化 - 规范设计表和库,避免冗余索引和查询。 参数优化 - 配置合理的缓存,连接数等数据库参数。 硬件优化主要包括: 升级CPU、内存 - 提高数据库服务器的处理能力。 使用SSD - 减少I/O等待时间。 分库分表 - 减少单库单表数据量,提高查询效率。 采用更高效的磁盘IO方式 - 如RAID 10。 选择合适的存储引擎 - 如InnoDB, MyISAM等。 客户端连接优化 - 连接池,本地缓存等。 数据库三范式有什么作用?不符合三范式会带来哪些问题? me: 规范化数据库结构 减少数据冗余 不符合 可能造成数据冗余 数据异常 数据库操作异常 ai: 数据库三范式的主要作用是: 避免数据冗余和异常 - 三范式要求数据表中的每个列都和主键直接相关,从而避免重复和多余的数据。 提高查询效率 - 三范式将数据划分为多张功能独立的表,而非塞进一个大表,提高查询速度。 降低更新异常 - 更新时只需要更新一处,不会出现数据不一致的情况。 提高系统扩展性 - 三范式使表的结构合理独立,易于扩展。 不符合三范式主要会带来以下问题: 数据冗余和数据不一致 - 同样的数据出现在多个表中,数据重复,容易出现不一致。 插入异常 - 在一个表中插入数据,需要同步插入其他表,否则产生数据不一致。 删除异常 - 删除操作可能会删掉其他表还在使用的数据。 更新异常 - 同一数据不同表的更新可能不一致。 系统维护困难 - 字段增删改都会影响多张表,维护复杂。 数据库事务的四个特征是:原子性、一致性、隔离性和持久性。请解释这四个特征的意义。 原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。 隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。 持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。 数据库的并发控制有哪几种常见方法?各自的优缺点是什么? me: 加锁{表锁 行锁 } 事务 / 加锁可以并发数据安全 效率慢 不加锁可能不安全但效率快 ai: 锁机制 优点:并发冲突控制能力强,保证数据一致性。 缺点:锁的获取和释放有较大开销,会降低并发性能。锁模式不当还可能导致死锁。 多版本并发控制(MVCC) 优点:不会阻塞读操作,提高了读性能和并发性。 缺点:需要额外空间存储多版本数据,写操作开销也较大。 时间戳 ordering 优点:无需锁及多版本,并发控制简单。 缺点:只适用于读多写少的场景,可扩展性较差。 乐观锁 优点:不阻塞读操作,无死锁问题。 缺点:写冲突时会重试和回滚,成功率不高。 分布式事务 优点:支持分布式场景的并发控制。 缺点:实现复杂,资源开销大,不支持高并发。 数据库的锁有共享锁和排它锁,这两种锁的区别是什么?各自使用场景? me: 共享锁指进程运行所需要资源可以被其他进程所共享使用 排他锁指进程所需资源仅可自己使用其他进程无法请求已使用的资源 ai: 兼容性不同： S锁与S锁兼容，可以多个事务同时加S锁。 X锁与X锁和S锁都不兼容，加X锁时其他事务不能再加任何锁。 加锁读写能力不同： S锁只允许读取数据，不允许修改。 X锁既可以读取也可以修改数据。 加锁粒度不同： S锁通常是行级锁，只锁定查找到的行。 X锁一般是表级锁，会锁定整张表。 根据这些特性，可以将它们用于不同的事务场景： S锁的使用场景： S锁适用于只读事务，因为它们可以并发地加锁，从而提高并发度，允许多个事务同时读取相同的数据。这对于读取频繁、但修改较少的场景非常有用，例如报表查询等。 X锁的使用场景： X锁适用于写事务，因为它提供了互斥访问，确保在一个事务修改数据时，其他事务无法访问或修改相同的数据。这对于需要保证数据一致性和避免冲突的写操作非常重要，例如更新、删除等操作。 读写混合事务的处理： 在某些情况下，可能需要同时进行读取和写入操作。在这种情况下，可以先加X锁，以确保数据的独占访问权。然后，在需要读取的行上加S锁，以便在读取过程中保持一致性。最后，在完成操作后，释放所有锁。 共享锁（Shared Lock）： 共享锁允许多个事务同时获取同一个数据项的锁，以进行读操作。多个事务可以同时持有共享锁，但不能与排他锁同时存在。 共享锁之间是兼容的，这意味着一个事务可以在另一个事务持有共享锁的同时获取相同数据项的共享锁。 共享锁用于读取操作，可以并发地读取数据，从而提高并发性能。 适用场景：当多个事务需要读取相同的数据项时，可以使用共享锁，以避免冲突并允许并发读取操作。 排他锁（Exclusive Lock）： 排他锁在事务需要进行写操作时获取，确保数据在写操作期间不会被其他事务读取或写入。 排他锁与其他任何锁（包括共享锁和排他锁）都不兼容，这意味着当一个事务持有排他锁时，其他事务不能获取相同数据项的任何锁。 排他锁用于写操作，保证数据的独占性，避免并发写入冲突，从而维护数据的一致性。 适用场景：当事务需要对数据进行写操作（修改、删除等）时，应该获取排他锁，以确保数据的一致性和完整性。 在实际应用中，根据事务的需求和操作类型，可以选择适当的锁策略。有时候，也会出现读写混合的场景，这时可能需要在读操作时获取共享锁，在写操作时获取排他锁，以实现合适的并发控制和数据保护。 为什么需要数据库的事务处理?事务能够保证数据库的一致性吗? me: 对数据库需要并行操作 /事务可以保持一致性 ai: 将多条相关SQL作为一个不可分割的工作单元执行,以保证数据的完整性。 提供将数据库从一致性状态变换到另一致性状态的机制。 在并发访问时,保证事务之间的隔离性。 在系统故障后,恢复数据库状态以保持数据一致性。 但是,事务不能完全保证数据库的一致性。原因如下: 事务只能保证数据库从一个一致状态转变到另一个一致状态,不能防止一开始数据库状态就不一致。 长时间事务会降低并发性,也无法完全隔离事务之间的影响。 硬件故障也可能导致事务处理失败,无法恢复数据库一致状态。 错误或不合理的事务处理逻辑同样可能破坏数据一致性。 数据库的冗余对性能有什么影响?如何在冗余与性能间做平衡? me: 数据库冗余导致数据异常 性能读写降低，数据库操作异常数据不安全不一致 / 合理规划数据库设计 结合实际使用不同的范式 ai: 写入性能 - 冗余会导致每个写操作需要更新多个副本,降低写入速度。 读取性能 - 适当冗余可以提高读取速度,因为读取可以分散在多个副本上。但冗余过高会导致缓存浪费和磁盘空间浪费,降低效率。 内存占用 - 数据冗余会增加内存占用。 数据不一致 - 多个副本存在数据不一致的可能,需要额外的完整性检查。 平衡冗余和性能可以从以下几个方面进行: 只对**最常读取和最重要的数据建立冗余,**不要对全部数据均创建冗余。 控制冗余副本的数量,一般2-3个副本就足够提供读取性能优势。过多冗余反而降低效率。 采用异步或延迟的冗余策略,减小冗余对写入的影响。 对冗余数据进行分区,避免单点热点问题。 利用缓存来提高读取速度,而不是单纯依赖冗余。 对冗余数据进行压缩,减少存储和内存开销。 加强系统间数据一致性检测与同步机制,降低冗余带来的不一致风险。 配合业务特点采用适当的冗余策略,如主从式、份额式等。 数据库优化中,对查询语句优化和对数据库表优化有何不同?应优先考虑哪些方面? me: 查询语句优化 --&gt; 在查询过程中更快或准确查询 通过索引 条件 连表等操作 数据库表优化 --&gt; 在数据表建立 对数据进行规范化 分表 分页 优先考虑语句优化 比较直接 对数据库表优化 可能比较麻烦 ai: 查询语句优化 重点优化SQL查询逻辑,使查询更高效 如添加索引、SQL优化、查询重写等 目的是消除不必要的查询,减少扫描行数 数据库表优化 重点优化表结构与设计,减少存储冗余 如正规化、拆分表、垂直拆分等 目的是减少储存空间,提高CRUD效率 优先考虑的方面: 对重要且频繁的查询语句进行优化 对大表、重要业务表的结构设计优化 先从查询语句入手,对症下药 查询无法优化时再考虑表结构调整 选择使用物理外键与逻辑外键,应该考量哪些因素?两者的优缺点? me: null ai: 数据完整性需求 物理外键通过约束可以保证引用完整性,删除/更新主表数据时限制外键变化。 逻辑外键不能自动保证引用完整性,需要通过应用程序来维护。 查询性能需求 物理外键会对主表创建索引,可提高联表查询速度。 逻辑外键没有索引,联表查询需要全表扫描,较慢。 数据变更需求 物理外键的约束会限制主表数据的删除与更新。 逻辑外键没有这个限制,主表变更更灵活。 系统性能限制 物理外键的约束会增加插入/更新时的开销。 逻辑外键的开销较小。 物理外键的优点是保证数据一致性,提高查询速度,但会限制主表变更。 逻辑外键的优点是变更灵活性高,系统开销较小,但无法自动保证引用完整性。 数据库索引在提高查询速度的同时,会带来哪些问题?该如何权衡? me: 额外内存开销 ai: 写入开销增加 索引会增加数据库写入数据时的开销。所有索引字段的值都需要同步更新。 额外存储空间占用 索引需要额外的存储空间来保存索引结构和索引值。 索引维护成本 修改表结构时需要重新建立索引,也需要定期维护索引。 可能导致查询优化器依赖索引 存在索引并不一定被查询优化器使用,可能导致非预期的查询计划。 降低部分写操作的性能 索引可以加速查询,但会降低部分INSERT,UPDATE和DELETE的性能。 因此,建立索引需要权衡其带来的收益和成本。一般的考虑原则是: 仅对常用字段建立索引,不要对很少使用或不作为查询条件的字段建立索引。 删除不再使用或很少使用的索引,不定期评估索引的使用效果。 对高并发的读写操作要谨慎建立索引。 对TEXT、BLOB等大字段尽量不要创建索引。 在建立复合索引时考虑列的顺序对性能的影响。 对于大表要建立部分索引而不是全表索引。 数据库视图的作用有哪些?使用视图可能带来的问题是什么?应如何应对? me: 视图狗都不用 ai: 数据库范式设计的目标是什么?为什么需要遵循范式化设计? me: 数据库性能 维护 变好 ai； 避免数据冗余和异常,提高数据的完整性和一致性。 降低数据维护和存储成本。 提高查询性能。 确保数据库结构灵活扩展,便于应用程序开发。 遵循范式化设计主要有以下原因: 减少数据冗余,避免同样的数据出现在多个表中,占用大量存储空间。 避免插入、更新异常,如无法正常删除的数据。这些异常会导致数据库结构混乱。 降低维护成本,不需要在多个表中同步修改冗余数据。 提高查询效率,不需要在多表中查询同样的数据。 提高可扩展性,系统变更不会影响数据库整体结构。 有利于未来优化,如拆分表等。 便于程序开发,不同模块访问不同表,业务清晰。 解释SQL语句的优化原则,有哪些需要注意的点? ai: 尽量减少查询的数据行数,使用WHERE条件进行过滤。 尽量减少JOIN表的数量,避免不必要的连接查询。 对经常查询的字段建立索引,提高查询效率。 避免在WHERE子句中使用NOT IN和&lt;&gt;操作符,它们难以优化。 使用白名单限制查询范围,避免全表扫描。 对文本字段应加引号限制前缀wildcard查询。 对统计类查询使用GROUP BY而不是DISTINCT去重。 避免数据类型的隐式转换,这会降低查询效率。 对多表JOIN查询,保证ON和WHERE条件列有索引。 编写存储过程提高重复查询的效率。 对批量插入数据操作使用事务提高效率。 对动态SQL参数使用绑定变量提高稳定性。 避免使用游标或联合查询,它们执行效率较低。 对复杂查询分步进行,逐步优化。 数据库连接池的作用是什么?使用连接池可能带来哪些问题? me: 对数据库操作时，避免多次链接数据库，避免每次数据操作需要重新链接数据库 AI: 数据库连接池的主要作用是提高数据库连接的使用效率。 **重用存在的连接,**避免频繁创建和关闭连接的开销。 管理连接对象数目,避免过多连接耗尽资源。 实现连接的线程安全共享。 提供连接的待命池,加快获取连接的速度。 使用连接池可能带来以下问题: 配置不当可能造成连接池溢出、泄漏等。 多线程环境下需要实现连接管理的同步机制。 连接长时间闲置导致连接超时。 大量连接创建可能带来内存压力。 连接没有按需释放,浪费资源。 连接长时间占用,出现瓶颈。 选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点? 如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些? 讲解数据库故障转移与负载均衡的工作原理,两者有何不同? 数据库主备服务器架构的工作原理是什么?主备服务器之间如何同步数据? 讲解行锁、表锁、意向锁的使用场景和实现机制。 数据库数据如何设计维度建模与事实建模?二者有何优势? 什么是数据库的无损调整?如何实现数据库结构的无损调整? 数据库事务隔离级别有哪些?各个隔离级别的区别是什么? 讲解InnoDB和MyISAM存储引擎的区别与应用场景。 数据库空间数据型如何设计合理的空间索引提高查询效率? 什么是数据库的慢查询?如何定位和优化慢查询? 什么是数据库死锁?如何避免数据库死锁的发生? 讲解关系型数据库与NoSQL数据库的区别,两者各自的应用场景。 讲解SQL注入攻击的原理,如何通过参数化查询防止SQL注入。 数据库服务器内存不足时应该如何调优?有哪些可优化方向? 设计一个支持百万级流量的数据库架构,需要考虑哪些方面? 关系型数据库与文档型数据库的区别在哪里?各自的典型产品和应用场景? 数据库的存储引擎有哪些?各有什么特点? 数据库索引的底层实现原理是什么?B+树与B树的区别在哪里? 讲解数据库事务的隔离机制,包括脏读、不可重复读、幻读的概念。 什么是数据库范式?解释第一范式、第二范式、第三范式的定义。 数据库优化中,业务层优化和SQL语句优化的focal区别是什么? 选择增量备份与完全备份应考虑哪些因素?两者分别适用于哪些场景? 解释数据库连接的集中式与分布式部署方式,讲述两种方案的利弊。 数据库查询优化中,应该优先考虑查询缓存还是索引?理由是什么? 讲解数据库主键和唯一索引的区别,各自的使用场景。 为什么需要数据库事务?事务如何保证数据库的ACID特性? 选择MySQL存储引擎时,应考虑哪些因素?各存储引擎的应用场景? 解析SQL语句的优化原则,有哪些需要注意的点? 设计支持大量并发的数据库架构需要考虑哪些方面? 什么是数据库连接池?使用连接池带来哪些好处? 讲解三种数据库连接方案:长连接、短连接、连接池。 数据库的水平拆分与垂直拆分有何区别?各自的使用场景是? 设计一个支持百万级流量的数据库架构,需要考虑哪些方面? 选择使用物理外键与逻辑外键,应该考量哪些因素?两者的优缺点? 如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些? 数据库事务有哪几种隔离级别?各自的优缺点是什么? 讲解数据库三大范式的意义,以及如何实现范式设计。 什么是数据库的FILESTREAM技术?有什么优点和使用场景? 解析主从复制和主主复制的工作原理、优缺点和适用场景。 数据库优化中,SQL语句优化和索引优化的重要程度如何区分? 讲解行锁和表锁的使用场景、加锁机制、优缺点。 如何查看和分析MySQL的慢查询日志? 什么是MVCC机制?InnoDB如何通过MVCC实现事务隔离? 选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点? 什么是数据库范式?为什么要进行范式化设计? 讲解NoSQL数据库的特点,列举几种常见的NoSQL数据库。 解析数据库故障转移和负载均衡的工作机制、区别和应用场景。 MongoDB和Redis的区别在哪里?各自的应用场景有哪些? 数据库连接池的工作原理是什么?使用连接池的优缺点? 如何 diagnoase 和优化一个慢SQL查询?需要注意哪些方面? 设计一个支持百万用户同时在线的数据库架构,需要考虑哪些方面? 解析SQL和NoSQL数据库的区别,以及各自的应用场景。 讲解InnoDB和MyISAM这两种存储引擎的特点和区别。 什么是数据库范式?为什么需要进行范式化设计? 解析行锁、表锁、意向锁的加锁机制、使用场景和优缺点。 讲解事务的ACID特性,以及事务的隔离级别和实现。 解析B+树和B树的区别,以及为什么索引通常选择B+树。 讲解三种常见的数据库拆分方案:垂直拆分、水平拆分、分库分表。 数据仓库与数据库有哪些区别?数据仓库的优点是什么? 如何设计一个支持地理位置查询的数据库架构方案? 什么是数据库的无损扩容?应该如何实现? 解析大型数据库系统的容灾技术,需要考虑哪些方面? 如何防止和解决数据库中的死锁问题? 什么是数据库的主从复制?如何实现 MySQL 的多源复制? 解析OLTP系统和OLAP系统的特点和区别。 如何为数据库服务器优化内存配置?需要关注哪些参数?","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/mysql/1.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"数据库"}],["meta",{"property":"og:description","content":"关系型数据库的主要特点有哪些? me: 数据关系 连表查询 ai: 数据以表格的形式存储,每行记录代表一个数据实体,每列属性代表数据实体的一个特征。 强调数据之间的关系,数据可以通过定义主键和外键进行关联。 数据操作通过关系代数和关系演算等关系模型进行。 提供结构化查询语言(SQL),方便对数据的查询、插入、删除和更新。 具有**事务处理(**ACID)的功能,可以保证数据的完整性和一致性。 提供视图、存储过程、触发器等数据库对象,扩展了关系模型的建模能力。 支持数据库规范化,有助于减少数据冗余,提高存储效率。 提供用户权限管理、备份恢复等管理功能。 支持客户端/服务器架构,易于在分布式环境下部署。 成熟可靠,有完善的安全机制。 数据库中的数据冗余是指什么?有哪些缺点? me: 存储空间利用不当，存在小碎片的存储空间不能充分利用/空间占用大 ai: 数据冗余指的是在数据库中的表中出现重复或多余的数据。主要有以下两个方面的缺点: 数据存储空间的浪费 数据冗余会导致重复或无用的数据被存储多次,占用了大量额外的存储空间。特别是在大数据库中,冗余数据会明显增加数据库的体积,增加存储成本。 数据异常的风险 存在冗余数据时,当某一处数据被修改后,相关数据不一定会同步更新,导致数据之间出现不一致的情况。这会降低数据的可靠性和完整性。 此外,数据冗余还可能导致其他问题,比如插入和删除异常、程序设计和操作复杂化等。 为了避免数据冗余,数据库的设计者通常会采用数据库规范化的方法来减少冗余,主要包括第一范式(1NF)、第二范式(2NF)、第三范式(3NF)等规范要求。合理的数据库规范化可以有效减少数据冗余,提高数据的完整性和一致性。 什么是数据库的完整性?有哪几种完整性? me: null ai: 实体完整性:每张表的每一行(即每一个实体)都应该是唯一的,通常通过主键约束来保证。 域完整性: 数据表中的每一列(属性)只允许出现合理的值,每个属性值的范围应该事先定义好。 引用完整性:维护表与表之间的关系,例如外键约束来保证主表中不存在的外键值不能在从表中出现。 用户定义完整性:允许用户根据需要定义或指定需要保证的完整性约束条件。 业务完整性:按业务规则设定数据需要满足的一致性或准确性。 如何理解数据库的三大范式?请简要说明每一范式的含义。 me: 第一范式 去除与主键 第二范式 第三范式 ai: 第一范式(1NF): 属性不可再分 满足1NF的关系Mode中,每个属性值都必须是不可再分的基本值,不允许有重复的属性或多个值在一个属性中。 第二范式(2NF): 完全依赖主键 满足2NF的关系模式中,非主属性必须完全依赖主键,消除1NF基础上产生的部分依赖。 第三范式(3NF): 消除传递依赖 满足3NF的关系模式中,任何非主属性不依赖于其它非主属性,消除2NF基础上产生的传递依赖。 简单来说: 1NF 消除属性的重复组合; 2NF 消除部分依赖; 3NF 消除传递依赖。 数据库索引的作用是什么?哪些字段应该创建索引? me; 在数据量比较大时可以加快对数据的查询 主键 唯一的识别的值 ai; 加速查询和检索速度 索引可以大大减少数据库需要扫描的数据量,使得查询和检索速度能够大幅提升。 2.加速表与表之间的连接 通过在连接字段上进行索引,可以减少连接需要的时间。 3**.加速排序操作** 可以通过索引直接提取排序数据,加快排序速度。 4.加速聚集函数的操作 聚集函数如sum()、max()、min()等在索引列上进行计算时速度会更快。 通常以下字段应该创建索引: 表中经常需要搜索的字段。 经常出现在WHERE子句中的字段。 经常需要排序的字段。 表主键。 频繁被连接的字段。 在查询中与其他索引列组合使用的字段。 什么是数据库事务?事务的四个特征是什么? me: 对多个数据库的操作，执行的方法， /隔离性 原子性 一致性 持久性 ai: 数据库事务(Transaction)是指作为一个单独执行单元的一系列操作,这些操作要么全部成功执行,要么全部不执行。 数据库事务通常具有四个关键特徵,称为 ACID: **原子性(Atomicity)😗*事务是一个不可分割的工作单位,事务中的所有操作要么全部执行成功,要么全部失败回滚。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。事务执行不会破坏数据库数据的完整性和业务逻辑约束。 隔离性(Isolation):多个事务并发执行时,一个事务的执行不应影响其他事务的执行。 持久性(Durability):已提交的事务对数据库的修改应该永久保存在数据库中,不会被回滚。 什么是数据库的锁机制?有哪几种锁? me: 对数据查询访问的限制操作 / 悲观锁 乐观锁 ai: 数据库锁机制是为了保证数据库并发访问的一致性而设计的,它通过对数据加锁来实现多用户对数据库的并发访问控制。 常见的数据库锁主要有以下两种: **共享锁(S锁)😗*允许多个事务对同一数据进行读取操作,防止资源被修改。 排他锁(X锁):只允许一个事务占有数据的排他访问权,防止多个事务同时修改数据。 除此之外,数据库锁可以分为以下几种: 行级锁:对关系表中的某一行加锁。 表级锁:对整张表加锁。 页级锁:对数据表的某个页面加锁。 表空间锁:对表空间中的所有对象加锁。 数据库锁:对整个数据库加锁。 什么是数据库的并发控制?常见的并发控制方法有哪些? me: null ai: 数据库的并发控制是为了保证在多个事务并发执行时不破坏数据库的完整性和一致性而设计的机制。常见的并发控制方法有以下几种: 锁机制:通过在数据上加锁来实现并发控制,如共享锁、排它锁等。 多版本并发控制(MVCC):每次读取都从一个快照读,不加锁。通过在修改时生成新版本的数据行副本来实现。 时间戳序方法:为每一个事务赋予一个唯一的时间戳,事务只能读取时间戳小于自己的时间戳的数据。 乐观并发控制:假设冲突较少,允许事务先执行,但在提交时检查是否违反一致性。 悲观并发控制:假设冲突很多,在操作数据前先加锁,确保操作的一致性。 基于多粒度的锁机制:采用多种粒度的锁来获得更好的并发性。 什么是数据库的故障恢复技术? checkpoint、redo log、undo log之间的关系是? me: 通过对数据库日志，对数据库故障的恢复 / ai: 数据库的故障恢复技术主要包括备份恢复技术、日志恢复技术等。 checkpoint、redo log、undo log三者之间的关系如下: checkpoint:检查点,数据库会定期将缓冲池中的脏页(修改过的数据页)刷新到磁盘上,生成一个检查点。 redo log:重做日志,记录数据库操作引起的数据修改。用于重做或回滚未提交的事务。 undo log:回滚日志,记录数据修改前的旧值。用于事务回滚时撤销对数据库的修改。 当数据库发生故障后,利用checkpoint信息将数据页恢复到故障发生时的最后known good状态。然后利用redo log重做故障后新提交的事务对数据的修改。最后再根据undo log进行未提交事务的回滚操作,直到恢复到故障发生前的状态。 数据库优化的常见手段有哪些? me: 数据库规范化 索引 ai: **SQL语句优化:**通过参数绑定、去除不必要的查询等方式优化查询语句。 数据库结构优化:合理设计表结构,避免冗余,建立索引。 数据库服务器优化:调整数据库内存、并发数等服务器参数。 查询计划优化:选择最优查询路径,如利用索引查询。 数据访问优化:减少客户端与服务器之间交互,使用连接池。 磁盘I/O优化:SEPARATE表空间,RAID技术。 **数据库分区:**通过垂直拆分或水平拆分 way 提高可扩展性。 采用读写分离机制:降低数据库访问压力。 数据库并行处理:如并行查询。 采用数据库缓存:缓存热点数据,减少磁盘I/O。 数据库中的视图有什么作用?视图可以更新数据吗? me: 视图狗都不用 ai: 简化复杂的SQL查询 通过在视图上执行查询,可以将复杂的查询封装和隐藏,使用更简单的查询语法。 ​\\t2保护数据 可以在视图上隐藏表中的部分敏感字段,对用户只开放必要的列。 ​\\t3提高查询性能 视图可以只查询必要的数据列,并且可以利用索引提升性能。 ​\\t4保持数据的一致性 可以在视图上定义计算字段,从而在不同的表中实现一致的数据显示。 ​\\t5实现数据独立 当表结构变更时,只修改视图定义,对访问视图的查询语句无须改动。 对于可更新的视图,可以通过视图实现对基表数据的修改、插入和删除操作。但有些视图由于存在聚合函数等是不可更新的。 什么是数据库的范式设计?为什么需要范式设计? me: 对数据库的属性进行规范化设计 / 减少数据库的冗余 提高数据库查询 优化数据库 ai: 数据库需要范式设计主要有以下原因: 减少数据冗余 范式设计可以识别出不合规范的设计,消除数据冗余,节省存储空间。 避免插入异常 消除非主属性对主属性的部分函数依赖可以避免插入异常。 避免删除异常 消除非主属性对主属性的传递函数依赖可以避免删除异常。 避免更新异常 符合范式的关系模式,非主属性不依赖于其他非主属性,可以避免更新异常。 提高查询性能 减少数据冗余可以提高查询和搜索的性能。 保持数据一致性 符合范式的设计可以保证数据一致性,避免数据操作引起的数据不一致。 方便数据库应用设计 降低数据库复杂度,使数据库结构更清晰简洁,便于开发人员设计和使用。 数据库的主键和唯一键有什么区别? me: 主键 必须唯一性唯一标志 可以作为其他表的外键 唯一键 属性唯一 ai: 主键是一行数据的唯一标识,可以唯一定位一行数据,每张表只能有一个主键。唯一键不是主键,一张表可以有多个唯一键。 主键不允许为空值,唯一键列可以为空值。 主键直接定义在表中。唯一键可以定义在表中,也可以通过唯一索引实现唯一键约束。 主键默认会建立主键索引,数据库系统会自动为主键创建索引。唯一键可以建立唯一索引,也可以不创建。 **主键不允许修改,**除非重建表。唯一键可以修改,但不能重复。 每张表必须定义主键,以标识唯一一行记录。唯一键不是必需的。 一个表可以有多个唯一键,但最多只能有一个主键。 什么是数据库的参照完整性?如何通过外键约束实现参照完整性? me: 忘了 ai: 数据库的参照完整性是指存在外键关系的表之间的数据一致性。它通过外键约束来实现。 外键约束的作用是保证子表数据外键列的值必须来自主表的主键列的值。这样就建立了主表和子表数据之间的链接,保证了主 子 表数据的一致性。 具体实现参照完整性的方法: 在子表添加外键列,其数据类型和主表的主键列一致。 在子表外键列上添加外键约束,约束引用主表的主键列。 指定外键更新和删除时的操作,如级联更新/删除或设置为无动作。 可以设置外键值为null,也可以设置为不允许为空。 数据库的三大设计范式之间有什么关系?为什么要遵守高级范式的设计? me: 三个范式 互相递进 第三范式在第二范式基础上更加要求 / 遵循高级范式可以减少数据冗余 数据操作异常 数据一致性 ai: 数据库的三大范式之间是逐步规范化的关系: 第一范式(1NF)是关系数据库的基础,表的每一列都是不可分割的基本数据项。 第二范式(2NF)在1NF的基础上,非码属性必须完全依赖于候选码,消除非主属性对主码的部分函数依赖。 第三范式(3NF)在2NF基础上,任何非主属性不依赖于其它非主属性,消除传递依赖。 高级范式都是在第三范式的基础上建立的,如BCNF范式等。 遵守高级范式设计数据库的主要理由: 可以避免数据冗余,节省数据存储空间。 将数据结构分解成合理的形式,有利于数据库维护。 减少插入、更新、删除异常的发生。 提高数据查询和访问的效率。 提高程序对数据库的设计和操作的简单性。 方便对数据库的扩展和修改。 提高数据的一致性和完整性。 什么是数据库的**冗余设计?**冗余设计的利与弊是什么? me： 不知道 ai: 数据库冗余设计指在数据库设计中存在一定数据冗余或重复的设计。 冗余设计的利与弊: 利: 提高了数据的完整性和一致性。系统容错能力增强。 提高数据读取效率。多表查询时,冗余数据可以减少连接操作。 提高数据写入效率。允许在少数表中进行冗余存储,以提高写效率。 简化数据库设计,可以利用冗余数据减少复杂的查询。 弊: 数据冗余增加了数据维护的难度。 提高了数据存储空间的需求。 提高了系统设计和开发的难度。需考虑数据同步问题。 增加了数据库插入和更新的问题。 出现数据不一致的可能。 数据库连接的分类有哪些?各有什么特点? me: 使用数据库引擎 使用数据池链接 / 1， 2，数据池连接减少操作次数 ai： 短连接:每次数据库操作后就关闭连接。 特点:连接创建和关闭频繁,资源消耗大,性能较差。 长连接:重复使用同一个数据库连接,对多次数据库操作优化。 特点:减少连接创建和关闭次数,性能较好。但如果长时间不关闭,会占用连接资源。 另外,数据库连接还可以分为: **直接连接:**应用程序直接连接数据库。 特点:简单,无中间层,但不利于管理和拓展。 连接池连接:使用连接池存放数据库连接,应用程序从池中获取连接。 特点:可以重用连接,提高效率。但需要注意池容量控制。 什么是数据库事务的ACID特性?缺少某一特性会造成什么问题? me: 隔离性 一致性 原子性 持久性 / 缺少会造成数据不一致 事务失效 ai: 原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。 隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。 持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。 如果缺少某一特性: 缺少原子性:事务执行可能只部分成功,使数据处于不一致状态。 缺少一致性:事务执行使数据库从一个一致状态变成不一致状态。 缺少隔离性:事务并发执行相互影响,数据错误。 缺少持久性:系统故障后,已提交事务的修改可能丢失 选择使用何种数据库索引类型的判断标准有哪些? me： 不知道 ai: 查询方式 - 根据查询中条件列的判断,选择合适的索引,如唯一索引、普通索引、前缀索引等。 查询性能 - 根据查询的性能要求,如查询范围的大小,选择聚簇索引或非聚簇索引。 数据量 - 数据量小可以考虑使用唯一索引;数据量大则应优先考虑普通索引。 数据变更频率 - 变更频繁的数据字段不太适合创建索引。静态数据字段可优先考虑。 索引维护成本 - 索引能够带来查询性能提升需要与维护索引的成本作比较。 索引限制 - 一些数据库对索引的 key 长度、数量都有限制,在设计时需要注意。 数据关系 - 与查询条件 columnist 相关联的数据字段优先考虑建立索引。 实际执行查询计划 - 可以比较真实的执行计划来决定创建哪些索引。 数据库的性能优化手段中,哪些属于SQL优化,哪些属于硬件优化? me; 索引优化 分页 属于sql //硬件优化 ai: SQL优化主要包括: SQL语句优化 - 使用EXPLAIN检查执行计划,优化查询方式,避免全表扫描等。 索引优化 - 加入适当的索引,减少查询需要扫描的数据。 数据库结构优化 - 规范设计表和库,避免冗余索引和查询。 参数优化 - 配置合理的缓存,连接数等数据库参数。 硬件优化主要包括: 升级CPU、内存 - 提高数据库服务器的处理能力。 使用SSD - 减少I/O等待时间。 分库分表 - 减少单库单表数据量,提高查询效率。 采用更高效的磁盘IO方式 - 如RAID 10。 选择合适的存储引擎 - 如InnoDB, MyISAM等。 客户端连接优化 - 连接池,本地缓存等。 数据库三范式有什么作用?不符合三范式会带来哪些问题? me: 规范化数据库结构 减少数据冗余 不符合 可能造成数据冗余 数据异常 数据库操作异常 ai: 数据库三范式的主要作用是: 避免数据冗余和异常 - 三范式要求数据表中的每个列都和主键直接相关,从而避免重复和多余的数据。 提高查询效率 - 三范式将数据划分为多张功能独立的表,而非塞进一个大表,提高查询速度。 降低更新异常 - 更新时只需要更新一处,不会出现数据不一致的情况。 提高系统扩展性 - 三范式使表的结构合理独立,易于扩展。 不符合三范式主要会带来以下问题: 数据冗余和数据不一致 - 同样的数据出现在多个表中,数据重复,容易出现不一致。 插入异常 - 在一个表中插入数据,需要同步插入其他表,否则产生数据不一致。 删除异常 - 删除操作可能会删掉其他表还在使用的数据。 更新异常 - 同一数据不同表的更新可能不一致。 系统维护困难 - 字段增删改都会影响多张表,维护复杂。 数据库事务的四个特征是:原子性、一致性、隔离性和持久性。请解释这四个特征的意义。 原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。 一致性(Consistency):事务执行前后,数据库都保持一致性状态。 隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。 持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。 数据库的并发控制有哪几种常见方法?各自的优缺点是什么? me: 加锁{表锁 行锁 } 事务 / 加锁可以并发数据安全 效率慢 不加锁可能不安全但效率快 ai: 锁机制 优点:并发冲突控制能力强,保证数据一致性。 缺点:锁的获取和释放有较大开销,会降低并发性能。锁模式不当还可能导致死锁。 多版本并发控制(MVCC) 优点:不会阻塞读操作,提高了读性能和并发性。 缺点:需要额外空间存储多版本数据,写操作开销也较大。 时间戳 ordering 优点:无需锁及多版本,并发控制简单。 缺点:只适用于读多写少的场景,可扩展性较差。 乐观锁 优点:不阻塞读操作,无死锁问题。 缺点:写冲突时会重试和回滚,成功率不高。 分布式事务 优点:支持分布式场景的并发控制。 缺点:实现复杂,资源开销大,不支持高并发。 数据库的锁有共享锁和排它锁,这两种锁的区别是什么?各自使用场景? me: 共享锁指进程运行所需要资源可以被其他进程所共享使用 排他锁指进程所需资源仅可自己使用其他进程无法请求已使用的资源 ai: 兼容性不同： S锁与S锁兼容，可以多个事务同时加S锁。 X锁与X锁和S锁都不兼容，加X锁时其他事务不能再加任何锁。 加锁读写能力不同： S锁只允许读取数据，不允许修改。 X锁既可以读取也可以修改数据。 加锁粒度不同： S锁通常是行级锁，只锁定查找到的行。 X锁一般是表级锁，会锁定整张表。 根据这些特性，可以将它们用于不同的事务场景： S锁的使用场景： S锁适用于只读事务，因为它们可以并发地加锁，从而提高并发度，允许多个事务同时读取相同的数据。这对于读取频繁、但修改较少的场景非常有用，例如报表查询等。 X锁的使用场景： X锁适用于写事务，因为它提供了互斥访问，确保在一个事务修改数据时，其他事务无法访问或修改相同的数据。这对于需要保证数据一致性和避免冲突的写操作非常重要，例如更新、删除等操作。 读写混合事务的处理： 在某些情况下，可能需要同时进行读取和写入操作。在这种情况下，可以先加X锁，以确保数据的独占访问权。然后，在需要读取的行上加S锁，以便在读取过程中保持一致性。最后，在完成操作后，释放所有锁。 共享锁（Shared Lock）： 共享锁允许多个事务同时获取同一个数据项的锁，以进行读操作。多个事务可以同时持有共享锁，但不能与排他锁同时存在。 共享锁之间是兼容的，这意味着一个事务可以在另一个事务持有共享锁的同时获取相同数据项的共享锁。 共享锁用于读取操作，可以并发地读取数据，从而提高并发性能。 适用场景：当多个事务需要读取相同的数据项时，可以使用共享锁，以避免冲突并允许并发读取操作。 排他锁（Exclusive Lock）： 排他锁在事务需要进行写操作时获取，确保数据在写操作期间不会被其他事务读取或写入。 排他锁与其他任何锁（包括共享锁和排他锁）都不兼容，这意味着当一个事务持有排他锁时，其他事务不能获取相同数据项的任何锁。 排他锁用于写操作，保证数据的独占性，避免并发写入冲突，从而维护数据的一致性。 适用场景：当事务需要对数据进行写操作（修改、删除等）时，应该获取排他锁，以确保数据的一致性和完整性。 在实际应用中，根据事务的需求和操作类型，可以选择适当的锁策略。有时候，也会出现读写混合的场景，这时可能需要在读操作时获取共享锁，在写操作时获取排他锁，以实现合适的并发控制和数据保护。 为什么需要数据库的事务处理?事务能够保证数据库的一致性吗? me: 对数据库需要并行操作 /事务可以保持一致性 ai: 将多条相关SQL作为一个不可分割的工作单元执行,以保证数据的完整性。 提供将数据库从一致性状态变换到另一致性状态的机制。 在并发访问时,保证事务之间的隔离性。 在系统故障后,恢复数据库状态以保持数据一致性。 但是,事务不能完全保证数据库的一致性。原因如下: 事务只能保证数据库从一个一致状态转变到另一个一致状态,不能防止一开始数据库状态就不一致。 长时间事务会降低并发性,也无法完全隔离事务之间的影响。 硬件故障也可能导致事务处理失败,无法恢复数据库一致状态。 错误或不合理的事务处理逻辑同样可能破坏数据一致性。 数据库的冗余对性能有什么影响?如何在冗余与性能间做平衡? me: 数据库冗余导致数据异常 性能读写降低，数据库操作异常数据不安全不一致 / 合理规划数据库设计 结合实际使用不同的范式 ai: 写入性能 - 冗余会导致每个写操作需要更新多个副本,降低写入速度。 读取性能 - 适当冗余可以提高读取速度,因为读取可以分散在多个副本上。但冗余过高会导致缓存浪费和磁盘空间浪费,降低效率。 内存占用 - 数据冗余会增加内存占用。 数据不一致 - 多个副本存在数据不一致的可能,需要额外的完整性检查。 平衡冗余和性能可以从以下几个方面进行: 只对**最常读取和最重要的数据建立冗余,**不要对全部数据均创建冗余。 控制冗余副本的数量,一般2-3个副本就足够提供读取性能优势。过多冗余反而降低效率。 采用异步或延迟的冗余策略,减小冗余对写入的影响。 对冗余数据进行分区,避免单点热点问题。 利用缓存来提高读取速度,而不是单纯依赖冗余。 对冗余数据进行压缩,减少存储和内存开销。 加强系统间数据一致性检测与同步机制,降低冗余带来的不一致风险。 配合业务特点采用适当的冗余策略,如主从式、份额式等。 数据库优化中,对查询语句优化和对数据库表优化有何不同?应优先考虑哪些方面? me: 查询语句优化 --&gt; 在查询过程中更快或准确查询 通过索引 条件 连表等操作 数据库表优化 --&gt; 在数据表建立 对数据进行规范化 分表 分页 优先考虑语句优化 比较直接 对数据库表优化 可能比较麻烦 ai: 查询语句优化 重点优化SQL查询逻辑,使查询更高效 如添加索引、SQL优化、查询重写等 目的是消除不必要的查询,减少扫描行数 数据库表优化 重点优化表结构与设计,减少存储冗余 如正规化、拆分表、垂直拆分等 目的是减少储存空间,提高CRUD效率 优先考虑的方面: 对重要且频繁的查询语句进行优化 对大表、重要业务表的结构设计优化 先从查询语句入手,对症下药 查询无法优化时再考虑表结构调整 选择使用物理外键与逻辑外键,应该考量哪些因素?两者的优缺点? me: null ai: 数据完整性需求 物理外键通过约束可以保证引用完整性,删除/更新主表数据时限制外键变化。 逻辑外键不能自动保证引用完整性,需要通过应用程序来维护。 查询性能需求 物理外键会对主表创建索引,可提高联表查询速度。 逻辑外键没有索引,联表查询需要全表扫描,较慢。 数据变更需求 物理外键的约束会限制主表数据的删除与更新。 逻辑外键没有这个限制,主表变更更灵活。 系统性能限制 物理外键的约束会增加插入/更新时的开销。 逻辑外键的开销较小。 物理外键的优点是保证数据一致性,提高查询速度,但会限制主表变更。 逻辑外键的优点是变更灵活性高,系统开销较小,但无法自动保证引用完整性。 数据库索引在提高查询速度的同时,会带来哪些问题?该如何权衡? me: 额外内存开销 ai: 写入开销增加 索引会增加数据库写入数据时的开销。所有索引字段的值都需要同步更新。 额外存储空间占用 索引需要额外的存储空间来保存索引结构和索引值。 索引维护成本 修改表结构时需要重新建立索引,也需要定期维护索引。 可能导致查询优化器依赖索引 存在索引并不一定被查询优化器使用,可能导致非预期的查询计划。 降低部分写操作的性能 索引可以加速查询,但会降低部分INSERT,UPDATE和DELETE的性能。 因此,建立索引需要权衡其带来的收益和成本。一般的考虑原则是: 仅对常用字段建立索引,不要对很少使用或不作为查询条件的字段建立索引。 删除不再使用或很少使用的索引,不定期评估索引的使用效果。 对高并发的读写操作要谨慎建立索引。 对TEXT、BLOB等大字段尽量不要创建索引。 在建立复合索引时考虑列的顺序对性能的影响。 对于大表要建立部分索引而不是全表索引。 数据库视图的作用有哪些?使用视图可能带来的问题是什么?应如何应对? me: 视图狗都不用 ai: 数据库范式设计的目标是什么?为什么需要遵循范式化设计? me: 数据库性能 维护 变好 ai； 避免数据冗余和异常,提高数据的完整性和一致性。 降低数据维护和存储成本。 提高查询性能。 确保数据库结构灵活扩展,便于应用程序开发。 遵循范式化设计主要有以下原因: 减少数据冗余,避免同样的数据出现在多个表中,占用大量存储空间。 避免插入、更新异常,如无法正常删除的数据。这些异常会导致数据库结构混乱。 降低维护成本,不需要在多个表中同步修改冗余数据。 提高查询效率,不需要在多表中查询同样的数据。 提高可扩展性,系统变更不会影响数据库整体结构。 有利于未来优化,如拆分表等。 便于程序开发,不同模块访问不同表,业务清晰。 解释SQL语句的优化原则,有哪些需要注意的点? ai: 尽量减少查询的数据行数,使用WHERE条件进行过滤。 尽量减少JOIN表的数量,避免不必要的连接查询。 对经常查询的字段建立索引,提高查询效率。 避免在WHERE子句中使用NOT IN和&lt;&gt;操作符,它们难以优化。 使用白名单限制查询范围,避免全表扫描。 对文本字段应加引号限制前缀wildcard查询。 对统计类查询使用GROUP BY而不是DISTINCT去重。 避免数据类型的隐式转换,这会降低查询效率。 对多表JOIN查询,保证ON和WHERE条件列有索引。 编写存储过程提高重复查询的效率。 对批量插入数据操作使用事务提高效率。 对动态SQL参数使用绑定变量提高稳定性。 避免使用游标或联合查询,它们执行效率较低。 对复杂查询分步进行,逐步优化。 数据库连接池的作用是什么?使用连接池可能带来哪些问题? me: 对数据库操作时，避免多次链接数据库，避免每次数据操作需要重新链接数据库 AI: 数据库连接池的主要作用是提高数据库连接的使用效率。 **重用存在的连接,**避免频繁创建和关闭连接的开销。 管理连接对象数目,避免过多连接耗尽资源。 实现连接的线程安全共享。 提供连接的待命池,加快获取连接的速度。 使用连接池可能带来以下问题: 配置不当可能造成连接池溢出、泄漏等。 多线程环境下需要实现连接管理的同步机制。 连接长时间闲置导致连接超时。 大量连接创建可能带来内存压力。 连接没有按需释放,浪费资源。 连接长时间占用,出现瓶颈。 选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点? 如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些? 讲解数据库故障转移与负载均衡的工作原理,两者有何不同? 数据库主备服务器架构的工作原理是什么?主备服务器之间如何同步数据? 讲解行锁、表锁、意向锁的使用场景和实现机制。 数据库数据如何设计维度建模与事实建模?二者有何优势? 什么是数据库的无损调整?如何实现数据库结构的无损调整? 数据库事务隔离级别有哪些?各个隔离级别的区别是什么? 讲解InnoDB和MyISAM存储引擎的区别与应用场景。 数据库空间数据型如何设计合理的空间索引提高查询效率? 什么是数据库的慢查询?如何定位和优化慢查询? 什么是数据库死锁?如何避免数据库死锁的发生? 讲解关系型数据库与NoSQL数据库的区别,两者各自的应用场景。 讲解SQL注入攻击的原理,如何通过参数化查询防止SQL注入。 数据库服务器内存不足时应该如何调优?有哪些可优化方向? 设计一个支持百万级流量的数据库架构,需要考虑哪些方面? 关系型数据库与文档型数据库的区别在哪里?各自的典型产品和应用场景? 数据库的存储引擎有哪些?各有什么特点? 数据库索引的底层实现原理是什么?B+树与B树的区别在哪里? 讲解数据库事务的隔离机制,包括脏读、不可重复读、幻读的概念。 什么是数据库范式?解释第一范式、第二范式、第三范式的定义。 数据库优化中,业务层优化和SQL语句优化的focal区别是什么? 选择增量备份与完全备份应考虑哪些因素?两者分别适用于哪些场景? 解释数据库连接的集中式与分布式部署方式,讲述两种方案的利弊。 数据库查询优化中,应该优先考虑查询缓存还是索引?理由是什么? 讲解数据库主键和唯一索引的区别,各自的使用场景。 为什么需要数据库事务?事务如何保证数据库的ACID特性? 选择MySQL存储引擎时,应考虑哪些因素?各存储引擎的应用场景? 解析SQL语句的优化原则,有哪些需要注意的点? 设计支持大量并发的数据库架构需要考虑哪些方面? 什么是数据库连接池?使用连接池带来哪些好处? 讲解三种数据库连接方案:长连接、短连接、连接池。 数据库的水平拆分与垂直拆分有何区别?各自的使用场景是? 设计一个支持百万级流量的数据库架构,需要考虑哪些方面? 选择使用物理外键与逻辑外键,应该考量哪些因素?两者的优缺点? 如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些? 数据库事务有哪几种隔离级别?各自的优缺点是什么? 讲解数据库三大范式的意义,以及如何实现范式设计。 什么是数据库的FILESTREAM技术?有什么优点和使用场景? 解析主从复制和主主复制的工作原理、优缺点和适用场景。 数据库优化中,SQL语句优化和索引优化的重要程度如何区分? 讲解行锁和表锁的使用场景、加锁机制、优缺点。 如何查看和分析MySQL的慢查询日志? 什么是MVCC机制?InnoDB如何通过MVCC实现事务隔离? 选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点? 什么是数据库范式?为什么要进行范式化设计? 讲解NoSQL数据库的特点,列举几种常见的NoSQL数据库。 解析数据库故障转移和负载均衡的工作机制、区别和应用场景。 MongoDB和Redis的区别在哪里?各自的应用场景有哪些? 数据库连接池的工作原理是什么?使用连接池的优缺点? 如何 diagnoase 和优化一个慢SQL查询?需要注意哪些方面? 设计一个支持百万用户同时在线的数据库架构,需要考虑哪些方面? 解析SQL和NoSQL数据库的区别,以及各自的应用场景。 讲解InnoDB和MyISAM这两种存储引擎的特点和区别。 什么是数据库范式?为什么需要进行范式化设计? 解析行锁、表锁、意向锁的加锁机制、使用场景和优缺点。 讲解事务的ACID特性,以及事务的隔离级别和实现。 解析B+树和B树的区别,以及为什么索引通常选择B+树。 讲解三种常见的数据库拆分方案:垂直拆分、水平拆分、分库分表。 数据仓库与数据库有哪些区别?数据仓库的优点是什么? 如何设计一个支持地理位置查询的数据库架构方案? 什么是数据库的无损扩容?应该如何实现? 解析大型数据库系统的容灾技术,需要考虑哪些方面? 如何防止和解决数据库中的死锁问题? 什么是数据库的主从复制?如何实现 MySQL 的多源复制? 解析OLTP系统和OLAP系统的特点和区别。 如何为数据库服务器优化内存配置?需要关注哪些参数?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xss"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xss\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":38.29,"words":11486},"filePathRelative":"other/mysql/1.md","localizedDate":"2023年12月11日","excerpt":"<hr>\\n<hr>\\n<ol>\\n<li>\\n<p>关系型数据库的主要特点有哪些?</p>\\n<p>me:</p>\\n<p>数据关系 连表查询</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>数据以表格的形式存储</strong>,每行记录代表一个数据实体,每列属性代表数据实体的一个特征。</li>\\n<li>强调数据之间的关系,数据可以通过定义<strong>主键和外键</strong>进行关联。</li>\\n<li>数据操作通过关系代数和关系演算等关系模型进行。</li>\\n<li>提供<strong>结构化查询语言(SQL)</strong>,方便对数据的查询、插入、删除和更新。</li>\\n<li>具有**事务处理(**ACID)的功能,可以保证数据的完整性和一致性。</li>\\n<li>提供视图、存储过程、触发器等<strong>数据库对象</strong>,扩展了关系模型的建模能力。</li>\\n<li>支持数据库规范化,有助于减少数据冗余,提高存储效率。</li>\\n<li>提供用户权限管理、备份恢复等管理功能。</li>\\n<li>支持客户端/服务器架构,易于在分布式环境下部署。</li>\\n<li>成熟可靠,有完善的安全机制。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库中的数据冗余是指什么?有哪些缺点?</p>\\n<p>me:</p>\\n<p>存储空间利用不当，存在小碎片的存储空间不能充分利用/空间占用大</p>\\n<p>ai:</p>\\n<p>数据冗余指的是在数据库中的表中出现<strong>重复或多余的数据</strong>。主要有以下两个方面的缺点:</p>\\n<ol>\\n<li>数据存储<strong>空间的浪费</strong></li>\\n</ol>\\n<p>数据冗余会导致重复或无用的数据被存储多次,占用了大量额外的存储空间。特别是在大数据库中,冗余数据会明显增加数据库的体积,增加存储成本。</p>\\n<ol>\\n<li><strong>数据异常的风险</strong></li>\\n</ol>\\n<p>存在冗余数据时,当某一处数据被修改后,相关数据不一定会同步更新,导致数据之间出现不一致的情况。这会降低数据的可靠性和完整性。</p>\\n<p>此外,数据冗余还可能导致其他问题,比如<strong>插入和删除异常、程序设计和操作复杂化</strong>等。</p>\\n<p>为了避免数据冗余,数据库的设计者通常会采用<strong>数据库规范化的方法来减少冗余</strong>,主要包括第一范式(1NF)、第二范式(2NF)、第三范式(3NF)等规范要求。合理的数据库规范化可以有效减少数据冗余,提高数据的完整性和一致性。</p>\\n</li>\\n<li>\\n<p>什么是数据库的完整性?有哪几种完整性?</p>\\n<p>me:</p>\\n<p>null</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>实体完整性</strong>:每张表的每一行(即每一个<strong>实体)都应该是唯一</strong>的,通常通过主键约束来保证。</li>\\n<li><strong>域完整性</strong>: 数据表中的每一列(<strong>属性)只允许出现合理的值</strong>,每个属性值的范围应该事先定义好。</li>\\n<li><strong>引用完整性</strong>:维护表与表之间的关系,例如外键约束来保证主表中不存在的外键值不能在从表中出现。</li>\\n<li><strong>用户定义完整性</strong>:允许用户根据需要定义或指定需要保证的完整性约束条件。</li>\\n<li><strong>业务完整性</strong>:按业务规则设定数据需要满足的一致性或准确性。</li>\\n</ol>\\n</li>\\n<li>\\n<p>如何理解数据库的三大范式?请简要说明每一范式的含义。</p>\\n<p>me:</p>\\n<p>第一范式  去除与主键</p>\\n<p>第二范式</p>\\n<p>第三范式</p>\\n<p>ai:</p>\\n<p>第一范式(1NF):</p>\\n<p><strong>属性不可再分</strong> 满足1NF的关系Mode中,每个属性值都必须是不可再分的基本值,不允许有重复的属性或多个值在一个属性中。</p>\\n<p>第二范式(2NF):</p>\\n<p><strong>完全依赖主键</strong> 满足2NF的关系模式中,非主属性必须完全依赖主键,消除1NF基础上产生的部分依赖。</p>\\n<p>第三范式(3NF):</p>\\n<p><strong>消除传递依赖</strong> 满足3NF的关系模式中,任何非主属性不依赖于其它非主属性,消除2NF基础上产生的传递依赖。</p>\\n<p>简单来说:</p>\\n<p>1NF 消除属性的重复组合;</p>\\n<p>2NF 消除部分依赖;</p>\\n<p>3NF 消除传递依赖。</p>\\n</li>\\n<li>\\n<p>数据库索引的作用是什么?哪些字段应该创建索引?</p>\\n<p>me;</p>\\n<p>在数据量比较大时可以加快对数据的查询   主键  唯一的识别的值</p>\\n<p>ai;</p>\\n<ol>\\n<li><strong>加速查询和检索速度</strong></li>\\n</ol>\\n<p>索引可以大大减少数据库需要扫描的数据量,使得查询和检索速度能够大幅提升。</p>\\n<p>2.<strong>加速表与表之间的连接</strong></p>\\n<p>通过在连接字段上进行索引,可以减少连接需要的时间。</p>\\n<p>3**.加速排序操作**</p>\\n<p>可以通过索引直接提取排序数据,加快排序速度。</p>\\n<p>4.加速聚集函数的操作</p>\\n<p>聚集函数如sum()、max()、min()等在索引列上进行计算时速度会更快。</p>\\n<p>通常以下字段应该创建索引:</p>\\n<ol>\\n<li>表中<strong>经常需要搜索的</strong>字段。</li>\\n<li><strong>经常出现在WHERE子句中的字段</strong>。</li>\\n<li>经常需要<strong>排序的字段</strong>。</li>\\n<li><strong>表主键</strong>。</li>\\n<li>频繁被连接的字段。</li>\\n<li>在查询中与其他索引列组合使用的字段。</li>\\n</ol>\\n</li>\\n<li>\\n<p>什么是数据库事务?事务的四个特征是什么?</p>\\n<p>me:</p>\\n<p>对多个数据库的操作，执行的方法，  /隔离性 原子性 一致性 持久性</p>\\n<p>ai:</p>\\n<p>数据库事务(Transaction)是指作为<strong>一个单独执行单元的一系列操作,这些操作要么全部成功执行,要么全部不执行</strong>。</p>\\n<p>数据库事务通常具有四个关键特徵,称为 ACID:</p>\\n<ol>\\n<li>**原子性(Atomicity)😗*事务是一个不可分割的工作单位,事务中的所有操作要么全部执行成功,要么全部失败回滚。</li>\\n<li><strong>一致性(Consistency)</strong>:事务执行前后,数据库都保持一致性状态。事务执行不会破坏数据库数据的完整性和业务逻辑约束。</li>\\n<li><strong>隔离性(Isolation)</strong>:多个事务并发执行时,一个事务的执行不应影响其他事务的执行。</li>\\n<li><strong>持久性(Durability)</strong>:已提交的事务对数据库的修改应该永久保存在数据库中,不会被回滚。</li>\\n</ol>\\n</li>\\n<li>\\n<p>什么是数据库的锁机制?有哪几种锁?</p>\\n<p>me:</p>\\n<p>对数据查询访问的限制操作 / 悲观锁 乐观锁</p>\\n<p>ai:\\n数据库锁机制是为了<strong>保证数据库并发访问的一致性而设计</strong>的,它通过对数据加锁来<strong>实现多用户对数据库的并发访问</strong>控制。</p>\\n<p>常见的数据库锁主要有以下两种:</p>\\n<ol>\\n<li>**共享锁(S锁)😗*允许多个事务对同一数据进行读取操作,防止资源被修改。</li>\\n<li><strong>排他锁(X锁)</strong>:只允许一个事务占有数据的排他访问权,防止多个事务同时修改数据。</li>\\n</ol>\\n<p>除此之外,数据库锁可以分为以下几种:</p>\\n<ul>\\n<li>行级锁:对关系表中的某一行加锁。</li>\\n<li>表级锁:对整张表加锁。</li>\\n<li>页级锁:对数据表的某个页面加锁。</li>\\n<li>表空间锁:对表空间中的所有对象加锁。</li>\\n<li>数据库锁:对整个数据库加锁。</li>\\n</ul>\\n</li>\\n<li>\\n<p>什么是数据库的并发控制?常见的并发控制方法有哪些?</p>\\n<p>me:</p>\\n<p>null</p>\\n<p>ai:</p>\\n<p>数据库的并发控制是为了保证在<strong>多个事务并发执行</strong>时<strong>不破坏数据库的完整性和一致性而设计的机制</strong>。常见的并发控制方法有以下几种:</p>\\n<ol>\\n<li>锁机制:通过在数据上加锁来实现并发控制,如共享锁、排它锁等。</li>\\n<li>多版本并发控制(MVCC):每次读取都从一个快照读,不加锁。通过在修改时生成新版本的数据行副本来实现。</li>\\n<li>时间戳序方法:为每一个事务赋予一个唯一的时间戳,事务只能读取时间戳小于自己的时间戳的数据。</li>\\n<li>乐观并发控制:假设冲突较少,允许事务先执行,但在提交时检查是否违反一致性。</li>\\n<li>悲观并发控制:假设冲突很多,在操作数据前先加锁,确保操作的一致性。</li>\\n<li>基于多粒度的锁机制:采用多种粒度的锁来获得更好的并发性。</li>\\n</ol>\\n</li>\\n<li>\\n<p>什么是数据库的故障恢复技术? checkpoint、redo log、undo log之间的关系是?</p>\\n<p>me:</p>\\n<p>通过对数据库日志，对数据库故障的恢复 /</p>\\n<p>ai:</p>\\n<p>数据库的故障恢复技术主要包括<strong>备份恢复技术、日志恢复技术</strong>等。</p>\\n<p>checkpoint、redo log、undo log三者之间的关系如下:</p>\\n<ol>\\n<li>checkpoint:<strong>检查点</strong>,数据库会定期将缓冲池中的脏页(修改过的数据页)刷新到磁盘上,生成一个检查点。</li>\\n<li>redo log:<strong>重做日志</strong>,记录数据库操作引起的数据修改。用于重做或回滚未提交的事务。</li>\\n<li>undo log:<strong>回滚日志</strong>,记录数据修改前的旧值。用于事务回滚时撤销对数据库的修改。</li>\\n</ol>\\n<p>当数据库发生故障后,利用checkpoint信息将数据页恢复到故障发生时的最后known good状态。然后利用redo log重做故障后新提交的事务对数据的修改。最后再根据undo log进行未提交事务的回滚操作,直到恢复到故障发生前的状态。</p>\\n</li>\\n<li>\\n<p>数据库优化的常见手段有哪些?</p>\\n<p>me:</p>\\n<p>数据库规范化 索引</p>\\n<p>ai:</p>\\n<ol>\\n<li>**SQL语句优化:**通过参数绑定、去除不必要的查询等方式优化查询语句。</li>\\n<li><strong>数据库结构优化</strong>:合理设计表结构,避免冗余,建立索引。</li>\\n<li>数据库服务器优化:调整数据库内存、并发数等服务器参数。</li>\\n<li><strong>查询计划优化</strong>:选择最优查询路径,如利用<strong>索引查询</strong>。</li>\\n<li>数据访问优化:减少客户端与服务器之间交互,使用连接池。</li>\\n<li>磁盘I/O优化:SEPARATE表空间,RAID技术。</li>\\n<li>**数据库分区:**通过垂直拆分或水平拆分 way 提高可扩展性。</li>\\n<li>采用读写<strong>分离机制</strong>:降低数据库访问压力。</li>\\n<li>数据库<strong>并行处理</strong>:如并行查询。</li>\\n<li>采用数据库缓存:缓存热点数据,减少磁盘I/O。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库中的视图有什么作用?视图可以更新数据吗?</p>\\n<p>me:</p>\\n<p>视图狗都不用</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>简化复杂的SQL查询</strong></li>\\n</ol>\\n<p>通过在视图上执行查询,可以将复杂的查询封装和隐藏,使用更简单的查询语法。</p>\\n<p>​\\t2<strong>保护数据</strong></p>\\n<p>可以在视图上隐藏表中的部分敏感字段,对用户只开放必要的列。</p>\\n<p>​\\t3<strong>提高查询性能</strong></p>\\n<p>视图可以只查询必要的数据列,并且可以利用索引提升性能。</p>\\n<p>​\\t4<strong>保持数据的一致性</strong></p>\\n<p>可以在视图上定义计算字段,从而在不同的表中实现一致的数据显示。</p>\\n<p>​\\t5<strong>实现数据独立</strong></p>\\n<p>当表结构变更时,只修改视图定义,对访问视图的查询语句无须改动。</p>\\n<p><strong>对于可更新的视图</strong>,可以通过视图实现对基表数据的修改、插入和删除操作。但<strong>有些视图由于存在聚合函数等是不可更新的。</strong></p>\\n</li>\\n<li>\\n<p>什么是数据库的范式设计?为什么需要范式设计?</p>\\n<p>me:</p>\\n<p>对数据库的属性进行规范化设计  /  减少数据库的冗余  提高数据库查询  优化数据库</p>\\n<p>ai:</p>\\n<p>数据库需要范式设计主要有以下原因:</p>\\n<ol>\\n<li><strong>减少数据冗余</strong></li>\\n</ol>\\n<p>范式设计可以识别出不合规范的设计,消除数据冗余,节省存储空间。</p>\\n<ol>\\n<li>避免插入异常</li>\\n</ol>\\n<p>消除非主属性对主属性的部分函数依赖可以避免插入异常。</p>\\n<ol>\\n<li>避免删除异常</li>\\n</ol>\\n<p>消除非主属性对主属性的传递函数依赖可以避免删除异常。</p>\\n<ol>\\n<li>避免更新异常</li>\\n</ol>\\n<p>符合范式的关系模式,非主属性不依赖于其他非主属性,可以避免更新异常。</p>\\n<ol>\\n<li>提高查询性能</li>\\n</ol>\\n<p>减少数据冗余可以提高查询和搜索的性能。</p>\\n<ol>\\n<li><strong>保持数据一致性</strong></li>\\n</ol>\\n<p>符合范式的设计可以保证数据一致性,避免数据操作引起的数据不一致。</p>\\n<ol>\\n<li>方便数据库应用设计</li>\\n</ol>\\n<p>降低数据库复杂度,使数据库结构更清晰简洁,便于开发人员设计和使用。</p>\\n</li>\\n<li>\\n<p>数据库的主键和唯一键有什么区别?</p>\\n<p>me:</p>\\n<p>主键 必须唯一性唯一标志 可以作为其他表的外键 唯一键 属性唯一</p>\\n<p>ai:</p>\\n<ol>\\n<li>主键是<strong>一行数据的唯一标识,可以唯一定位一行数据</strong>,每张表只能有一个主键。唯一键不是主键,一张表可以有多个唯一键。</li>\\n<li>主键<strong>不允许为空值</strong>,唯一键列可以为空值。</li>\\n<li>主键直接定义在表中。唯一键可以定义在表中,也可以通过唯一索引实现唯一键约束。</li>\\n<li>主键默认会建立<strong>主键索引</strong>,数据库系统会自动为主键创建索引。唯一键可以建立唯一索引,也可以不创建。</li>\\n<li>**主键不允许修改,**除非重建表。<strong>唯一键可以修改,但不能重复</strong>。</li>\\n<li>每张表<strong>必须定义主键</strong>,以标识唯一一行记录。<strong>唯一键不是必需的</strong>。</li>\\n<li><strong>一个表可以有多个唯一键,但最多只能有一个主键。</strong></li>\\n</ol>\\n</li>\\n<li>\\n<p>什么是数据库的<strong>参照完整性?<strong>如何通过</strong>外键</strong>约束实现参照完整性?</p>\\n<p>me:</p>\\n<p>忘了</p>\\n<p>ai:</p>\\n<p>数据库的参照完整性是指存在<strong>外键关系的表之间的数据一致性</strong>。它通过外键约束来实现。</p>\\n<p>外键约束的作用是保证子表数据外键列的值必须来自主表的主键列的值。这样就建立了主表和子表数据之间的链接,保证了主 子 表数据的一致性。</p>\\n<p>具体实现参照完整性的方法:</p>\\n<ol>\\n<li>在子表添加外键列,其数据类型和主表的主键列一致。</li>\\n<li>在子表外键列上添加外键约束,约束引用主表的主键列。</li>\\n<li>指定外键更新和删除时的操作,如级联更新/删除或设置为无动作。</li>\\n<li>可以设置外键值为null,也可以设置为不允许为空。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库的三大设计范式之间有什么关系?为什么要遵守高级范式的设计?</p>\\n<p>me:</p>\\n<p>三个范式 互相递进  第三范式在第二范式基础上更加要求  /   遵循高级范式可以减少数据冗余 数据操作异常 数据一致性</p>\\n<p>ai:</p>\\n<p>数据库的三大范式之间是逐步规范化的关系:</p>\\n<ol>\\n<li>第一范式(1NF)是关系数据库的基础,表的每一列都是不可分割的基本数据项。</li>\\n<li>第二范式(2NF)在1NF的基础上,非码属性必须完全依赖于候选码,消除非主属性对主码的部分函数依赖。</li>\\n<li>第三范式(3NF)在2NF基础上,任何非主属性不依赖于其它非主属性,消除传递依赖。</li>\\n</ol>\\n<p>高级范式都是在第三范式的基础上建立的,如BCNF范式等。</p>\\n<p>遵守高级范式设计数据库的主要理由:</p>\\n<ol>\\n<li>可以避免数据冗余,节省数据存储空间。</li>\\n<li>将数据结构分解成合理的形式,有利于数据库维护。</li>\\n<li>减少插入、更新、删除异常的发生。</li>\\n<li>提高数据查询和访问的效率。</li>\\n<li>提高程序对数据库的设计和操作的简单性。</li>\\n<li>方便对数据库的扩展和修改。</li>\\n<li>提高数据的一致性和完整性。</li>\\n</ol>\\n</li>\\n<li>\\n<p>什么是数据库的**冗余设计?**冗余设计的利与弊是什么?</p>\\n<p>me：</p>\\n<p>不知道</p>\\n<p>ai:</p>\\n<p>数据库冗余设计指在<strong>数据库设计中存在一定数据冗余或重复的设计</strong>。</p>\\n<p>冗余设计的利与弊:</p>\\n<p>利:</p>\\n<ol>\\n<li>提高了数据的完整性和一致性。<strong>系统容错能力增强</strong>。</li>\\n<li>提高数据读取效率。多表查询时,冗余数据可以<strong>减少连接操作。</strong></li>\\n<li>提高数据写入效率。允许在少数表中进行冗余存储,以<strong>提高写效率。</strong></li>\\n<li><strong>简化数据库设计</strong>,可以利用冗余数据减少复杂的查询。</li>\\n</ol>\\n<p>弊:</p>\\n<ol>\\n<li>数据冗余<strong>增加了数据维护的难度。</strong></li>\\n<li>提高了数据<strong>存储空间的需求</strong>。</li>\\n<li>提高了<strong>系统设计和开发的难度</strong>。需考虑数据同步问题。</li>\\n<li>增加了<strong>数据库插入和更新的问题</strong>。</li>\\n<li>出现<strong>数据不一致</strong>的可能。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库连接的分类有哪些?各有什么特点?</p>\\n<p>me:</p>\\n<p>使用数据库引擎  使用数据池链接 /  1，    2，数据池连接减少操作次数</p>\\n<p>ai：</p>\\n<ol>\\n<li><strong>短连接</strong>:每次数据库操作后就关闭连接。</li>\\n</ol>\\n<ul>\\n<li>特点:连接创建和关闭频繁,资源消耗大,性能较差。</li>\\n</ul>\\n<ol>\\n<li><strong>长连接</strong>:重复使用同一个数据库连接,对多次数据库操作优化。</li>\\n</ol>\\n<ul>\\n<li>特点:减少连接创建和关闭次数,性能较好。但如果长时间不关闭,会占用连接资源。</li>\\n</ul>\\n<p>另外,数据库连接还可以分为:</p>\\n<ol>\\n<li>**直接连接:**应用程序直接连接数据库。</li>\\n</ol>\\n<ul>\\n<li>特点:简单,无中间层,但不利于管理和拓展。</li>\\n</ul>\\n<ol>\\n<li><strong>连接池连接</strong>:使用连接池存放数据库连接,应用程序从池中获取连接。</li>\\n</ol>\\n<ul>\\n<li>特点:可以重用连接,提高效率。但需要注意池容量控制。</li>\\n</ul>\\n</li>\\n<li>\\n<p>什么是数据库事务的ACID特性?缺少某一特性会造成什么问题?</p>\\n<p>me:</p>\\n<p>隔离性 一致性 原子性 持久性 /  缺少会造成数据不一致 事务失效</p>\\n<p>ai:</p>\\n<p>原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。</p>\\n<p>一致性(Consistency):事务执行前后,数据库都保持一致性状态。</p>\\n<p>隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。</p>\\n<p>持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。</p>\\n<p>如果缺少某一特性:</p>\\n<ul>\\n<li><strong>缺少原子性:事务执行可能只部分成功,使数据处于不一致状态。</strong></li>\\n<li><strong>缺少一致性:事务执行使数据库从一个一致状态变成不一致状态。</strong></li>\\n<li><strong>缺少隔离性:事务并发执行相互影响,数据错误。</strong></li>\\n<li><strong>缺少持久性:系统故障后,已提交事务的修改可能丢失</strong></li>\\n</ul>\\n</li>\\n<li>\\n<p>选择使用何种数据库索引类型的判断标准有哪些?</p>\\n<p>me：</p>\\n<p>不知道</p>\\n<p>ai:</p>\\n<ol>\\n<li>查询方式 - 根据查询中条件列的判断,选择合适的索引,如唯一索引、普通索引、前缀索引等。</li>\\n<li>查询性能 - 根据查询的性能要求,如查询范围的大小,选择聚簇索引或非聚簇索引。</li>\\n<li>数据量 - 数据量小可以考虑使用唯一索引;数据量大则应优先考虑普通索引。</li>\\n<li>数据变更频率 - 变更频繁的数据字段不太适合创建索引。静态数据字段可优先考虑。</li>\\n<li>索引维护成本 - 索引能够带来查询性能提升需要与维护索引的成本作比较。</li>\\n<li>索引限制 - 一些数据库对索引的 key 长度、数量都有限制,在设计时需要注意。</li>\\n<li>数据关系 - 与查询条件 columnist 相关联的数据字段优先考虑建立索引。</li>\\n<li>实际执行查询计划 - 可以比较真实的执行计划来决定创建哪些索引。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库的性能优化手段中,哪些属于SQL优化,哪些属于硬件优化?</p>\\n<p>me;</p>\\n<p>索引优化 分页 属于sql  //硬件优化</p>\\n<p>ai:</p>\\n<p>SQL优化主要包括:</p>\\n<ol>\\n<li><strong>SQL语句优化</strong> - 使用EXPLAIN检查执行计划,优化查询方式,避免全表扫描等。</li>\\n<li><strong>索引优化</strong> - 加入适当的索引,减少查询需要扫描的数据。</li>\\n<li><strong>数据库结构优化</strong> - 规范设计表和库,避免冗余索引和查询。</li>\\n<li>参数优化 - 配置合理的缓存,连接数等数据库参数。</li>\\n</ol>\\n<p>硬件优化主要包括:</p>\\n<ol>\\n<li><strong>升级CP</strong>U、内存 - 提高数据库服务器的处理能力。</li>\\n<li>使用SSD - 减少I/O等待时间。</li>\\n<li><strong>分库分表</strong> - 减少单库单表数据量,提高查询效率。</li>\\n<li>采用更高效的磁盘IO方式 - 如RAID 10。</li>\\n<li>选择合适的<strong>存储引擎</strong> - 如InnoDB, MyISAM等。</li>\\n<li>客户端连接优化 - 连接池,本地缓存等。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库三范式有什么作用?不符合三范式会带来哪些问题?</p>\\n<p>me:</p>\\n<p>规范化数据库结构    减少数据冗余</p>\\n<p>不符合 可能造成数据冗余 数据异常 数据库操作异常</p>\\n<p>ai:</p>\\n<p>数据库三范式的主要作用是:</p>\\n<ol>\\n<li>避免数据冗余和异常 - 三范式要求数据表中的每个列都和主键直接相关,从而避免重复和多余的数据。</li>\\n<li>提高查询效率 - 三范式将数据划分为多张功能独立的表,而非塞进一个大表,提高查询速度。</li>\\n<li>降低更新异常 - 更新时只需要更新一处,不会出现数据不一致的情况。</li>\\n<li>提高系统扩展性 - 三范式使表的结构合理独立,易于扩展。</li>\\n</ol>\\n<p>不符合三范式主要会带来以下问题:</p>\\n<ol>\\n<li>数据冗余和数据不一致 - 同样的数据出现在多个表中,数据重复,容易出现不一致。</li>\\n<li>插入异常 - 在一个表中插入数据,需要同步插入其他表,否则产生数据不一致。</li>\\n<li>删除异常 - 删除操作可能会删掉其他表还在使用的数据。</li>\\n<li>更新异常 - 同一数据不同表的更新可能不一致。</li>\\n<li>系统维护困难 - 字段增删改都会影响多张表,维护复杂。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库事务的四个特征是:原子性、一致性、隔离性和持久性。请解释这四个特征的意义。</p>\\n<p>原子性(Atomicity):事务是一个不可分割的工作单位,事务中的操作要么都成功,要么都失败。</p>\\n<p>一致性(Consistency):事务执行前后,数据库都保持一致性状态。</p>\\n<p>隔离性(Isolation):事务并发执行时,一个事务的执行不应影响其他事务。</p>\\n<p>持久性(Durability):已提交事务对数据库修改是持久的,即使系统故障也不会丢失。</p>\\n</li>\\n<li>\\n<p>数据库的并发控制有哪几种常见方法?各自的优缺点是什么?</p>\\n<p>me:</p>\\n<p>加锁{表锁 行锁 }    事务   /   加锁可以并发数据安全  效率慢  不加锁可能不安全但效率快</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>锁机制</strong></li>\\n</ol>\\n<ul>\\n<li>优点:并发冲突控制能力强,保证数据一致性。</li>\\n<li>缺点:锁的获取和释放有较大开销,会降低并发性能。锁模式不当还可能导致死锁。</li>\\n</ul>\\n<ol>\\n<li><strong>多版本并发控制(MVCC)</strong></li>\\n</ol>\\n<ul>\\n<li>优点:不会阻塞读操作,提高了读性能和并发性。</li>\\n<li>缺点:需要额外空间存储多版本数据,写操作开销也较大。</li>\\n</ul>\\n<ol>\\n<li><strong>时间戳 ordering</strong></li>\\n</ol>\\n<ul>\\n<li>优点:无需锁及多版本,并发控制简单。</li>\\n<li>缺点:只适用于读多写少的场景,可扩展性较差。</li>\\n</ul>\\n<ol>\\n<li><strong>乐观锁</strong></li>\\n</ol>\\n<ul>\\n<li>优点:不阻塞读操作,无死锁问题。</li>\\n<li>缺点:写冲突时会重试和回滚,成功率不高。</li>\\n</ul>\\n<ol>\\n<li><strong>分布式事务</strong></li>\\n</ol>\\n<ul>\\n<li>优点:支持分布式场景的并发控制。</li>\\n<li>缺点:实现复杂,资源开销大,不支持高并发。</li>\\n</ul>\\n</li>\\n<li>\\n<p>数据库的锁有共享锁和排它锁,这两种锁的区别是什么?各自使用场景?</p>\\n<p>me:</p>\\n<p>共享锁指进程运行所需要资源可以被其他进程所共享使用</p>\\n<p>排他锁指进程所需资源仅可自己使用其他进程无法请求已使用的资源</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>兼容性不同</strong>：\\n<ul>\\n<li>S锁与S锁兼容，可以多个事务同时加S锁。</li>\\n<li>X锁与X锁和S锁都不兼容，加X锁时其他事务不能再加任何锁。</li>\\n</ul>\\n</li>\\n<li><strong>加锁读写能力不同</strong>：\\n<ul>\\n<li>S锁只允许读取数据，不允许修改。</li>\\n<li>X锁既可以读取也可以修改数据。</li>\\n</ul>\\n</li>\\n<li><strong>加锁粒度不同</strong>：\\n<ul>\\n<li>S锁通常是行级锁，只锁定查找到的行。</li>\\n<li>X锁一般是表级锁，会锁定整张表。</li>\\n</ul>\\n</li>\\n</ol>\\n<p>根据这些特性，可以将它们用于不同的事务场景：</p>\\n<ul>\\n<li>\\n<p><strong>S锁的使用场景</strong>： S锁适用于只读事务，因为它们可以并发地加锁，从而提高并发度，允许多个事务同时读取相同的数据。这对于读取频繁、但修改较少的场景非常有用，例如报表查询等。</p>\\n</li>\\n<li>\\n<p><strong>X锁的使用场景</strong>： X锁适用于写事务，因为它提供了互斥访问，确保在一个事务修改数据时，其他事务无法访问或修改相同的数据。这对于需要保证数据一致性和避免冲突的写操作非常重要，例如更新、删除等操作。</p>\\n</li>\\n<li>\\n<p><strong>读写混合事务的处理</strong>： 在某些情况下，可能需要同时进行读取和写入操作。在这种情况下，可以先加X锁，以确保数据的独占访问权。然后，在需要读取的行上加S锁，以便在读取过程中保持一致性。最后，在完成操作后，释放所有锁。</p>\\n</li>\\n<li>\\n<p><strong>共享锁（Shared Lock）</strong>：</p>\\n<ul>\\n<li>共享锁允许多个事务同时获取同一个数据项的锁，以进行读操作。多个事务可以同时持有共享锁，但不能与排他锁同时存在。</li>\\n<li>共享锁之间是兼容的，这意味着一个事务可以在另一个事务持有共享锁的同时获取相同数据项的共享锁。</li>\\n<li>共享锁用于读取操作，可以并发地读取数据，从而提高并发性能。</li>\\n<li>适用场景：当多个事务需要读取相同的数据项时，可以使用共享锁，以避免冲突并允许并发读取操作。</li>\\n</ul>\\n<p><strong>排他锁（Exclusive Lock）</strong>：</p>\\n<ul>\\n<li>排他锁在事务需要进行写操作时获取，确保数据在写操作期间不会被其他事务读取或写入。</li>\\n<li>排他锁与其他任何锁（包括共享锁和排他锁）都不兼容，这意味着当一个事务持有排他锁时，其他事务不能获取相同数据项的任何锁。</li>\\n<li>排他锁用于写操作，保证数据的独占性，避免并发写入冲突，从而维护数据的一致性。</li>\\n<li>适用场景：当事务需要对数据进行写操作（修改、删除等）时，应该获取排他锁，以确保数据的一致性和完整性。</li>\\n</ul>\\n<p>在实际应用中，根据事务的需求和操作类型，可以选择适当的锁策略。有时候，也会出现读写混合的场景，这时可能需要在读操作时获取共享锁，在写操作时获取排他锁，以实现合适的并发控制和数据保护。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>为什么需要数据库的事务处理?事务能够保证数据库的一致性吗?</p>\\n<p>me:</p>\\n<p>对数据库需要并行操作 /事务可以保持一致性</p>\\n<p>ai:</p>\\n<ol>\\n<li>将多条相关SQL作为一个不可分割的工作单元执行,以保证数据的完整性。</li>\\n<li>提供将数据库从一致性状态变换到另一致性状态的机制。</li>\\n<li>在并发访问时,保证事务之间的隔离性。</li>\\n<li>在系统故障后,恢复数据库状态以保持数据一致性。</li>\\n</ol>\\n<p>但是,事务<strong>不能完全保证数据库的一致性</strong>。原因如下:</p>\\n<ol>\\n<li>事务只能保证数据库从一个一致状态转变到另一个一致状态,不能防止一开始数据库状态就不一致。</li>\\n<li>长时间事务会降低并发性,也无法完全隔离事务之间的影响。</li>\\n<li>硬件故障也可能导致事务处理失败,无法恢复数据库一致状态。</li>\\n<li>错误或不合理的事务处理逻辑同样可能破坏数据一致性。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库的冗余对性能有什么影响?如何在冗余与性能间做平衡?</p>\\n<p>me:</p>\\n<p>数据库冗余导致数据异常 性能读写降低，数据库操作异常数据不安全不一致   /  合理规划数据库设计  结合实际使用不同的范式</p>\\n<p>ai:</p>\\n<ol>\\n<li><strong>写入性能</strong> - 冗余会导致每个写操作需要更新多个副本,降低写入速度。</li>\\n<li><strong>读取性能</strong> - 适当冗余可以提高读取速度,因为读取可以分散在多个副本上。但冗余过高会导致缓存浪费和磁盘空间浪费,降低效率。</li>\\n<li><strong>内存占用</strong> - 数据冗余会增加内存占用。</li>\\n<li><strong>数据不一致</strong> - 多个副本存在数据不一致的可能,需要额外的完整性检查。</li>\\n</ol>\\n<p>平衡冗余和性能可以从以下几个方面进行:</p>\\n<ol>\\n<li>只对**最常读取和最重要的数据建立冗余,**不要对全部数据均创建冗余。</li>\\n<li>控制冗余副本的数量,一般2-3个副本就足够提供读取性能优势。<strong>过多冗余反而降低效率</strong>。</li>\\n<li>采用异步或延迟的冗余策略,减小冗余对写入的影响。</li>\\n<li><strong>对冗余数据进行分区</strong>,避免单点热点问题。</li>\\n<li><strong>利用缓存来提高读取速度</strong>,而不是单纯依赖冗余。</li>\\n<li>对冗余数据进行压缩,减少存储和内存开销。</li>\\n<li>加强系统间数据一致性检测与同步机制,降低冗余带来的不一致风险。</li>\\n<li>配合业务特点采用适当的冗余策略,如主从式、份额式等。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库优化中,对查询语句优化和对数据库表优化有何不同?应优先考虑哪些方面?</p>\\n<p>me:</p>\\n<p>查询语句优化 --&gt; 在查询过程中更快或准确查询  通过索引 条件 连表等操作</p>\\n<p>数据库表优化 --&gt; 在数据表建立 对数据进行规范化 分表 分页</p>\\n<p>优先考虑语句优化 比较直接  对数据库表优化 可能比较麻烦</p>\\n<p>ai:</p>\\n<ol>\\n<li>查询语句优化</li>\\n</ol>\\n<ul>\\n<li>重点优化SQL查询逻辑,使查询更高效</li>\\n<li>如添加索引、SQL优化、查询重写等</li>\\n<li>目的是消除不必要的查询,减少扫描行数</li>\\n</ul>\\n<ol>\\n<li>数据库表优化</li>\\n</ol>\\n<ul>\\n<li>\\n<p>重点优化表结构与设计,减少存储冗余</p>\\n</li>\\n<li>\\n<p>如正规化、拆分表、垂直拆分等</p>\\n</li>\\n<li>\\n<p>目的是减少储存空间,提高CRUD效率</p>\\n<p>优先考虑的方面:</p>\\n<ul>\\n<li>对重要且频繁的查询语句进行优化</li>\\n<li>对大表、重要业务表的结构设计优化</li>\\n<li>先从查询语句入手,对症下药</li>\\n<li>查询无法优化时再考虑表结构调整</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>选择使用<strong>物理外键</strong>与<strong>逻辑外键</strong>,应该考量哪些因素?两者的优缺点?</p>\\n<p>me:</p>\\n<p>null</p>\\n<p>ai:</p>\\n<ol>\\n<li>数据完整性需求</li>\\n</ol>\\n<ul>\\n<li>物理外键通过约束可以保证引用完整性,删除/更新主表数据时限制外键变化。</li>\\n<li>逻辑外键不能自动保证引用完整性,需要通过应用程序来维护。</li>\\n</ul>\\n<ol>\\n<li>查询性能需求</li>\\n</ol>\\n<ul>\\n<li>物理外键会对主表创建索引,可提高联表查询速度。</li>\\n<li>逻辑外键没有索引,联表查询需要全表扫描,较慢。</li>\\n</ul>\\n<ol>\\n<li>数据变更需求</li>\\n</ol>\\n<ul>\\n<li>物理外键的约束会限制主表数据的删除与更新。</li>\\n<li>逻辑外键没有这个限制,主表变更更灵活。</li>\\n</ul>\\n<ol>\\n<li>系统性能限制</li>\\n</ol>\\n<ul>\\n<li>物理外键的约束会增加插入/更新时的开销。</li>\\n<li>逻辑外键的开销较小。</li>\\n</ul>\\n<p><strong>物理外键的优点是保证数据一致性,提高查询速度,但会限制主表变更。</strong></p>\\n<p><strong>逻辑外键的优点是变更灵活性高,系统开销较小,但无法自动保证引用完整性。</strong></p>\\n</li>\\n<li>\\n<p>数据库索引在提高查询速度的同时,会带来哪些问题?该如何权衡?</p>\\n<p>me:</p>\\n<p>额外内存开销</p>\\n<p>ai:</p>\\n<ol>\\n<li>写入开销增加</li>\\n</ol>\\n<ul>\\n<li>索引会增加数据库写入数据时的开销。所有索引字段的值都需要同步更新。</li>\\n</ul>\\n<ol>\\n<li>额外存储空间占用</li>\\n</ol>\\n<ul>\\n<li>索引需要额外的存储空间来保存索引结构和索引值。</li>\\n</ul>\\n<ol>\\n<li>索引维护成本</li>\\n</ol>\\n<ul>\\n<li>修改表结构时需要重新建立索引,也需要定期维护索引。</li>\\n</ul>\\n<ol>\\n<li>可能导致查询优化器依赖索引</li>\\n</ol>\\n<ul>\\n<li>存在索引并不一定被查询优化器使用,可能导致非预期的查询计划。</li>\\n</ul>\\n<ol>\\n<li><strong>降低部分写操作的性能</strong></li>\\n</ol>\\n<ul>\\n<li>索引可以加速查询,但会降低部分INSERT,UPDATE和DELETE的性能。</li>\\n</ul>\\n<p>因此,建立索引需要权衡其带来的收益和成本。一般的考虑原则是:</p>\\n<ul>\\n<li>仅对常用字段建立索引,不要对很少使用或不作为查询条件的字段建立索引。</li>\\n<li>删除不再使用或很少使用的索引,不定期评估索引的使用效果。</li>\\n<li>对高并发的读写操作要谨慎建立索引。</li>\\n<li>对TEXT、BLOB等大字段尽量不要创建索引。</li>\\n<li>在建立复合索引时考虑列的顺序对性能的影响。</li>\\n<li>对于大表要建立部分索引而不是全表索引。</li>\\n</ul>\\n</li>\\n<li>\\n<p>数据库视图的作用有哪些?使用视图可能带来的问题是什么?应如何应对?</p>\\n<p>me:</p>\\n<p>视图狗都不用</p>\\n<p>ai:</p>\\n</li>\\n<li>\\n<p>数据库范式设计的目标是什么?为什么需要遵循范式化设计?</p>\\n<p>me:</p>\\n<p>数据库性能 维护 变好</p>\\n<p>ai；</p>\\n<ol>\\n<li>避免数据冗余和异常,提高数据的完整性和一致性。</li>\\n<li>降低数据维护和存储成本。</li>\\n<li>提高查询性能。</li>\\n<li>确保数据库结构灵活扩展,便于应用程序开发。</li>\\n</ol>\\n<p>遵循范式化设计主要有以下原因:</p>\\n<ol>\\n<li>减少数据冗余,避免同样的数据出现在多个表中,占用大量存储空间。</li>\\n<li>避免插入、更新异常,如无法正常删除的数据。这些异常会导致数据库结构混乱。</li>\\n<li>降低维护成本,不需要在多个表中同步修改冗余数据。</li>\\n<li>提高查询效率,不需要在多表中查询同样的数据。</li>\\n<li>提高可扩展性,系统变更不会影响数据库整体结构。</li>\\n<li>有利于未来优化,如拆分表等。</li>\\n<li>便于程序开发,不同模块访问不同表,业务清晰。</li>\\n</ol>\\n</li>\\n<li>\\n<p>解释SQL语句的优化原则,有哪些需要注意的点?</p>\\n<p>ai:</p>\\n<ol>\\n<li>尽量减少查询的数据行数,使用WHERE条件进行过滤。</li>\\n<li>尽量减少JOIN表的数量,避免不必要的连接查询。</li>\\n<li>对经常查询的字段建立索引,提高查询效率。</li>\\n<li>避免在WHERE子句中使用NOT IN和&lt;&gt;操作符,它们难以优化。</li>\\n<li>使用白名单限制查询范围,避免全表扫描。</li>\\n<li>对文本字段应加引号限制前缀wildcard查询。</li>\\n<li>对统计类查询使用GROUP BY而不是DISTINCT去重。</li>\\n<li>避免数据类型的隐式转换,这会降低查询效率。</li>\\n<li>对多表JOIN查询,保证ON和WHERE条件列有索引。</li>\\n<li>编写存储过程提高重复查询的效率。</li>\\n<li>对批量插入数据操作使用事务提高效率。</li>\\n<li>对动态SQL参数使用绑定变量提高稳定性。</li>\\n<li>避免使用游标或联合查询,它们执行效率较低。</li>\\n<li>对复杂查询分步进行,逐步优化。</li>\\n</ol>\\n</li>\\n<li>\\n<p>数据库连接池的作用是什么?使用连接池可能带来哪些问题?</p>\\n<p>me:</p>\\n<p>对数据库操作时，避免多次链接数据库，避免每次数据操作需要重新链接数据库</p>\\n<p>AI:</p>\\n<p>数据库连接池的主要作用是提高数据库连接的使用效率。</p>\\n<ol>\\n<li>**重用存在的连接,**避免频繁创建和关闭连接的开销。</li>\\n<li>管理连接对象数目,避免过多连接耗尽资源。</li>\\n<li>实现连接的线程安全共享。</li>\\n<li><strong>提供连接的待命池,加快获取连接的速度。</strong></li>\\n</ol>\\n<p>使用连接池可能带来以下问题:</p>\\n<ol>\\n<li><strong>配置不当可能造成连接池溢出、泄漏</strong>等。</li>\\n<li><strong>多线程环境下需要实现连接管理的同步机制</strong>。</li>\\n<li>连接长时间闲置导致连接超时。</li>\\n<li><strong>大量连接创建可能带来内存压力。</strong></li>\\n<li><strong>连接没有按需释放,浪费资源。</strong></li>\\n<li>连接长时间占用,出现瓶颈。</li>\\n</ol>\\n</li>\\n<li>\\n<p>选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点?</p>\\n</li>\\n<li>\\n<p>如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些?</p>\\n</li>\\n<li>\\n<p>讲解数据库故障转移与负载均衡的工作原理,两者有何不同?</p>\\n</li>\\n<li>\\n<p>数据库主备服务器架构的工作原理是什么?主备服务器之间如何同步数据?</p>\\n</li>\\n<li>\\n<p>讲解行锁、表锁、意向锁的使用场景和实现机制。</p>\\n</li>\\n<li>\\n<p>数据库数据如何设计维度建模与事实建模?二者有何优势?</p>\\n</li>\\n<li>\\n<p>什么是数据库的无损调整?如何实现数据库结构的无损调整?</p>\\n</li>\\n<li>\\n<p>数据库事务隔离级别有哪些?各个隔离级别的区别是什么?</p>\\n</li>\\n<li>\\n<p>讲解InnoDB和MyISAM存储引擎的区别与应用场景。</p>\\n</li>\\n<li>\\n<p>数据库空间数据型如何设计合理的空间索引提高查询效率?</p>\\n</li>\\n<li>\\n<p>什么是数据库的慢查询?如何定位和优化慢查询?</p>\\n</li>\\n<li>\\n<p>什么是数据库死锁?如何避免数据库死锁的发生?</p>\\n</li>\\n<li>\\n<p>讲解关系型数据库与NoSQL数据库的区别,两者各自的应用场景。</p>\\n</li>\\n<li>\\n<p>讲解SQL注入攻击的原理,如何通过参数化查询防止SQL注入。</p>\\n</li>\\n<li>\\n<p>数据库服务器内存不足时应该如何调优?有哪些可优化方向?</p>\\n</li>\\n<li>\\n<p>设计一个支持百万级流量的数据库架构,需要考虑哪些方面?</p>\\n</li>\\n<li>\\n<p>关系型数据库与文档型数据库的区别在哪里?各自的典型产品和应用场景?</p>\\n</li>\\n<li>\\n<p>数据库的存储引擎有哪些?各有什么特点?</p>\\n</li>\\n<li>\\n<p>数据库索引的底层实现原理是什么?B+树与B树的区别在哪里?</p>\\n</li>\\n<li>\\n<p>讲解数据库事务的隔离机制,包括脏读、不可重复读、幻读的概念。</p>\\n</li>\\n<li>\\n<p>什么是数据库范式?解释第一范式、第二范式、第三范式的定义。</p>\\n</li>\\n<li>\\n<p>数据库优化中,业务层优化和SQL语句优化的focal区别是什么?</p>\\n</li>\\n<li>\\n<p>选择增量备份与完全备份应考虑哪些因素?两者分别适用于哪些场景?</p>\\n</li>\\n<li>\\n<p>解释数据库连接的集中式与分布式部署方式,讲述两种方案的利弊。</p>\\n</li>\\n<li>\\n<p>数据库查询优化中,应该优先考虑查询缓存还是索引?理由是什么?</p>\\n</li>\\n<li>\\n<p>讲解数据库主键和唯一索引的区别,各自的使用场景。</p>\\n</li>\\n<li>\\n<p>为什么需要数据库事务?事务如何保证数据库的ACID特性?</p>\\n</li>\\n<li>\\n<p>选择MySQL存储引擎时,应考虑哪些因素?各存储引擎的应用场景?</p>\\n</li>\\n<li>\\n<p>解析SQL语句的优化原则,有哪些需要注意的点?</p>\\n</li>\\n<li>\\n<p>设计支持大量并发的数据库架构需要考虑哪些方面?</p>\\n</li>\\n<li>\\n<p>什么是数据库连接池?使用连接池带来哪些好处?</p>\\n</li>\\n<li>\\n<p>讲解三种数据库连接方案:长连接、短连接、连接池。</p>\\n</li>\\n<li>\\n<p>数据库的水平拆分与垂直拆分有何区别?各自的使用场景是?</p>\\n</li>\\n<li>\\n<p>设计一个支持百万级流量的数据库架构,需要考虑哪些方面?</p>\\n</li>\\n<li>\\n<p>选择使用物理外键与逻辑外键,应该考量哪些因素?两者的优缺点?</p>\\n</li>\\n<li>\\n<p>如何判断一个数据库是否需要进行分库分表?分库分表的方案有哪些?</p>\\n</li>\\n<li>\\n<p>数据库事务有哪几种隔离级别?各自的优缺点是什么?</p>\\n</li>\\n<li>\\n<p>讲解数据库三大范式的意义,以及如何实现范式设计。</p>\\n</li>\\n<li>\\n<p>什么是数据库的FILESTREAM技术?有什么优点和使用场景?</p>\\n</li>\\n<li>\\n<p>解析主从复制和主主复制的工作原理、优缺点和适用场景。</p>\\n</li>\\n<li>\\n<p>数据库优化中,SQL语句优化和索引优化的重要程度如何区分?</p>\\n</li>\\n<li>\\n<p>讲解行锁和表锁的使用场景、加锁机制、优缺点。</p>\\n</li>\\n<li>\\n<p>如何查看和分析MySQL的慢查询日志?</p>\\n</li>\\n<li>\\n<p>什么是MVCC机制?InnoDB如何通过MVCC实现事务隔离?</p>\\n</li>\\n<li>\\n<p>选择使用联合索引与组合索引的考虑因素有哪些?各自的优缺点?</p>\\n</li>\\n<li>\\n<p>什么是数据库范式?为什么要进行范式化设计?</p>\\n</li>\\n<li>\\n<p>讲解NoSQL数据库的特点,列举几种常见的NoSQL数据库。</p>\\n</li>\\n<li>\\n<p>解析数据库故障转移和负载均衡的工作机制、区别和应用场景。</p>\\n</li>\\n<li>\\n<p>MongoDB和Redis的区别在哪里?各自的应用场景有哪些?</p>\\n</li>\\n<li>\\n<p>数据库连接池的工作原理是什么?使用连接池的优缺点?</p>\\n</li>\\n<li>\\n<p>如何 diagnoase 和优化一个慢SQL查询?需要注意哪些方面?</p>\\n</li>\\n<li>\\n<p>设计一个支持百万用户同时在线的数据库架构,需要考虑哪些方面?</p>\\n</li>\\n<li>\\n<p>解析SQL和NoSQL数据库的区别,以及各自的应用场景。</p>\\n</li>\\n<li>\\n<p>讲解InnoDB和MyISAM这两种存储引擎的特点和区别。</p>\\n</li>\\n<li>\\n<p>什么是数据库范式?为什么需要进行范式化设计?</p>\\n</li>\\n<li>\\n<p>解析行锁、表锁、意向锁的加锁机制、使用场景和优缺点。</p>\\n</li>\\n<li>\\n<p>讲解事务的ACID特性,以及事务的隔离级别和实现。</p>\\n</li>\\n<li>\\n<p>解析B+树和B树的区别,以及为什么索引通常选择B+树。</p>\\n</li>\\n<li>\\n<p>讲解三种常见的数据库拆分方案:垂直拆分、水平拆分、分库分表。</p>\\n</li>\\n<li>\\n<p>数据仓库与数据库有哪些区别?数据仓库的优点是什么?</p>\\n</li>\\n<li>\\n<p>如何设计一个支持地理位置查询的数据库架构方案?</p>\\n</li>\\n<li>\\n<p>什么是数据库的无损扩容?应该如何实现?</p>\\n</li>\\n<li>\\n<p>解析大型数据库系统的容灾技术,需要考虑哪些方面?</p>\\n</li>\\n<li>\\n<p>如何防止和解决数据库中的死锁问题?</p>\\n</li>\\n<li>\\n<p>什么是数据库的主从复制?如何实现 MySQL 的多源复制?</p>\\n</li>\\n<li>\\n<p>解析OLTP系统和OLAP系统的特点和区别。</p>\\n</li>\\n<li>\\n<p>如何为数据库服务器优化内存配置?需要关注哪些参数?</p>\\n</li>\\n</ol>","autoDesc":true}');export{n as data};
