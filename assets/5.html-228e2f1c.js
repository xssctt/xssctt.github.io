import{_ as o,F as c,V as p,W as l,X as n,Y as a,Z as e,$ as t}from"./framework-56e099cb.js";const i="/assets/icon/image-20231206173505662.png",u={},d=n("h1",{id:"条件构造器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#条件构造器","aria-hidden":"true"},"#"),a(" 条件构造器")],-1),r=n("figure",null,[n("img",{src:i,alt:"image-20231206173505662",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20231206173505662")],-1),k=n("p",null,"说明:",-1),m=t("<li>以下出现的第一个入参<code>boolean condition</code>表示该条件<strong>是否</strong>加入最后生成的sql中，例如：query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age)</li><li>以下代码块内的多个方法均为从上往下补全个别<code>boolean</code>类型的入参,默认为<code>true</code></li><li>以下出现的泛型<code>Param</code>均为<code>Wrapper</code>的子类实例(均具有<code>AbstractWrapper</code>的所有方法)</li><li>以下方法在入参中出现的<code>R</code>为泛型,在普通wrapper中是<code>String</code>,在<code>LambdaWrapper</code>中是<strong>函数</strong>(例:<code>Entity::getId</code>,<code>Entity</code>为实体类,<code>getId</code>为字段<code>id</code>的<strong>getter Method</strong>)</li><li>以下方法入参中的<code>R column</code>均表示数据库字段,当<code>R</code>具体类型为<code>String</code>时则为数据库字段名(<strong>字段名是数据库关键字的自己用转义符包裹!</strong>)而不是实体类数据字段名!!!</li><li>以下举例均为使用普通wrapper,入参为<code>Map</code>和<code>List</code>的均以<code>json</code>形式表现!</li><li>使用中如果入参的<code>Map</code>或者<code>List</code>为<strong>空</strong>,则不会加入最后生成的sql中!!!</li>",7),v=n("strong",null,"函数",-1),h={href:"https://www.jianshu.com/p/613a6118e2e0",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>警告:</p><p>不支持以及不赞成在 RPC 调用中把 Wrapper 进行传输</p><ol><li>wrapper 很重</li><li>传输 wrapper 可以类比为你的 controller 用 map 接收值(开发一时爽,维护火葬场)</li><li>正确的 RPC 调用姿势是写一个 DTO 进行传输,被调用方再根据 DTO 执行相应的操作</li><li>我们拒绝接受任何关于 RPC 传输 Wrapper 报错相关的 issue 甚至 pr</li></ol><h2 id="abstractwrapper" tabindex="-1"><a class="header-anchor" href="#abstractwrapper" aria-hidden="true">#</a> AbstractWrapper</h2><p>说明:</p><p>QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where 条件 注意: entity 生成的 where 条件与 使用各个 api 生成的 where 条件<strong>没有任何关联行为</strong></p><h3 id="alleq" tabindex="-1"><a class="header-anchor" href="#alleq" aria-hidden="true">#</a> allEq</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span>
<span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span>
<span class="token function">allEq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),b=n("p",null,"全部",-1),_=n("p",null,"eq",-1),q=n("p",null,"(或个别isNull)",-1),f=n("p",null,"个别参数说明:",-1),j=n("code",null,"params",-1),y=n("code",null,"key",-1),w=n("code",null,"value",-1),x=n("code",null,"null2IsNull",-1),R=n("code",null,"true",-1),E=n("code",null,"map",-1),S=n("code",null,"value",-1),O=n("code",null,"null",-1),L={href:"https://baomidou.com/pages/10c804/#isnull",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"false",-1),I=n("code",null,"value",-1),B=n("code",null,"null",-1),W=n("li",null,[n("p",null,[a("例1: "),n("code",null,'allEq({id:1,name:"老王",age:null})'),a("--->"),n("code",null,"id = 1 and name = '老王' and age is null")])],-1),C=n("li",null,[n("p",null,[a("例2: "),n("code",null,'allEq({id:1,name:"老王",age:null}, false)'),a("--->"),n("code",null,"id = 1 and name = '老王'")])],-1),A=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span>
<span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span>
<span class="token function">allEq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个别参数说明:</p><p><code>filter</code> : 过滤函数,是否允许字段传入比对条件中 <code>params</code> 与 <code>null2IsNull</code> : 同上</p><ul><li>例1: <code>allEq((k,v) -&gt; k.contains(&quot;a&quot;), {id:1,name:&quot;老王&quot;,age:null})</code>---&gt;<code>name = &#39;老王&#39; and age is null</code></li><li>例2: <code>allEq((k,v) -&gt; k.contains(&quot;a&quot;), {id:1,name:&quot;老王&quot;,age:null}, false)</code>---&gt;<code>name = &#39;老王&#39;</code></li></ul><h3 id="eq" tabindex="-1"><a class="header-anchor" href="#eq" aria-hidden="true">#</a> eq</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>等于 =</li><li>例: <code>eq(&quot;name&quot;, &quot;老王&quot;)</code>---&gt;<code>name = &#39;老王&#39;</code></li></ul>`,7),T={id:"ne",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#ne","aria-hidden":"true"},"#",-1),P={href:"https://baomidou.com/pages/10c804/#ne",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">ne</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不等于 &lt;&gt;</li><li>例: <code>ne(&quot;name&quot;, &quot;老王&quot;)</code>---&gt;<code>name &lt;&gt; &#39;老王&#39;</code></li></ul>`,2),M={id:"gt",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#gt","aria-hidden":"true"},"#",-1),Q={href:"https://baomidou.com/pages/10c804/#gt",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">gt</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>大于 &gt;</li><li>例: <code>gt(&quot;age&quot;, 18)</code>---&gt;<code>age &gt; 18</code></li></ul><h3 id="ge" tabindex="-1"><a class="header-anchor" href="#ge" aria-hidden="true">#</a> ge</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">ge</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>大于等于 &gt;=</li><li>例: <code>ge(&quot;age&quot;, 18)</code>---&gt;<code>age &gt;= 18</code></li></ul>`,5),F={id:"lt",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#lt","aria-hidden":"true"},"#",-1),X={href:"https://baomidou.com/pages/10c804/#lt",target:"_blank",rel:"noopener noreferrer"},$=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">lt</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">lt</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小于 &lt;</li><li>例: <code>lt(&quot;age&quot;, 18)</code>---&gt;<code>age &lt; 18</code></li></ul>`,2),H={id:"le",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#le","aria-hidden":"true"},"#",-1),z={href:"https://baomidou.com/pages/10c804/#le",target:"_blank",rel:"noopener noreferrer"},Z=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">le</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小于等于 &lt;=</li><li>例: <code>le(&quot;age&quot;, 18)</code>---&gt;<code>age &lt;= 18</code></li></ul>`,2),J={id:"between",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#between","aria-hidden":"true"},"#",-1),an={href:"https://baomidou.com/pages/10c804/#between",target:"_blank",rel:"noopener noreferrer"},sn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span>
<span class="token function">between</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BETWEEN 值1 AND 值2</li><li>例: <code>between(&quot;age&quot;, 18, 30)</code>---&gt;<code>age between 18 and 30</code></li></ul>`,2),en={id:"notbetween",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#notbetween","aria-hidden":"true"},"#",-1),on={href:"https://baomidou.com/pages/10c804/#notbetween",target:"_blank",rel:"noopener noreferrer"},cn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notBetween</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span>
<span class="token function">notBetween</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOT BETWEEN 值1 AND 值2</li><li>例: <code>notBetween(&quot;age&quot;, 18, 30)</code>---&gt;<code>age not between 18 and 30</code></li></ul>`,2),pn={id:"like",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#like","aria-hidden":"true"},"#",-1),un={href:"https://baomidou.com/pages/10c804/#like",target:"_blank",rel:"noopener noreferrer"},dn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LIKE &#39;%值%&#39;</li><li>例: <code>like(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name like &#39;%王%&#39;</code></li></ul>`,2),rn={id:"notlike",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#notlike","aria-hidden":"true"},"#",-1),mn={href:"https://baomidou.com/pages/10c804/#notlike",target:"_blank",rel:"noopener noreferrer"},vn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">notLike</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOT LIKE &#39;%值%&#39;</li><li>例: <code>notLike(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name not like &#39;%王%&#39;</code></li></ul><h3 id="likeleft" tabindex="-1"><a class="header-anchor" href="#likeleft" aria-hidden="true">#</a> likeLeft</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LIKE &#39;%值&#39;</li><li>例: <code>likeLeft(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name like &#39;%王&#39;</code></li></ul><h3 id="likeright" tabindex="-1"><a class="header-anchor" href="#likeright" aria-hidden="true">#</a> likeRight</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LIKE &#39;值%&#39;</li><li>例: <code>likeRight(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name like &#39;王%&#39;</code></li></ul><h3 id="notlikeleft" tabindex="-1"><a class="header-anchor" href="#notlikeleft" aria-hidden="true">#</a> notLikeLeft</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notLikeLeft</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">notLikeLeft</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOT LIKE &#39;%值&#39;</li><li>例: <code>notLikeLeft(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name not like &#39;%王&#39;</code></li></ul>`,11),hn={id:"notlikeright",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#notlikeright","aria-hidden":"true"},"#",-1),bn={href:"https://baomidou.com/pages/10c804/#notlikeright",target:"_blank",rel:"noopener noreferrer"},_n=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notLikeRight</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">notLikeRight</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOT LIKE &#39;值%&#39;</li><li>例: <code>notLikeRight(&quot;name&quot;, &quot;王&quot;)</code>---&gt;<code>name not like &#39;王%&#39;</code></li></ul>`,2),qn={id:"isnull",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#isnull","aria-hidden":"true"},"#",-1),jn={href:"https://baomidou.com/pages/10c804/#isnull",target:"_blank",rel:"noopener noreferrer"},yn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">)</span>
<span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 IS NULL</li><li>例: <code>isNull(&quot;name&quot;)</code>---&gt;<code>name is null</code></li></ul>`,2),wn={id:"isnotnull",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#isnotnull","aria-hidden":"true"},"#",-1),Rn={href:"https://baomidou.com/pages/10c804/#isnotnull",target:"_blank",rel:"noopener noreferrer"},En=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">)</span>
<span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 IS NOT NULL</li><li>例: <code>isNotNull(&quot;name&quot;)</code>---&gt;<code>name is not null</code></li></ul><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span>
<span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 IN (value.get(0), value.get(1), ...)</li><li>例: <code>in(&quot;age&quot;,{1,2,3})</code>---&gt;<code>age in (1,2,3)</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>
<span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 IN (v0, v1, ...)</li><li>例: <code>in(&quot;age&quot;, 1, 2, 3)</code>---&gt;<code>age in (1,2,3)</code></li></ul>`,7),Sn={id:"notin",tabindex:"-1"},On=n("a",{class:"header-anchor",href:"#notin","aria-hidden":"true"},"#",-1),Ln={href:"https://baomidou.com/pages/10c804/#notin",target:"_blank",rel:"noopener noreferrer"},Nn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span>
<span class="token function">notIn</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 NOT IN (value.get(0), value.get(1), ...)</li><li>例: <code>notIn(&quot;age&quot;,{1,2,3})</code>---&gt;<code>age not in (1,2,3)</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>
<span class="token function">notIn</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 NOT IN (v0, v1, ...)</li><li>例: <code>notIn(&quot;age&quot;, 1, 2, 3)</code>---&gt;<code>age not in (1,2,3)</code></li></ul>`,4),In={id:"insql",tabindex:"-1"},Bn=n("a",{class:"header-anchor",href:"#insql","aria-hidden":"true"},"#",-1),Wn={href:"https://baomidou.com/pages/10c804/#insql",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span>
<span class="token function">inSql</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 IN ( sql语句 )</li><li>例: <code>inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>---&gt;<code>age in (1,2,3,4,5,6)</code></li><li>例: <code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>---&gt;<code>id in (select id from table where id &lt; 3)</code></li></ul>`,2),An={id:"notinsql",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#notinsql","aria-hidden":"true"},"#",-1),Un={href:"https://baomidou.com/pages/10c804/#notinsql",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notInSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span>
<span class="token function">notInSql</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段 NOT IN ( sql语句 )</li><li>例: <code>notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>---&gt;<code>age not in (1,2,3,4,5,6)</code></li><li>例: <code>notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>---&gt;<code>id not in (select id from table where id &lt; 3)</code></li></ul>`,2),Dn={id:"groupby",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#groupby","aria-hidden":"true"},"#",-1),Vn={href:"https://baomidou.com/pages/10c804/#groupby",target:"_blank",rel:"noopener noreferrer"},Qn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
<span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分组：GROUP BY 字段, ...</li><li>例: <code>groupBy(&quot;id&quot;, &quot;name&quot;)</code>---&gt;<code>group by id,name</code></li></ul>`,2),Kn={id:"orderbyasc",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#orderbyasc","aria-hidden":"true"},"#",-1),Yn={href:"https://baomidou.com/pages/10c804/#orderbyasc",target:"_blank",rel:"noopener noreferrer"},Xn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
<span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>排序：ORDER BY 字段, ... ASC</li><li>例: <code>orderByAsc(&quot;id&quot;, &quot;name&quot;)</code>---&gt;<code>order by id ASC,name ASC</code></li></ul>`,2),$n={id:"orderbydesc",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#orderbydesc","aria-hidden":"true"},"#",-1),Gn={href:"https://baomidou.com/pages/10c804/#orderbydesc",target:"_blank",rel:"noopener noreferrer"},zn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
<span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>排序：ORDER BY 字段, ... DESC</li><li>例: <code>orderByDesc(&quot;id&quot;, &quot;name&quot;)</code>---&gt;<code>order by id DESC,name DESC</code></li></ul>`,2),Zn={id:"orderby",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#orderby","aria-hidden":"true"},"#",-1),na={href:"https://baomidou.com/pages/10c804/#orderby",target:"_blank",rel:"noopener noreferrer"},aa=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAsc<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>排序：ORDER BY 字段, ...</li><li>例: <code>orderBy(true, true, &quot;id&quot;, &quot;name&quot;)</code>---&gt;<code>order by id ASC,name ASC</code></li></ul>`,2),sa={id:"having",tabindex:"-1"},ea=n("a",{class:"header-anchor",href:"#having","aria-hidden":"true"},"#",-1),ta={href:"https://baomidou.com/pages/10c804/#having",target:"_blank",rel:"noopener noreferrer"},oa=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">having</span><span class="token punctuation">(</span><span class="token class-name">String</span> sqlHaving<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span>
<span class="token function">having</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> sqlHaving<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HAVING ( sql语句 )</li><li>例: <code>having(&quot;sum(age) &gt; 10&quot;)</code>---&gt;<code>having sum(age) &gt; 10</code></li><li>例: <code>having(&quot;sum(age) &gt; {0}&quot;, 11)</code>---&gt;<code>having sum(age) &gt; 11</code></li></ul>`,2),ca={id:"func",tabindex:"-1"},pa=n("a",{class:"header-anchor",href:"#func","aria-hidden":"true"},"#",-1),la={href:"https://baomidou.com/pages/10c804/#func",target:"_blank",rel:"noopener noreferrer"},ia=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>func 方法(主要方便在出现if...else下调用不同方法能不断链)</li><li>例: <code>func(i -&gt; if(true) {i.eq(&quot;id&quot;, 1)} else {i.ne(&quot;id&quot;, 1)})</code></li></ul>`,2),ua={id:"or",tabindex:"-1"},da=n("a",{class:"header-anchor",href:"#or","aria-hidden":"true"},"#",-1),ra={href:"https://baomidou.com/pages/10c804/#or",target:"_blank",rel:"noopener noreferrer"},ka=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>拼接 OR</p><p>注意事项:</p><p>主动调用<code>or</code>表示紧接着下一个<strong>方法</strong>不是用<code>and</code>连接!(不调用<code>or</code>则默认为使用<code>and</code>连接)</p></li><li><p>例: <code>eq(&quot;id&quot;,1).or().eq(&quot;name&quot;,&quot;老王&quot;)</code>---&gt;<code>id = 1 or name = &#39;老王&#39;</code></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
<span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>OR 嵌套</li><li>例: <code>or(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>---&gt;<code>or (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul>`,4),ma={id:"and",tabindex:"-1"},va=n("a",{class:"header-anchor",href:"#and","aria-hidden":"true"},"#",-1),ha={href:"https://baomidou.com/pages/10c804/#and",target:"_blank",rel:"noopener noreferrer"},ga=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
<span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AND 嵌套</li><li>例: <code>and(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>---&gt;<code>and (name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul>`,2),ba={id:"nested",tabindex:"-1"},_a=n("a",{class:"header-anchor",href:"#nested","aria-hidden":"true"},"#",-1),qa={href:"https://baomidou.com/pages/10c804/#nested",target:"_blank",rel:"noopener noreferrer"},fa=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">nested</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
<span class="token function">nested</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正常嵌套 不带 AND 或者 OR</li><li>例: <code>nested(i -&gt; i.eq(&quot;name&quot;, &quot;李白&quot;).ne(&quot;status&quot;, &quot;活着&quot;))</code>---&gt;<code>(name = &#39;李白&#39; and status &lt;&gt; &#39;活着&#39;)</code></li></ul>`,2),ja={id:"apply",tabindex:"-1"},ya=n("a",{class:"header-anchor",href:"#apply","aria-hidden":"true"},"#",-1),wa={href:"https://baomidou.com/pages/10c804/#apply",target:"_blank",rel:"noopener noreferrer"},xa=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> applySql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span>
<span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> applySql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>拼接 sql</p><p>注意事项:</p><p>该方法可用于数据库<strong>函数</strong> 动态入参的<code>params</code>对应前面<code>applySql</code>内部的<code>{index}</code>部分.这样是不会有sql注入风险的,反之会有!</p></li><li><p>例: <code>apply(&quot;id = 1&quot;)</code>---&gt;<code>id = 1</code></p></li><li><p>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code>---&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></p></li><li><p>例: <code>apply(&quot;date_format(dateColumn,&#39;%Y-%m-%d&#39;) = {0}&quot;, &quot;2008-08-08&quot;)</code>---&gt;<code>date_format(dateColumn,&#39;%Y-%m-%d&#39;) = &#39;2008-08-08&#39;&quot;)</code></p></li></ul>`,2),Ra={id:"last",tabindex:"-1"},Ea=n("a",{class:"header-anchor",href:"#last","aria-hidden":"true"},"#",-1),Sa={href:"https://baomidou.com/pages/10c804/#last",target:"_blank",rel:"noopener noreferrer"},Oa=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">last</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastSql<span class="token punctuation">)</span>
<span class="token function">last</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> lastSql<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>无视优化规则直接拼接到 sql 的最后</p><p>注意事项:</p><p>只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p></li><li><p>例: <code>last(&quot;limit 1&quot;)</code></p></li></ul>`,2),La={id:"exists",tabindex:"-1"},Na=n("a",{class:"header-anchor",href:"#exists","aria-hidden":"true"},"#",-1),Ia={href:"https://baomidou.com/pages/10c804/#exists",target:"_blank",rel:"noopener noreferrer"},Ba=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">exists</span><span class="token punctuation">(</span><span class="token class-name">String</span> existsSql<span class="token punctuation">)</span>
<span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> existsSql<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拼接 EXISTS ( sql语句 )</li><li>例: <code>exists(&quot;select id from table where age = 1&quot;)</code>---&gt;<code>exists (select id from table where age = 1)</code></li></ul>`,2),Wa={id:"notexists",tabindex:"-1"},Ca=n("a",{class:"header-anchor",href:"#notexists","aria-hidden":"true"},"#",-1),Aa={href:"https://baomidou.com/pages/10c804/#notexists",target:"_blank",rel:"noopener noreferrer"},Ta=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">notExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> notExistsSql<span class="token punctuation">)</span>
<span class="token function">notExists</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> notExistsSql<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拼接 NOT EXISTS ( sql语句 )</li><li>例: <code>notExists(&quot;select id from table where age = 1&quot;)</code>---&gt;<code>not exists (select id from table where age = 1)</code></li></ul>`,2),Ua={id:"querywrapper",tabindex:"-1"},Pa=n("a",{class:"header-anchor",href:"#querywrapper","aria-hidden":"true"},"#",-1),Da={href:"https://baomidou.com/pages/10c804/#querywrapper",target:"_blank",rel:"noopener noreferrer"},Ma=n("p",null,"说明:",-1),Va=n("p",null,"继承自 AbstractWrapper ,自身的内部属性 entity 也用于生成 where 条件 及 LambdaQueryWrapper, 可以通过 new QueryWrapper().lambda() 方法获取",-1),Qa={id:"select",tabindex:"-1"},Ka=n("a",{class:"header-anchor",href:"#select","aria-hidden":"true"},"#",-1),Fa={href:"https://baomidou.com/pages/10c804/#select",target:"_blank",rel:"noopener noreferrer"},Ya=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> sqlSelect<span class="token punctuation">)</span>
<span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableFieldInfo</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
<span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityClass<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableFieldInfo</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>设置查询字段</p><p>说明:</p><p>以上方法分为两类. 第二类方法为:过滤查询字段(主键除外),入参不包含 class 的调用前需要<code>wrapper</code>内的<code>entity</code>属性有值! 这两类方法重复调用以最后一次为准</p></li><li><p>例: <code>select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;)</code></p></li><li><p>例: <code>select(i -&gt; i.getProperty().startsWith(&quot;test&quot;))</code></p></li></ul>`,2),Xa={id:"updatewrapper",tabindex:"-1"},$a=n("a",{class:"header-anchor",href:"#updatewrapper","aria-hidden":"true"},"#",-1),Ha={href:"https://baomidou.com/pages/10c804/#updatewrapper",target:"_blank",rel:"noopener noreferrer"},Ga=n("p",null,"说明:",-1),za=n("p",null,[a("继承自 "),n("code",null,"AbstractWrapper"),a(" ,自身的内部属性 "),n("code",null,"entity"),a(" 也用于生成 where 条件 及 "),n("code",null,"LambdaUpdateWrapper"),a(", 可以通过 "),n("code",null,"new UpdateWrapper().lambda()"),a(" 方法获取!")],-1),Za={id:"set",tabindex:"-1"},Ja=n("a",{class:"header-anchor",href:"#set","aria-hidden":"true"},"#",-1),ns={href:"https://baomidou.com/pages/10c804/#set",target:"_blank",rel:"noopener noreferrer"},as=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL SET 字段</li><li>例: <code>set(&quot;name&quot;, &quot;老李头&quot;)</code></li><li>例: <code>set(&quot;name&quot;, &quot;&quot;)</code>---&gt;数据库字段值变为<strong>空字符串</strong></li><li>例: <code>set(&quot;name&quot;, null)</code>---&gt;数据库字段值变为<code>null</code></li></ul>`,2),ss={id:"setsql",tabindex:"-1"},es=n("a",{class:"header-anchor",href:"#setsql","aria-hidden":"true"},"#",-1),ts={href:"https://baomidou.com/pages/10c804/#setsql",target:"_blank",rel:"noopener noreferrer"},os=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置 SET 部分 SQL</li><li>例: <code>setSql(&quot;name = &#39;老李头&#39;&quot;)</code></li></ul>`,2),cs={id:"lambda",tabindex:"-1"},ps=n("a",{class:"header-anchor",href:"#lambda","aria-hidden":"true"},"#",-1),ls={href:"https://baomidou.com/pages/10c804/#lambda",target:"_blank",rel:"noopener noreferrer"},is=n("ul",null,[n("li",null,[a("获取 "),n("code",null,"LambdaWrapper"),a(" 在"),n("code",null,"QueryWrapper"),a("中是获取"),n("code",null,"LambdaQueryWrapper"),a(" 在"),n("code",null,"UpdateWrapper"),a("中是获取"),n("code",null,"LambdaUpdateWrapper")])],-1),us={id:"使用-wrapper-自定义sql",tabindex:"-1"},ds=n("a",{class:"header-anchor",href:"#使用-wrapper-自定义sql","aria-hidden":"true"},"#",-1),rs={href:"https://baomidou.com/pages/10c804/#%E4%BD%BF%E7%94%A8-wrapper-%E8%87%AA%E5%AE%9A%E4%B9%89sql",target:"_blank",rel:"noopener noreferrer"},ks=t("<p>注意事项:</p><p>需要<code>mybatis-plus</code>版本 &gt;= <code>3.0.7</code> param 参数名要么叫<code>ew</code>,要么加上注解<code>@Param(Constants.WRAPPER)</code> 使用<code>${ew.customSqlSegment}</code> 不支持 <code>Wrapper</code> 内的entity生成where语句</p>",2),ms={id:"kotlin持久化对象定义最佳实践",tabindex:"-1"},vs=n("a",{class:"header-anchor",href:"#kotlin持久化对象定义最佳实践","aria-hidden":"true"},"#",-1),hs={href:"https://baomidou.com/pages/10c804/#kotlin%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%B1%A1%E5%AE%9A%E4%B9%89%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5",target:"_blank",rel:"noopener noreferrer"},gs=t(`<p>由于<code>kotlin</code>相比于<code>java</code>多了数据对象（<code>data class</code>)，在未说明情况下可能会混用。建议按照以下形式定义持久化对象</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@TableName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;sys_user&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> User <span class="token punctuation">{</span>
		<span class="token annotation builtin">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>
    <span class="token keyword">var</span> id<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token annotation builtin">@TableField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token keyword">var</span> roleId<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：这里的<code>TableId</code>及<code>TableField</code>并非必要，只是为了展示<code>Mybatis-Plus</code>中的<code>annotation</code>使用</p><p>这里所有成员都需要定义为可空类型（<code>?</code>），并赋予<code>null</code>的初始值，方便我们在以下场景中使用（类似java中的<code>updateSelective</code>）</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> wrapper <span class="token operator">=</span> <span class="token function">KtUpdateWrapper</span><span class="token punctuation">(</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">::</span>id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> newRecord <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
newRecord<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;newName&quot;</span></span>
userMapper<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>newRecord<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不建议使用<code>data class</code>及全参数构造方法，这样我们会写很多不必要的<code>null</code>来构造一个空对象</p>`,6),bs={id:"用注解",tabindex:"-1"},_s=n("a",{class:"header-anchor",href:"#用注解","aria-hidden":"true"},"#",-1),qs={href:"https://baomidou.com/pages/10c804/#%E7%94%A8%E6%B3%A8%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"},fs=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from mysql_data \${ew.customSqlSegment}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MysqlData</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),js={id:"用xml",tabindex:"-1"},ys=n("a",{class:"header-anchor",href:"#用xml","aria-hidden":"true"},"#",-1),ws={href:"https://baomidou.com/pages/10c804/#%E7%94%A8xml",target:"_blank",rel:"noopener noreferrer"},xs=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MysqlData</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span> ew<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MysqlData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	SELECT * FROM mysql_data \${ew.customSqlSegment}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Rs={id:"kotlin使用wrapper",tabindex:"-1"},Es=n("a",{class:"header-anchor",href:"#kotlin使用wrapper","aria-hidden":"true"},"#",-1),Ss={href:"https://baomidou.com/pages/10c804/#kotlin%E4%BD%BF%E7%94%A8wrapper",target:"_blank",rel:"noopener noreferrer"},Os=t("<blockquote><p>kotlin 可以使用 <code>QueryWrapper</code> 和 <code>UpdateWrapper</code> 但无法使用 <code>LambdaQueryWrapper</code> 和 <code>LambdaUpdateWrapper</code> 如果想使用 lambda 方式的 wrapper 请使用 <code>KtQueryWrapper</code> 和 <code>KtUpdateWrapper</code></p></blockquote>",1),Ls={href:"https://github.com/baomidou/mybatis-plus/blob/master/mybatis-plus-extension/src/test/kotlin/com/baomidou/mybatisplus/extension/kotlin/WrapperTest.kt",target:"_blank",rel:"noopener noreferrer"},Ns=t(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> queryWrapper <span class="token operator">=</span> <span class="token function">KtQueryWrapper</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">::</span>name<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;sss&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">::</span>roleId<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;sss2&quot;</span></span><span class="token punctuation">)</span>
userMapper<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span>

<span class="token keyword">val</span> updateConditionWrapper <span class="token operator">=</span> <span class="token function">KtUpdateWrapper</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">::</span>name<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;sss&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>User<span class="token operator">::</span>roleId<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;sss2&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> updateRecord <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
updateRecord<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;newName&quot;</span></span>
userMapper<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRecord<span class="token punctuation">,</span> updateConditionWrapper<span class="token punctuation">)</span>

<span class="token keyword">val</span> updateRecord <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
updateRecord<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span>
updateRecord<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;haha&quot;</span></span>
userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>updateRecord<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Is={id:"链式调用-lambda-式",tabindex:"-1"},Bs=n("a",{class:"header-anchor",href:"#链式调用-lambda-式","aria-hidden":"true"},"#",-1),Ws={href:"https://baomidou.com/pages/10c804/#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8-lambda-%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Cs=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 区分:</span>
<span class="token comment">// 链式调用 普通</span>
<span class="token class-name">UpdateChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 链式调用 lambda 式。注意：不支持 Kotlin </span>
<span class="token class-name">LambdaUpdateChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等价示例：</span>
<span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Entity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等价示例：</span>
<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Entity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function As(Ts,Us){const s=c("ExternalLinkIcon");return p(),l("div",null,[d,r,k,n("ul",null,[m,n("li",null,[a("有任何疑问就点开源码看,看不懂"),v,a("的"),n("a",h,[a("点击我学习新知识(opens new window)"),e(s)])])]),g,n("ul",null,[n("li",null,[b,_,q,f,n("p",null,[j,a(" : "),y,a("为数据库字段名,"),w,a("为字段值 "),x,a(" : 为"),R,a("则在"),E,a("的"),S,a("为"),O,a("时调用 "),n("a",L,[a("isNull"),e(s)]),a(" 方法,为"),N,a("时则忽略"),I,a("为"),B,a("的")])]),W,C]),A,n("h3",T,[U,a(),n("a",P,[a("#"),e(s)]),a("ne")]),D,n("h3",M,[V,a(),n("a",Q,[a("#"),e(s)]),a("gt")]),K,n("h3",F,[Y,a(),n("a",X,[a("#"),e(s)]),a("lt")]),$,n("h3",H,[G,a(),n("a",z,[a("#"),e(s)]),a("le")]),Z,n("h3",J,[nn,a(),n("a",an,[a("#"),e(s)]),a("between")]),sn,n("h3",en,[tn,a(),n("a",on,[a("#"),e(s)]),a("notBetween")]),cn,n("h3",pn,[ln,a(),n("a",un,[a("#"),e(s)]),a("like")]),dn,n("h3",rn,[kn,a(),n("a",mn,[a("#"),e(s)]),a("notLike")]),vn,n("h3",hn,[gn,a(),n("a",bn,[a("#"),e(s)]),a("notLikeRight")]),_n,n("h3",qn,[fn,a(),n("a",jn,[a("#"),e(s)]),a("isNull")]),yn,n("h3",wn,[xn,a(),n("a",Rn,[a("#"),e(s)]),a("isNotNull")]),En,n("h3",Sn,[On,a(),n("a",Ln,[a("#"),e(s)]),a("notIn")]),Nn,n("h3",In,[Bn,a(),n("a",Wn,[a("#"),e(s)]),a("inSql")]),Cn,n("h3",An,[Tn,a(),n("a",Un,[a("#"),e(s)]),a("notInSql")]),Pn,n("h3",Dn,[Mn,a(),n("a",Vn,[a("#"),e(s)]),a("groupBy")]),Qn,n("h3",Kn,[Fn,a(),n("a",Yn,[a("#"),e(s)]),a("orderByAsc")]),Xn,n("h3",$n,[Hn,a(),n("a",Gn,[a("#"),e(s)]),a("orderByDesc")]),zn,n("h3",Zn,[Jn,a(),n("a",na,[a("#"),e(s)]),a("orderBy")]),aa,n("h3",sa,[ea,a(),n("a",ta,[a("#"),e(s)]),a("having")]),oa,n("h3",ca,[pa,a(),n("a",la,[a("#"),e(s)]),a("func")]),ia,n("h3",ua,[da,a(),n("a",ra,[a("#"),e(s)]),a("or")]),ka,n("h3",ma,[va,a(),n("a",ha,[a("#"),e(s)]),a("and")]),ga,n("h3",ba,[_a,a(),n("a",qa,[a("#"),e(s)]),a("nested")]),fa,n("h3",ja,[ya,a(),n("a",wa,[a("#"),e(s)]),a("apply")]),xa,n("h3",Ra,[Ea,a(),n("a",Sa,[a("#"),e(s)]),a("last")]),Oa,n("h3",La,[Na,a(),n("a",Ia,[a("#"),e(s)]),a("exists")]),Ba,n("h3",Wa,[Ca,a(),n("a",Aa,[a("#"),e(s)]),a("notExists")]),Ta,n("h2",Ua,[Pa,a(),n("a",Da,[a("#"),e(s)]),a("QueryWrapper")]),Ma,Va,n("h3",Qa,[Ka,a(),n("a",Fa,[a("#"),e(s)]),a("select")]),Ya,n("h2",Xa,[$a,a(),n("a",Ha,[a("#"),e(s)]),a("UpdateWrapper")]),Ga,za,n("h3",Za,[Ja,a(),n("a",ns,[a("#"),e(s)]),a("set")]),as,n("h3",ss,[es,a(),n("a",ts,[a("#"),e(s)]),a("setSql")]),os,n("h3",cs,[ps,a(),n("a",ls,[a("#"),e(s)]),a("lambda")]),is,n("h2",us,[ds,a(),n("a",rs,[a("#"),e(s)]),a("使用 Wrapper 自定义SQL")]),ks,n("h3",ms,[vs,a(),n("a",hs,[a("#"),e(s)]),a("kotlin持久化对象定义最佳实践")]),gs,n("h3",bs,[_s,a(),n("a",qs,[a("#"),e(s)]),a("用注解")]),fs,n("h3",js,[ys,a(),n("a",ws,[a("#"),e(s)]),a("用XML")]),xs,n("h3",Rs,[Es,a(),n("a",Ss,[a("#"),e(s)]),a("kotlin使用wrapper")]),Os,n("p",null,[a("请参考"),n("a",Ls,[a("实例(opens new window)"),e(s)])]),Ns,n("h3",Is,[Bs,a(),n("a",Ws,[a("#"),e(s)]),a("链式调用 lambda 式")]),Cs])}const Ds=o(u,[["render",As],["__file","5.html.vue"]]);export{Ds as default};
