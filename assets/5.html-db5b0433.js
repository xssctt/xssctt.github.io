const e=JSON.parse('{"key":"v-4b715837","path":"/other/mq/5.html","title":"MQ","lang":"zh-CN","frontmatter":{"title":"MQ","icon":"page","order":66,"author":"xss","date":"2023-12-11T00:00:00.000Z","category":["MQ"],"tag":["MQ"],"footer":"这是测试显示的页脚","copyright":"无版权","description":"@SpringBootTest class Springboot3ApplicationTests { @Resource DataSource dataSource; @Resource IUserService userService; @Resource RedisTemplate&lt;String,Object&gt; redisTemplate; // spring MQ -------------------------------------------- //RabbitTemplate为我们封装了大量的RabbitMQ操作，已经由Starter提供，因此直接注入使用即可 @Resource RabbitTemplate template; @Test void publisher() { //使用convertAndSend方法一步到位，参数基本和之前是一样的 //最后一个消息本体可以是Object类型，真是大大的方便 template.convertAndSend(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\"); } @Test void publisher1() { //会等待消费者消费然后返回响应结果 Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\"); System.out.println(\\"收到消费者响应：\\"+res); } @Test void publisher2() { //会等待消费者消费然后返回响应结果 Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", new User()); System.out.println(\\"收到消费者响应：\\"+res); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/mq/5.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"MQ"}],["meta",{"property":"og:description","content":"@SpringBootTest class Springboot3ApplicationTests { @Resource DataSource dataSource; @Resource IUserService userService; @Resource RedisTemplate&lt;String,Object&gt; redisTemplate; // spring MQ -------------------------------------------- //RabbitTemplate为我们封装了大量的RabbitMQ操作，已经由Starter提供，因此直接注入使用即可 @Resource RabbitTemplate template; @Test void publisher() { //使用convertAndSend方法一步到位，参数基本和之前是一样的 //最后一个消息本体可以是Object类型，真是大大的方便 template.convertAndSend(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\"); } @Test void publisher1() { //会等待消费者消费然后返回响应结果 Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\"); System.out.println(\\"收到消费者响应：\\"+res); } @Test void publisher2() { //会等待消费者消费然后返回响应结果 Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", new User()); System.out.println(\\"收到消费者响应：\\"+res); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xss"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2023-12-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xss\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"other/mq/5.md","localizedDate":"2023年12月11日","excerpt":"<pre><code>@SpringBootTest\\nclass Springboot3ApplicationTests {\\n@Resource\\nDataSource dataSource;\\n\\n@Resource\\nIUserService userService;\\n\\n@Resource\\nRedisTemplate&lt;String,Object&gt; redisTemplate;\\n\\n// spring MQ --------------------------------------------\\n\\n//RabbitTemplate为我们封装了大量的RabbitMQ操作，已经由Starter提供，因此直接注入使用即可\\n@Resource\\nRabbitTemplate template;\\n\\n@Test\\nvoid publisher() {\\n    //使用convertAndSend方法一步到位，参数基本和之前是一样的\\n    //最后一个消息本体可以是Object类型，真是大大的方便\\n    template.convertAndSend(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\");\\n}\\n\\n@Test\\nvoid publisher1() {\\n    //会等待消费者消费然后返回响应结果\\n    Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", \\"Hello World!\\");\\n    System.out.println(\\"收到消费者响应：\\"+res);\\n}\\n\\n@Test\\nvoid publisher2() {\\n    //会等待消费者消费然后返回响应结果\\n    Object res = template.convertSendAndReceive(\\"amq.direct\\", \\"my-xss\\", new User());\\n    System.out.println(\\"收到消费者响应：\\"+res);\\n}\\n</code></pre>","autoDesc":true}');export{e as data};
