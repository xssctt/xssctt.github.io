import{_ as e,V as p,W as n,$ as t}from"./framework-56e099cb.js";const a={},s=t("<p>欢迎使用Rabbittemplate Rabbittemplate介绍 RabbitTemplate是Spring AMQP中的核心组件之一。它提供了一组方法来与RabbitMQ进行交互。以下是RabbitTemplate的所有方法的详细描述：</p><p>send：将消息发送到指定的交换机和路由键中。</p><p>convertAndSend：将Java对象转换为消息，然后将其发送到指定的交换机和路由键中。</p><p>sendAndReceive：发送一个请求消息并接收一个响应消息。</p><p>convertSendAndReceive：将Java对象转换为请求消息，发送请求消息，并接收响应消息。</p><p>convertSendAndReceiveAsType：将Java对象转换为请求消息，发送请求消息，并接收响应消息，并将响应消息转换为指定类型的Java对象。</p><p>convertSendAndReceiveAsType：将Java对象转换为请求消息，发送请求消息，并接收响应消息，并将响应消息转换为指定类型的Java对象。</p><p>sendWithMessagePostProcessor：发送消息，并在发送之前进行处理。</p><p>execute：执行Rabbit操作并返回一个结果。</p><p>receive：从队列接收一条消息。</p><p>receiveAndConvert：从队列接收一条消息，并将其转换为Java对象。</p><p>receiveAndReply：从队列接收一条请求消息，并发送一个响应消息。</p><p>convertSendAndReceiveAsType：将Java对象转换为请求消息，发送请求消息，并接收响应消息，并将响应消息转换为指定类型的Java对象。</p><p>convertSendAndReceiveAsType：将Java对象转换为请求消息，发送请求消息，并接收响应消息，并将响应消息转换为指定类型的Java对象。</p><p>convertSendAndReceiveAndReplyHeader：将Java对象转换为请求消息，并发送请求消息。接收到请求消息后，将其转换为响应消息，并设置响应消息的头信息。</p><p>convertAndSend：将Java对象转换为消息，并发送消息。</p><p>convertAndSend：将Java对象转换为消息，并发送消息。在发送之前，先对消息进行处理。</p><p>convertAndSend：将Java对象转换为消息，并发送消息。在发送之前，先对消息进行处理，并指定响应消息的类型。</p><p>convertAndSend：将Java对象转换为消息，并发送消息。在发送之前，先对消息进行处理，并指定响应消息的类型和交换机。</p><p>send：将消息发送到指定的交换机和路由键中。</p><p>send：将消息发送到指定的交换机和路由键中。在发送之前，先对消息进行处理。</p><p>send：将消息发送到指定的交换机和路由键中。在发送之前，先对消息进行处理，并指定响应消息的类型。</p><p>sendAndReceive：发送一个请求消息并接收一个响应消息。</p><p>sendAndReceive：发送一个请求消息并接收一个响应消息。在发送之前，先对消息进行处理。</p><p>sendAndReceive：发送一个请求消息并接收一个响应消息。在发送之前，先对消息进行处理，并指定响应消息的类型。</p><p>sendAndReceive：发送一个请求消息并接收一个响应消息。在发送之前，先对消息进行处理，并指定响应消息的类型和交换机。</p><p>setConnectionFactory：设置RabbitMQ连接工厂。</p><p>getConnectionFactory：获取RabbitMQ连接工厂。</p><p>setExchange：设置默认的交换机。</p><p>getExchange：获取默认的交换机。</p><p>setRoutingKey：设置默认的路由键。</p><p>getRoutingKey：获取默认的路由键。</p><p>setQueue：设置默认的队列。</p><p>getQueue：获取默认的队列。</p><p>setMandatory：设置消息是否强制路由到队列。</p><p>isMandatory：检查消息是否强制路由到队列。</p><p>setReplyTimeout：设置接收响应消息的超时时间。</p><p>getReplyTimeout：获取接收响应消息的超时时间。</p><p>setChannelTransacted：设置通道是否应该在事务中使用。</p><p>isChannelTransacted：检查通道是否应该在事务中使用。</p><p>setConfirmCallback：设置确认回调。</p><p>getConfirmCallback：获取确认回调。</p><p>setReturnCallback：设置返回回调。</p><p>getReturnCallback：获取返回回调。</p><p>setBeforePublishPostProcessor：设置发布之前的后处理器。</p><p>getBeforePublishPostProcessor：获取发布之前的后处理器。</p><p>setAfterReceivePostProcessor：设置接收后的后处理器。</p><p>getAfterReceivePostProcessor：获取接收后的后处理器。</p><p>setUsePublisherConnection：设置是否应该使用发布者连接。</p><p>isUsePublisherConnection：检查是否应该使用发布者连接。</p><p>setApplicationContext：设置应用程序上下文。</p>",51),c=[s];function o(r,i){return p(),n("div",null,c)}const v=e(a,[["render",o],["__file","4.html.vue"]]);export{v as default};
